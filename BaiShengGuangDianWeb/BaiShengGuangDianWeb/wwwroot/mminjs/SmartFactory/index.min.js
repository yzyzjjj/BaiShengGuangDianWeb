function pageReady(){$(".sidebar-mini").addClass("sidebar-collapse");$("#sendCardSTime,#sendCardETime,#pmcChildSTime,#pmcChildETime").val(getDate()).datepicker("update");$("#pmcChildDTime").val(getNowWeekRange((new Date).getDay()==0?7:(new Date).getDay()).end).datepicker("update");getNotArrangeTaskList();getArrangeTaskList();$("#personNavLi").one("click",getPersonList);$("#deviceNavLi").one("click",getDeviceList);$("#flowNavLi").one("click",getProcessCodeList);$("#processSetNavLi").one("click",getProcessOpList);$("#planNavLi").one("click",getPlanList);$("#workOrderNavLi").one("click",getWorkOrderList);$("#taskOrderNavLi").one("click",getTaskOrderList);$("#flowCardNavLi").one("click",()=>{const n=myPromise(5090),t=myPromise(5040),i=myPromise(5060);Promise.all([n,t,i]).then(n=>{const t='<option value="0">所有<\/option>';$("#flowCardTaskOrderSelect").html(`${t}${setOptions(n[0].datas,"TaskOrder")}`);$("#flowCardProcessCodeSelect").html(`${t}${setOptions(n[1].datas,"Code")}`);$("#flowCardPlanSelect").html(`${t}${setOptions(n[2].datas,"Product")}`);getFlowCardList()})});$("#pmcExpelProNavLi").one("click",()=>{getNotArrangeTaskList(),getArrangeTaskList()});$("#addProcessCodeBody,#addProcessCodeCategoryBody").on("click",".upTr",function(){const n=$(this).parents("tr"),t="#"+$(this).parents("tbody").attr("id"),i=n.prev();i.before(n);setAddProcessOpList(t)});$("#addProcessCodeBody,#addProcessCodeCategoryBody").on("click",".delBtn",function(){const n="#"+$(this).parents("tbody").attr("id");$(this).parents("tr").remove();setAddProcessOpList(n)});$("#addPlanCapacity").on("change",function(){const n=n=>{const t=_tablesConfig(!1,n);t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-info btn-sm capacity-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">查看</button>`}]);$("#addPlanCapacityList").DataTable(t)},t=$(this).val();t?myPromise(5560,{capacityId:t},!0).then(t=>n(t.datas)):n([])});$("#addPlanCapacityList").on("input",".rate",function(){$(this).val()>>0>100&&$(this).val(100)});$("#addPlanCapacityList").on("input",".minute,.second",function(){$(this).val()>>0>59&&$(this).val(59)});$("#addPlanProcess").on("change",function(n,t){const i=$(this).val(),r=myPromise(5530,{categoryId:i,menu:!0},!0),u=myPromise(5040,{categoryId:i},!0);Promise.all([r,u]).then(n=>{const i=n[1].datas;i.forEach(n=>_planProcessCodeInfo[n.Id]=n);const r=`<div class="temp form-group" style="border-bottom:1px solid #eee">
                            <div class="flexStyle form-group" style="justify-content:space-between;align-items:flex-start">
                                <div class="flexStyle" style="flex-wrap:wrap">
                                    <label class="control-label text-nowrap no-margin">流程编号：</label>
                                    <select class="form-control process-code-select" style="width:150px;margin-right:15px">${setOptions(i,"Code")}</select>
                                    <button class="btn btn-info btn-sm browse-btn" style="margin-right:15px">浏览</button>
                                    <label class="control-label text-nowrap no-margin process-code-category">类型：</label>
                                </div>
                                <button class="btn btn-danger btn-sm del-btn"><i class="fa fa-minus"></i></button>
                            </div>
                            <div class="table-responsive mailbox-messages">
                                <table class="table table-hover table-striped process-table"></table>
                            </div>
                        </div>`;$("#planProcessCodeList").empty();$("#addPlanProcessList").off("click").on("click",function(){$("#planProcessCodeList").append(r).find(".process-code-select:last").val("");disabledProcessCode();$("#planProcessCodeList .process-code-select:first option").length===$("#planProcessCodeList .temp").length&&$(this).prop("disabled",!0)});t?t(n[0].datas):$("#addPlanCapacity").html(setOptions(n[0].datas,"Capacity")).trigger("change");$("#addPlanProcessList").prop("disabled",!i.length);$("#addPlanModel").modal("show")})});$("#planProcessCodeList").on("change",".process-code-select",function(){const i=$(this).val(),n=_planProcessCodeInfo[i];$(this).siblings(".process-code-category").text(`类型：${n.Category}`);const r=n.List?n.List.split(","):[],u=n.Processes?n.Processes.split(","):[],f=r.map((t,i)=>({ProcessId:t,Process:u[i],ProcessNumber:0,ProcessCodeId:n.Id})),t=_tablesConfig(!1,f);t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:null,title:"可否返工",render:tableSet.isRework},{data:"ProcessNumber",title:"单台加工数量",bVisible:!1,render:tableSet.addInput.bind(null,"processNumber","auto")},{data:null,title:"工艺数据",render:tableSet.setBtn}]);$(this).closest(".temp").find(".process-table").DataTable(t);disabledProcessCode()});$("#planProcessCodeList").on("click",".browse-btn",function(){myPromise(5040).then(n=>{const t=_tablesConfig(!1,n.datas,0);t.columns=t.columns.concat([{data:"Code",title:"编号"},{data:"Category",title:"类型"},{data:"Processes",title:"流程详情",render:tableSet.processDetail},{data:"Remark",title:"备注"}]);$("#browseProcessCodeList").DataTable(t);$("#browseProcessCodeModel").modal("show")})});$("#planProcessCodeList").on("click",".del-btn",function(){$(this).closest(".temp").remove();disabledProcessCode();$("#addPlanProcessList").prop("disabled",!1)});$("#planProcessCodeList").on("click",".set-btn",function(){const t=this.ProcessData?this.ProcessData.map(n=>({addPressM:n[0],addPressS:n[1],workM:n[2],workS:n[3],setPress:n[4],rotate:n[5]})):[],n=_tablesConfig(!1,t);n.columns=n.columns.concat([{data:"addPressM",title:"加压时间（M）",render:tableSet.addInput.bind(null,"addPressM","auto")},{data:"addPressS",title:"加压时间（S）",render:tableSet.addInput.bind(null,"addPressS","auto")},{data:"workM",title:"工序时间（M）",render:tableSet.addInput.bind(null,"workM","auto")},{data:"workS",title:"工序时间（S）",render:tableSet.addInput.bind(null,"workS","auto")},{data:"setPress",title:"设定压力（Kg）",render:tableSet.addInput.bind(null,"setPress","auto")},{data:"rotate",title:"下盘速度（rpm）",render:tableSet.addInput.bind(null,"rotate","auto")},{data:null,title:"删除",render:()=>'<button class="btn btn-danger btn-xs del-btn"><i class="fa fa-minus"><\/i><\/button>'}]);$("#setCraftList").DataTable(n);$("#addCraftTrBtn").prop("disabled",getDataTableRow("#setCraftList").length===8);$("#setCraftModel").modal("show");$("#addCraftBtn").off("click").on("click",()=>{const n=getDataTableRow("#setCraftList");if(!n.length){layer.msg("请先设置数据再添加");return}const t=Array.from(n).map(n=>{const t=$(n),i=t.find(".addPressM").val()>>0||0,r=t.find(".addPressS").val()>>0||0,u=t.find(".workM").val()>>0||0,f=t.find(".workS").val()>>0||0,e=t.find(".setPress").val()>>0||0,o=t.find(".rotate").val()>>0||0;return[i,r,u,f,e,o]});this.ProcessData=t;layer.msg("工艺设置成功");$("#setCraftModel").modal("hide")})});$("#setCraftList").on("click",".del-btn",function(){$("#addCraftTrBtn").prop("disabled",!1);delDataTableTr.call(this)});$("#addCraftTrBtn").on("click",function(){addDataTableTr("#setCraftList",{addPressM:0,addPressS:0,workM:0,workS:0,setPress:0,rotate:0});getDataTableRow("#setCraftList").length===8&&$(this).prop("disabled",!0)});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList,#addPlanCapacityList,#notArrangeTaskProcessBox,#capacityTaskProcessListBox").on("input","input",function(){onInput(this,8,0)});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList,#devCapacitySetList,#personCapacitySetList,#addPlanCapacityList,#notArrangeTaskProcessBox").on("focus","input",function(){$(this).val().trim()==0&&$(this).val("")});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList,#devCapacitySetList,#personCapacitySetList,#addPlanCapacityList,#notArrangeTaskProcessBox").on("blur","input",function(){isStrEmptyOrUndefined($(this).val().trim())&&$(this).val(0)});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("input",".target",function(){onInput(this,8,0)});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("focus",".target",function(){$(this).val().trim()==0&&$(this).val("")});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("blur",".target",function(){isStrEmptyOrUndefined($(this).val().trim())&&$(this).val(0)});$("#addTaskOrderList").on("change",".workOrder",function(){const n=$(this).val();myPromise(5070,{qId:n},!0).then(n=>{const t=n.datas[0];$(this).closest("td").next().text(t.Target).next().text(t.Left).next().text(t.Doing).nextAll().find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update")})});$("#taskOrderSelect").on("change",function(){const n=$(this).val();myPromise(5090,{qId:n},!0).then(n=>{const t=n.datas[0];$("#taskOrderTarget").text(t.Target);$("#taskOrderIssueCount").text(t.IssueCount);$("#taskOrderIssue").text(t.Issue);$("#taskOrderDoingCount").text(t.DoingCount);$("#taskOrderDoneCount").text(t.DoneCount)})});$("#processDetailList").on("click",".look-btn",function(){const t=this.ProcessData.map(n=>({addPressM:n[0],addPressS:n[1],workM:n[2],workS:n[3],setPress:n[4],rotate:n[5]})),n=_tablesConfig(!1,t);n.columns=n.columns.concat([{data:"addPressM",title:"加压时间（M）"},{data:"addPressS",title:"加压时间（S）"},{data:"workM",title:"工序时间（M）"},{data:"workS",title:"工序时间（S）"},{data:"setPress",title:"设定压力（Kg）"},{data:"rotate",title:"下盘速度（rpm）"}]);$("#craftDetailList").DataTable(n);$("#showCraftDetailModal").modal("show")});$("#addFlowCardTaskOrderSelect").on("change",function(){const n=$(this).val();myPromise(5090,{qId:n},!0).then(n=>selectTaskOrder(n.datas[0]))});$("#addFlowCardProcessCodeSelect").on("change",function(){const n=$(this).val();n?myPromise(5040,{qId:n},!0).then(n=>{const t=n.datas[0];$("#addFlowCardType").text(t.Category);$("#addFlowCardProcessDetail").text(t.Processes.replace(/,/g," > "))}):($("#addFlowCardType").text(""),$("#addFlowCardProcessDetail").text(""))});$("#showMode").on("change",getProductionLine);$("#productionLineList").on("click",".show-task-btn",function(n){const t=$(this).val();myPromise(5250,{workOrderId:t},!0).then(n=>{const t=_tablesConfig(!1,n.datas);t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:null,title:"状态",render:tableSet.state},{data:"DeliveryTime",title:"交货日期",render:tableSet.delivery},{data:"Progress",title:"进度",render:tableSet.progress},{data:"Id",title:"流程卡",render:n=>`<button class="btn btn-info btn-sm show-flow-btn" value="${n}">查看</button>`}]);$("#taskDetailList").DataTable(t);$("#showTaskDetailModal").modal("show")});n.stopPropagation()});$("#productionLineList").on("click",".work-order",function(){getLineCommon.call(this,5201,getWorkLine);const n=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"WorkOrder",title:"工单"},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},t=$(this).attr("value"),i=()=>{myPromise(5204,{workOrderId:t},!0).then(t=>{processWarningDangerTemp("warning",`报警工单（${t.datas.length}）`);$("#warningLineBox .refresh").on("click",i);$("#warningLineBox table").DataTable(n(t,"报警时间","报警信息"))})},r=()=>{myPromise(5205,{workOrderId:t},!0).then(t=>{processWarningDangerTemp("danger",`中断工单（${t.datas.length}）`);$("#dangerLineBox .refresh").on("click",r);$("#dangerLineBox table").DataTable(n(t,"中断时间","原因"))})};i();r()});$("#productionLineList").on("click",".task-order",function(){getLineCommon.call(this,5251,getTaskLine);const n=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"TaskOrder",title:"任务单"},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},t=$(this).attr("value"),f=$(this).attr("work"),i=()=>{myPromise(5251,{qId:f},!0).then(n=>{n=n.datas;processWarningDangerTemp("success",`标准工序（${n.length?n[0].Processes.length:0}）`);$("#successLineBox .refresh").on("click",i);const t=_tablesConfig(!1,n.length?n[0].Processes:[]);t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:null,title:"最后完成时间",render:tableSet.endFinishTime},{data:"Progress",title:"进度",render:tableSet.progress},{data:"Qualified",title:"加工次数"},{data:"Before",title:"产量"}]);$("#successLineBox table").DataTable(t)})},r=()=>{myPromise(5254,{taskOrderId:t},!0).then(t=>{t=t.datas;processWarningDangerTemp("warning",`报警工单（${t.length}）`);$("#warningLineBox .refresh").on("click",r);$("#warningLineBox table").DataTable(n(t,"报警时间","报警信息"))})},u=()=>{myPromise(5255,{taskOrderId:t},!0).then(t=>{t=t.datas;processWarningDangerTemp("danger",`中断工单（${t.length}）`);$("#dangerLineBox .refresh").on("click",u);$("#dangerLineBox table").DataTable(n(t,"中断时间","原因"))})};i();r();u()});$("#productionLineList").on("click",".flow-card",function(){getLineCommon.call(this,5301,getFlowCardLine);const t=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},n=$(this).attr("value"),i=()=>{myPromise(5150,{flowCardId:n},!0).then(n=>{n=n.datas;processWarningDangerTemp("success",`流程卡工序（${n.length}）`);$("#successLineBox .refresh").on("click",i);const t=_tablesConfig(!1,n);t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:null,title:"最后完成时间",render:tableSet.endFinishTime},{data:"Progress",title:"进度",render:tableSet.progress},{data:"Count",title:"加工次数"},{data:"Before",title:"产量"}]);$("#successLineBox table").DataTable(t)})},r=()=>{myPromise(5304,{flowCardId:n},!0).then(n=>{n=n.datas;processWarningDangerTemp("warning",`报警工单（${n.length}）`);$("#warningLineBox .refresh").on("click",r);$("#warningLineBox table").DataTable(t(n,"报警时间","报警信息"))})},u=()=>{myPromise(5305,{flowCardId:n},!0).then(n=>{n=n.datas;processWarningDangerTemp("danger",`中断工单（${n.length}）`);$("#dangerLineBox .refresh").on("click",u);$("#dangerLineBox table").DataTable(t(n,"中断时间","原因"))})};i();r();u()});$("#taskDetailList,#productionLineList").on("click",".show-flow-btn",function(n){const t=$(this).val();myPromise(5300,{taskOrderId:t},!0).then(n=>{const t=_tablesConfig(!1,n.datas);t.columns=t.columns.concat([{data:"CreateTime",title:"发出日期"},{data:"FlowCard",title:"流程卡号"},{data:"Process",title:"当前工序"},{data:null,title:"状态",render:tableSet.state},{data:"Progress",title:"进度",render:tableSet.progress}]);$("#flowDetailList").DataTable(t);$("#showFlowDetailModal").modal("show")});n.stopPropagation()});$("#pmcPersonQueryMode").on("change",function(){const t=$(this).val(),n=n=>{$("#pmcPersonQuerySelect").html(n).removeClass("hidden"),$("#pmcPersonQueryInput").addClass("hidden")};switch(t){case"state":n(_tableSet().stateOps);break;case"levelId":myPromise(5510,{menu:!0},!0,0).then(t=>n(setOptions(t.datas,"Level")));break;case"processId":myPromise(5030,{menu:!0},!0,0).then(t=>n(setOptions(t.datas,"Process")));break;default:$("#pmcPersonQueryInput").val("").removeClass("hidden");$("#pmcPersonQuerySelect").addClass("hidden")}});$("#pmcGradeList,#addPmcGradeList").on("input",".order",function(){onInput(this,8,0)});$("#addPmcPersonList").on("change",".name",disabledPmcPerson);$("#addPmcPersonList").on("click",".del-btn",function(){delDataTableTr.call(this);disabledPmcPerson();$("#addPmcPersonListBtn").prop("disabled",!1)});$("#addDeviceList,#deviceList").on("change",".category",function(){const n=$(this).val(),t=$(this).closest("tr");myPromise(5024,{categoryId:n,menu:!0},!0,0).then(n=>t.find(".model").html(setOptions(n.datas,"Model")))});$("#capacityProcess").on("change",function(){const n=$(this).val(),t=$(this).attr("table");t=="#capacityDetailList"&&($("#devCapacitySetList").closest(".mailbox-messages").empty().append('<table class="table table-hover table-striped table-condensed table-responsive" id="devCapacitySetList"><\/table>'),$("#personCapacitySetList").closest(".mailbox-messages").empty().append('<table class="table table-hover table-striped table-condensed table-responsive" id="personCapacitySetList"><\/table>'),devAndPersonInputInit());const i=currentCategoryId==n?{capacityId}:{categoryId:n};myPromise(5560,i,!0).then(i=>{const r=_tablesConfig(!1,i.datas);r.columns=r.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-primary btn-sm set-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">设置</button>`},{data:null,title:"是否设置",render:tableSet.isFinish}]);r.createdRow=(t,i)=>{const r=$(t).find(".set-btn")[0];for(let n in i)r[n]=i[n];r.exist=currentCategoryId==n};$(t).DataTable(r)})});$("#addCapacityList,#capacityDetailList").on("click",".set-btn",function(){showCapacitySetModal.call(this);$("#addCapacitySetBtn").removeClass("hidden")});$("#capacityList").on("click",".look-btn",function(){showCapacityDetailModal.call(this,0)});$("#capacityList").on("click",".update-btn",function(){showCapacityDetailModal.call(this,1)});$("#capacityDetailList").on("click",".capacity-btn",function(){let t="qId",n=$(this).val();n&&n!=0||(t="processId",n=$(this).attr("process"));var r=$(this).attr("p");const i={};i[t]=n;myPromise(5564,i,!0).then(n=>{n.Process=r,devicesOperatorsTable(n,!0)});$("#addCapacitySetBtn").addClass("hidden")});$(".calTimeBox").on("input",".ch, .cm, .cs",function(){exchangeTime(this)});$(".calTimeBox").on("click",".set",function(){exchangeTime(this,!0)});$("#addPlanCapacityList").on("click",".capacity-btn",function(){let t="qId",n=$(this).attr("list");n&&n!=0||(t="processId",n=$(this).attr("process"));var r=$(this).attr("p");const i={};i[t]=n;myPromise(5564,i,!0).then(n=>{n.Process=r,devicesOperatorsTable(n,!0)});$("#addCapacitySetBtn").addClass("hidden")});$("#addProcessCodeCategoryName").on("change",function(){const n=$(this).val();$("#addProcessCodeBody").empty();myPromise(5056,{CategoryId:n},!0).then(n=>{const t=_tablesConfig(!1,n.datas);t.columns.unshift({data:null,title:"",render:tableSet.addBtn.bind(null,"addProcessOpToCode"),orderable:!1,sWidth:"80px"});t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:"Remark",title:"备注"}]);$("#addProcessCodeOpList").DataTable(t)})});$("#notArrangeTaskList").on("click",".del-btn",function(){const n=$(this).closest("tr");n.find(".taskOrder option").prop("disabled",!1);const t=n.find(".taskOrder").val();delDataTableTr.call(this);isStrEmptyOrUndefined(t)||(disabledPmcTask(),$("#addNotArrangeTaskListBtn").prop("disabled",!1),getTaskProcessList(!1))});$(".form_date").on("change",function(){isStrEmptyOrUndefined($(this).val())&&$(this).val(getDate()).datepicker("update")});$("#pmcChildAuto").iCheck("check")}function exchangeTime(n,t=false){const i=$(n).closest("div"),r=t?0:i.find(".ch").val()>>0,u=t?0:i.find(".cm").val()>>0,f=t?0:i.find(".cs").val()>>0,o=convertSecond(r,u,f),e=convertTime(o,!1);i.find(".rm").text(e.m);i.find(".rs").text(e.s);t&&(i.find(".ch").val(r),i.find(".cm").val(u),i.find(".cs").val(f))}function myPromise(n,t,i=false,r=1,u=undefined){const f={opType:n};return t&&(f.opData=JSON.stringify(t)),i&&(t=!t),new Promise(n=>{ajaxPost("/Relay/Post",f,i=>{if(t)layer.msg(i.errmsg),i.errno==0&&(u!=undefined&&u(),n(i));else{if(i.errno!=0){var r="";return i.datas&&(r=i.datas.join()+","),layer.msg(r+i.errmsg)}u!=undefined&&u();n(i)}},r)})}function _tablesConfig(n,t,i=1){const r={dom:'<"pull-left"l><"pull-right"f>rt<"col-sm-5"i><"col-sm-7"p>',bAutoWidth:!1,destroy:!0,paging:!0,searching:n,ordering:n,data:t,aaSorting:[[i,"asc"]],aLengthMenu:[20,40,60],iDisplayLength:20,language:oLanguage,columns:[{data:null,title:"序号",render:tableSet.order,sWidth:"25px"}]};return n&&r.columns.unshift({data:null,title:"",render:tableSet.isEnable,orderable:!1,sWidth:"80px"}),r}function showScheduleModal(){myPromise(5401).then(n=>{const t=_tablesConfig(!1,n.datas);t.columns=t.columns.concat([{data:"Code",title:"设备"},{data:"FlowCard",title:"流程卡"},{data:null,title:"状态",render:tableSet.state},{data:"DeliveryTime",title:"交货日期",render:tableSet.delivery},{data:"Progress",title:"进度",render:tableSet.progress}]);$("#scheduleList").DataTable(t);$("#showScheduleModal").modal("show")})}function getProductionLine(){clearInterval($("#productionLineList")[0].time);$("#lineBox,#productionLineHead,#warningBox,#dangerBox,#successLineBox,#warningLineBox,#dangerLineBox").empty();const n=$("#showMode").val();[workWarningList,taskWarningList,flowWarningList][n]();[workDangerList,taskDangerList,flowDangerList][n]();myPromise([5200,5250,5300][n]).then(t=>{const i=_tablesConfig(!1,t.datas,0),r=[{data:"WorkOrder",title:"工单"},{data:null,title:"状态",render:tableSet.state},{data:"DeliveryTime",title:"交货日期",render:tableSet.delivery},{data:"Progress",title:"进度",render:tableSet.progress},{data:"Id",title:"任务单",render:n=>`<button class="btn btn-info btn-sm show-task-btn" value="${n}">查看</button>`},{data:"Id",title:"",visible:!1}],u=[{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:null,title:"状态",render:tableSet.state},{data:"DeliveryTime",title:"交货日期",render:tableSet.delivery},{data:"Progress",title:"进度",render:tableSet.progress},{data:"Id",title:"流程卡",render:n=>`<button class="btn btn-info btn-sm show-flow-btn" value="${n}">查看</button>`}],f=[{data:"CreateTime",title:"发出日期"},{data:"FlowCard",title:"流程卡号"},{data:"Process",title:"当前工序"},{data:null,title:"状态",render:tableSet.state},{data:"Progress",title:"进度",render:tableSet.progress},{data:"Id",title:"",visible:!1}];i.columns=i.columns.concat([r,u,f][n]);const e=["work-order","task-order","flow-card"][n];i.createdRow=(t,i)=>{$(t).addClass(`pointer ${e}`).attr("value",i.Id),n==1&&$(t).attr("work",i.WorkOrderId)};$("#productionLineList").DataTable(i)})}function workWarningList(){myPromise(5202).then(n=>{const t=warningDangerCount(n.datas,"WorkOrder");warningDangerTemp("warning",`报警工单（${t.count}）`,"<th>工单<\/th><th>报警次数<\/th>",t.tbody,"workWarningList")})}function workDangerList(){myPromise(5203).then(n=>{const t=warningDangerCount(n.datas,"WorkOrder");warningDangerTemp("danger",`中断工单（${t.count}）`,"<th>工单<\/th><th>中断次数<\/th>",t.tbody,"workDangerList")})}function taskWarningList(){myPromise(5252).then(n=>{const t=warningDangerCount(n.datas,"TaskOrder");warningDangerTemp("warning",`报警任务单（${t.count}）`,"<th>任务单<\/th><th>报警次数<\/th>",t.tbody,"taskWarningList")})}function taskDangerList(){myPromise(5253).then(n=>{const t=warningDangerCount(n.datas,"TaskOrder");warningDangerTemp("danger",`中断任务单（${t.count}）`,"<th>任务单<\/th><th>中断次数<\/th>",t.tbody,"taskDangerList")})}function flowWarningList(){myPromise(5302).then(n=>{const t=warningDangerCount(n.datas,"FlowCard");warningDangerTemp("warning",`报警流程卡（${t.count}）`,"<th>流程卡<\/th><th>报警次数<\/th>",t.tbody,"flowWarningList")})}function flowDangerList(){myPromise(5303).then(n=>{const t=warningDangerCount(n.datas,"FlowCard");warningDangerTemp("danger",`中断流程卡（${t.count}）`,"<th>流程卡<\/th><th>中断次数<\/th>",t.tbody,"flowDangerList")})}function warningDangerCount(n,t){let i=0,r="";return n.forEach(n=>{i+=n.Count,r+=`<tr><td>${n[t]}</td><td>${n.Count}</td></tr>`}),{count:i,tbody:r}}function warningDangerTemp(n,t,i,r,u){const f=`<div class="panel panel-${n}">
                        <div class="panel-heading">
                            <span class="glyphicon glyphicon-refresh pull-right pointer text-bold" aria-hidden="true" title="刷新" onclick="${u}()"></span>
                            <h3 class="panel-title text-center">${t}</h3>
                        </div>
                        <div class="panel-body">
                            <div class="table-responsive">
                                <table class="table table-hover table-striped">
                                    <thead><tr>${i}</tr></thead>
                                    <tbody>${r}</tbody>
                                </table>
                            </div>
                        </div>
                    </div>`;$(`#${n}Box`).html(f)}function processWarningDangerTemp(n,t){const i=`<div class="panel panel-${n}">
                        <div class="panel-heading">
                            <span class="glyphicon glyphicon-refresh pull-right pointer text-bold refresh" aria-hidden="true" title="刷新"></span>
                            <h3 class="panel-title text-center">${t}</h3>
                        </div>
                        <div class="panel-body">
                            <div class="table-responsive mailbox-messages">
                                <table class="table table-hover table-striped"></table>
                            </div>
                        </div>
                    </div>`;$(`#${n}LineBox`).html(i)}function getLineCommon(n,t){const u=getDataTableRow("#productionLineList");Array.from(u).forEach(n=>$(n).css("background",""));$(this).css("background","#d9edf7");const i=$(this).attr("value"),r=()=>{t(i),myPromise(n,{qId:i},!0,0).then(n=>{const i=["white","green","orange","gray","darkblue","#00A9FC"];let r=0;const t=[],u=n.datas.reduce((n,u)=>`${n}<div style="width:100%;position: relative;overflow-x:scroll;height:133px"><div class="line">
                                ${u.Processes.reduce((n,u)=>(t.push(u.Faults),`${n}<div class="line-box">
                                    <div class="line-box-title">
                                        <span>${u.Process}</span>
                                        <span class="info" style="background:${i[u.State]}">${u.StateStr}</span>
                                    </div>
                                    <div class="line-box-content">
                                        <p>进度：${u.Progress}%</p>
                                        <p>合格数：${u.Qualified}</p>
                                        <p>不合格数：${u.Unqualified}</p>
                                        <p>报警列表(${u.Faults.length})：<button class="btn btn-info btn-xs show-btn" value="${r++}">查看</button></p>
                                    </div>
                                </div>`),"")}
                            </div></div>`,"");$("#lineBox").html(u).off("click").on("click",".show-btn",function(){const n=_tablesConfig(!1,t[$(this).val()]);n.columns=n.columns.concat([{data:"FaultTime",title:"时间"},{data:"FlowCard",title:"流程卡"},{data:null,title:"信息",render:n=>n.Remark||n.Fault}]);$("#WarningDetailList").DataTable(n);$("#showWarningDetailModal").modal("show")})})};r();clearInterval($("#productionLineList")[0].time);$("#productionLineList")[0].time=setInterval(r,5e3)}function getWorkLine(n){myPromise(5070,{qId:n},!0,0).then(n=>{n=n.datas;const t=n[0],i=`<tr><td>${t.WorkOrder}</td><td>${t.Target}</td><td>${t.DeliveryTime.split(" ")[0]}</td><td>${t.IssueCount}</td><td>${t.DoneCount}</td><td>${t.Done}</td><td>${t.Delivery}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>工单<\/td><td class="text-blue">交货数量<\/td><td class="text-red">交货日期<\/td><td>任务单数量<\/td><td>已完成任务单数量<\/td><td class="text-info">已完成<\/td><td class="text-green">已交货<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getTaskLine(n){myPromise(5090,{qId:n},!0,0).then(n=>{n=n.datas;const t=n[0],i=`<tr><td>${t.TaskOrder}</td><td>${t.Product}</td><td>${t.Target}</td><td>${t.DeliveryTime.split(" ")[0]}</td><td>${t.IssueCount}</td><td>${t.DoneCount}</td><td>${t.Done}</td><td>${t.Delivery}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>任务单<\/td><td>计划号<\/td><td class="text-blue">交货数量<\/td><td class="text-red">交货日期<\/td><td>已发流程卡<\/td><td>以完成流程卡<\/td><td class="text-info">已完成<\/td><td class="text-green">已交货<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getFlowCardLine(n){myPromise(5110,{qId:n},!0,0).then(n=>{n=n.datas;const t=n[0],i=`<tr><td>${t.FlowCard}</td><td>${t.TaskOrder}</td><td>${t.Product}</td><td>${t.ProcessCode}</td><td>${t.Done}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>流程卡号<\/td><td>任务单<\/td><td>计划号<\/td><td>流程编号<\/td><td class="text-info">已完成<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getPersonList(){myPromise(5e3).then(n=>{_personTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Account",title:"用户名",render:tableSet.input.bind(null,"account")},{data:"Number",title:"编号",render:tableSet.input.bind(null,"number")},{data:"Name",title:"姓名",render:tableSet.input.bind(null,"name")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_personTrs,(n,t)=>{n.find(".account").val(t.Account),n.find(".number").val(t.Number),n.find(".name").val(t.Name),n.find(".remark").val(t.Remark)})};$("#personList").DataTable(t)})}function getPersonTrInfo(n,t){const i=n.find(".account").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("用户名不能为空");const r=n.find(".number").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("编号不能为空");const u=n.find(".name").val().trim();if(isStrEmptyOrUndefined(u))return void layer.msg("姓名不能为空");const f={Account:i,Number:r,Name:u,Remark:n.find(".remark").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updatePerson(){updateTableRow(_personTrs,getPersonTrInfo,5001,getPersonList)}function addPersonModel(){const t={Account:"",Number:"",Name:"",Remark:""},n=_tablesConfig(!1,[t]);n.columns=n.columns.concat([{data:"Account",title:"用户名",render:tableSet.addInput.bind(null,"account","auto")},{data:"Number",title:"编号",render:tableSet.addInput.bind(null,"number","auto")},{data:"Name",title:"姓名",render:tableSet.addInput.bind(null,"name","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);$("#addPersonList").DataTable(n);$("#addPersonListBtn").off("click").on("click",()=>addDataTableTr("#addPersonList",t));$("#addPersonModel").modal("show")}function addPerson(){addTableRow("#addPersonList",getPersonTrInfo,5002,()=>{$("#addPersonModel").modal("hide"),getPersonList()})}function delPerson(){delTableRow(_personTrs,5003,getPersonList)}function getDeviceList(){const n=myPromise(5020),t=myPromise(5010);Promise.all([n,t]).then(n=>{_deviceTrs=[];const t=_tablesConfig(!0,n[1].datas);t.columns=t.columns.concat([{data:"StateStr",title:"状态",render:tableSet.select.bind(null,tableSet.DevStateOps,"state")},{data:"Code",title:"机台号",render:tableSet.input.bind(null,"code")},{data:"Category",title:"类型",render:tableSet.select.bind(null,setOptions(n[0].datas,"Category"),"category")},{data:"Model",title:"型号",render:tableSet.select.bind(null,"","model")},{data:"Priority",title:"优先级",render:tableSet.input.bind(null,"priority")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceTrs,(n,t)=>{n.find(".state").val(t.State),n.find(".code").val(t.Code),n.find(".category").val(t.CategoryId),myPromise(5024,{categoryId:t.CategoryId,menu:!0},!0,0).then(i=>n.find(".model").html(setOptions(i.datas,"Model")).val(t.ModelId)),n.find(".priority").val(t.Priority),n.find(".remark").val(t.Remark)})};$("#deviceList").DataTable(t)})}function getDeviceTrInfo(n,t){const i=n.find(".code").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("机台号不能为空");const r=n.find(".category").val();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择设备类型");const u=n.find(".model").val();if(isStrEmptyOrUndefined(u))return void layer.msg("请选择设备型号");const f={Code:i,CategoryId:r,ModelId:u,Priority:n.find(".priority").val()>>0,Remark:n.find(".remark").val(),State:t?1:n.find(".state").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updateDevice(){updateTableRow(_deviceTrs,getDeviceTrInfo,5011,getDeviceList)}function showAddDeviceModel(){let n;myPromise(5020).then(t=>(n=t.datas,myPromise(5024,{categoryId:n.Id,menu:!0},!0,0))).then(t=>{const r={Code:"",Category:"",Model:"",Priority:0,Remark:""},i=_tablesConfig(!1,[r]);i.columns=i.columns.concat([{data:"Code",title:"机台号",render:tableSet.addInput.bind(null,"code","auto")},{data:"Category",title:"设备类型",render:tableSet.addSelect.bind(null,setOptions(n,"Category"),"category")},{data:"Model",title:"设备型号",render:tableSet.addSelect.bind(null,setOptions(t.datas,"Model"),"model")},{data:"Priority",title:"优先级",render:tableSet.addInput.bind(null,"priority","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);$("#addDeviceList").DataTable(i);$("#addDeviceListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceList",r));$("#addDeviceModel").modal("show")})}function addDevice(){addTableRow("#addDeviceList",getDeviceTrInfo,5012,()=>{$("#addDeviceModel").modal("hide"),getDeviceList()})}function delDevice(){delTableRow(_deviceTrs,5013,getDeviceList)}function showDeviceCategoryModal(){getDeviceCategoryList();$("#deviceCategoryModal").modal("show")}function getDeviceCategoryList(){myPromise(5020).then(n=>{_deviceCategoryTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Category",title:"类型",render:tableSet.input.bind(null,"category")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceCategoryTrs,(n,t)=>{n.find(".category").val(t.Category),n.find(".remark").val(t.Remark)})};$("#deviceCategoryList").DataTable(t)})}function getDeviceCategoryTrInfo(n,t){const i=n.find(".category").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("设备类型不能为空");const r={Category:i,Remark:n.find(".remark").val()};return t||(r.Id=n.find(".isEnable").val()>>0),r}function updateDeviceCategory(){updateTableRow(_deviceCategoryTrs,getDeviceCategoryTrInfo,5021,()=>{getDeviceCategoryList(),getDeviceList()})}function addDeviceCategoryModel(){const t={Category:"",Remark:""},n=_tablesConfig(!1,[t]);n.columns=n.columns.concat([{data:"Category",title:"类型",render:tableSet.addInput.bind(null,"category","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);$("#addDeviceCategoryList").DataTable(n);$("#addDeviceCategoryListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceCategoryList",t));$("#addDeviceCategoryModel").modal("show")}function addDeviceCategory(){addTableRow("#addDeviceCategoryList",getDeviceCategoryTrInfo,5022,()=>{$("#addDeviceCategoryModel").modal("hide"),getDeviceCategoryList(),getDeviceList()})}function delDeviceCategory(){delTableRow(_deviceCategoryTrs,5023,()=>{getDeviceCategoryList(),getDeviceList()})}function showDeviceModelModal(){getDeviceModelList();$("#showDeviceModelModal").modal("show")}function getDeviceModelList(){const n=myPromise(5020,{menu:!0},!0),t=myPromise(5024);Promise.all([n,t]).then(n=>{_deviceModelTrs=[];const t=_tablesConfig(!0,n[1].datas);t.columns=t.columns.concat([{data:"Category",title:"类型",render:tableSet.select.bind(null,setOptions(n[0].datas,"Category"),"category")},{data:"Model",title:"型号",render:tableSet.input.bind(null,"model")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceModelTrs,(n,t)=>{n.find(".category").val(t.CategoryId),n.find(".model").val(t.Model),n.find(".remark").val(t.Remark)})};$("#deviceModelList").DataTable(t)})}function getDeviceModelTrInfo(n,t){const i=n.find(".category").val();if(isStrEmptyOrUndefined(i))return void layer.msg("请选择设备类型");const r=n.find(".model").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("设备型号不能为空");const u={CategoryId:i,Model:r,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateDeviceModel(){updateTableRow(_deviceModelTrs,getDeviceModelTrInfo,5025,()=>{getDeviceModelList(),getDeviceList()})}function addDeviceModelModel(){myPromise(5020).then(n=>{const i={Category:"",Model:"",Remark:""},t=_tablesConfig(!1,[i]);t.columns=t.columns.concat([{data:"Category",title:"类型",render:tableSet.addSelect.bind(null,setOptions(n.datas,"Category"),"category")},{data:"Model",title:"型号",render:tableSet.addInput.bind(null,"model","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);$("#addDeviceModelList").DataTable(t);$("#addDeviceModelListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceModelList",i));$("#addDeviceModelModel").modal("show")})}function addDeviceModel(){addTableRow("#addDeviceModelList",getDeviceModelTrInfo,5026,()=>{$("#addDeviceModelModel").modal("hide"),getDeviceModelList(),getDeviceList()})}function delDeviceModel(){delTableRow(_deviceModelTrs,5027,()=>{getDeviceModelList(),getDeviceList()})}function getProcessCodeList(){myPromise(5040).then(n=>{_processCodeTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Code",title:"编号"},{data:"Category",title:"类型"},{data:"Processes",title:"流程详情",render:tableSet.processDetail},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:tableSet.updateBtn.bind(null,"showUpdateProcessCodeModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processCodeTrs)};$("#processCodeList").DataTable(t)})}function addEditProcessCodeModel(n){myPromise(5050).then(t=>(t=t.datas,$("#addProcessCodeCategoryName").html(setOptions(t,"Category")),n(),$("#addProcessCodeModel").modal("show"),myPromise(5056,{CategoryId:t[0].Id},!0)))}function addUpProcessCode(n){const i=$("#addProcessCodeName").val().trim();if(isStrEmptyOrUndefined(i))return layer.msg("编号不能为空");const r=$("#addProcessCodeCategoryName").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择类型");const t=[];if($("#addProcessCodeBody tr").each((n,i)=>t.push($(i).attr("list"))),!t.length)return layer.msg("请设置流程");const u=t.join(),f=n?5042:5041,e=[{Code:i,CategoryId:r,List:u,Remark:$("#addProcessCodeRemark").val().trim(),Id:n?0:$("#addEditBtn").val()}];myPromise(f,e).then(()=>{$("#addProcessCodeModel").modal("hide"),getProcessCodeList()})}function addProcessOpTo(n,t){const r=$(this).parents("tr")[0],i=$(n).DataTable().row(r).data(),u=`<tr list="${i.Id}">
                             <td class="num"></td>
                             <td>${i.Process}</td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`;$(t).append(u);setAddProcessOpList(t)}function addProcessOpToCode(){addProcessOpTo.call(this,"#addProcessCodeOpList","#addProcessCodeBody")}function setAddProcessOpList(n){const t=$(`${n} tr`);for(let n=0,i=t.length;n<i;n++){const i=t.eq(n);i.find(".num").text(n+1)}}function addProcessCodeModel(){addEditProcessCodeModel(()=>{$("#addProcessCodeName,#addProcessCodeRemark").val("");$("#addProcessCodeCategoryName").trigger("change");$("#addEditTitle").text("添加流程编号");$("#addEditBtn").text("添加").val(0).off("click").on("click",addUpProcessCode.bind(null,!0))})}function showUpdateProcessCodeModel(){const t=$(this).parents("tr")[0],n=$("#processCodeList").DataTable().row(t).data();addEditProcessCodeModel(()=>{$("#addProcessCodeName").val(n.Code);$("#addProcessCodeCategoryName ").val(n.CategoryId).trigger("change");$("#addProcessCodeRemark").val(n.Remark);const t=n.List?n.List.split(","):[],i=n.Processes?n.Processes.split(","):[],r=t.reduce((n,t,r)=>`${n}<tr list="${t}">
                             <td class="num"></td>
                             <td>${i[r]}</td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`,"");$("#addProcessCodeBody").html(r);$("#addEditTitle").text("修改流程编号");$("#addEditBtn").text("修改").val(n.Id).off("click").on("click",addUpProcessCode.bind(null,!1));setAddProcessOpList("#addProcessCodeBody")})}function delProcessCode(){delTableRow(_processCodeTrs,5043,getProcessCodeList)}function showProcessCodeCategoryModal(){getProcessCodeCategoryList();$("#processCodeCategoryModal").modal("show")}function getProcessCodeCategoryList(){myPromise(5050).then(n=>{_processCodeCategoryTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Category",title:"类型"},{data:"List",title:"标准流程",render:tableSet.processDetail},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:tableSet.updateBtn.bind(null,"showUpdateProcessCodeCategoryModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processCodeCategoryTrs)};$("#processCodeCategoryList").DataTable(t)})}function addEditProcessCodeCategoryModel(n){myPromise(5030).then(t=>{const i=_tablesConfig(!1,t.datas);i.columns.unshift({data:null,title:"",render:tableSet.addBtn.bind(null,"addProcessOpToCodeCategory"),orderable:!1,sWidth:"80px"});i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:"Remark",title:"备注"}]);$("#addProcessCodeCategoryOpList").DataTable(i);$("#addProcessCodeCategoryBody").empty();n();$("#addProcessCodeCategoryModel").modal("show")})}function addUpProcessCodeCategory(n){const i=$("#addProcessCodeCategory").val().trim();if(isStrEmptyOrUndefined(i))return layer.msg("类型不能为空");const t={Category:i,Remark:$("#addProcessCodeCategoryRemark").val().trim()};n||(t.Id=$("#addEditProcessCategoryBtn").val());const r=Array.from($("#addProcessCodeCategoryBody tr")).map((n,t)=>{const i={Order:t+1,ProcessId:$(n).attr("list")},r=$(n).attr("processid");return r&&(i.Id=r),i});if(!r.length)return layer.msg("请设置流程");t.Processes=r;const u=n?5052:5051;myPromise(u,[t]).then(()=>{$("#addProcessCodeCategoryModel").modal("hide"),getProcessCodeCategoryList()})}function addProcessOpToCodeCategory(){addProcessOpTo.call(this,"#addProcessCodeCategoryOpList","#addProcessCodeCategoryBody")}function addProcessCodeCategoryModel(){addEditProcessCodeCategoryModel(()=>{$("#addProcessCodeCategory").val("");$("#addProcessCodeCategoryRemark").val("");$("#addEditProcessCategoryTitle").text("添加流程编号类型");$("#addEditProcessCategoryBtn").text("添加").val(0).off("click").on("click",addUpProcessCodeCategory.bind(null,!0))})}function showUpdateProcessCodeCategoryModel(){const n=$(this).val();myPromise(5056,{categoryId:n},!0).then(t=>{addEditProcessCodeCategoryModel(()=>{const r=$(this).parents("tr")[0],i=$("#processCodeCategoryList").DataTable().row(r).data();$("#addProcessCodeCategory").val(i.Category);$("#addProcessCodeCategoryRemark").val(i.Remark);const u=t.datas.reduce((n,t)=>`${n}<tr list="${t.ProcessId}" processid="${t.Id}">
                             <td class="num"></td>
                             <td>${t.Process}</td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`,"");$("#addProcessCodeCategoryBody").append(u);$("#addEditProcessCategoryTitle").text("修改流程编号类型");$("#addEditProcessCategoryBtn").text("修改").val(n).off("click").on("click",addUpProcessCodeCategory.bind(null,!1));setAddProcessOpList("#addProcessCodeCategoryBody")})})}function delProcessCodeCategory(){delTableRow(_processCodeCategoryTrs,5053,getProcessCodeCategoryList)}function getProcessOpList(){const n=myPromise(5020),t=myPromise(5030);Promise.all([n,t]).then(n=>{_processOpTrs=[];const t=_tablesConfig(!0,n[1].datas);t.columns=t.columns.concat([{data:"Process",title:"流程",render:tableSet.input.bind(null,"process")},{data:"DeviceCategory",title:"设备类型",render:tableSet.select.bind(null,setOptions(n[0].datas,"Category"),"category")},{data:"Order",title:"顺序",render:tableSet.input.bind(null,"order")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processOpTrs,(n,t)=>{n.find(".process").val(t.Process),n.find(".category").val(t.DeviceCategoryId),n.find(".remark").val(t.Remark)})};$("#processOpList").DataTable(t)})}function getProcessOpTrInfo(n,t){const i=n.find(".process").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("流程名称不能为空");const r=n.find(".category").val();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择设备类型");const u={DeviceCategoryId:r,Process:i,Order:n.find(".order").val()>>0,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateProcessOp(){updateTableRow(_processOpTrs,getProcessOpTrInfo,5031,getProcessOpList)}function addProcessOpModel(){myPromise(5020).then(n=>{const i={DeviceCategory:"",Process:"",Order:"",Remark:""};n.datas.unshift({Category:"无",Id:0});const t=_tablesConfig(!1,[i]);t.columns=t.columns.concat([{data:"Process",title:"流程",render:tableSet.addInput.bind(null,"process","auto")},{data:"DeviceCategory",title:"设备类型",render:tableSet.addSelect.bind(null,setOptions(n.datas,"Category"),"category")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:"Order",title:"顺序",render:tableSet.addInput.bind(null,"order","auto")},{data:null,title:"删除",render:tableSet.delBtn}]);$("#addProcessOpList").DataTable(t);$("#addProcessOpListBtn").off("click").on("click",()=>addDataTableTr("#addProcessOpList",i));$("#addProcessOpModel").modal("show")})}function addProcessOp(){addTableRow("#addProcessOpList",getProcessOpTrInfo,5032,()=>{$("#addProcessOpModel").modal("hide"),getProcessOpList()})}function delProcessOp(){delTableRow(_processOpTrs,5033,getProcessOpList)}function getPlanList(){myPromise(5060).then(n=>{_planTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Product",title:"计划号"},{data:"Number",title:"日产能"},{data:"Category",title:"流程编号类型"},{data:"Capacity",title:"产能类型"},{data:"ProcessCodes",title:"流程编号清单"},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:tableSet.updateBtn.bind(null,"showUpdatePlanModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_planTrs)};$("#planList").DataTable(t)})}function disabledProcessCode(){const n=$("#planProcessCodeList .process-code-select");disabledProcessCodeCommon(n)}function disabledProcessCodeCommon(n){const t=[];(n.find("option").prop("disabled",!1),n.each((n,i)=>{const r=$(i).val();r&&t.push(r)}),t.length)&&n.find("option").each((n,i)=>{const r=$(i);~t.indexOf(r.val())&&r.prop("disabled",!0)})}function addEditPlanModel(n,t){_planProcessCodeInfo={};myPromise(5050,{menu:!0},!0).then(i=>$("#addPlanProcess").html(setOptions(i.datas,"Category")).val(t||i.datas[0].Id).trigger("change",n))}function addUpPlan(n){const u=$("#addPlanProcess").val()>>0;if(isStrEmptyOrUndefined(u))return layer.msg("请选择流程编号类型");const f=$("#addPlanCapacity").val()>>0;if(isStrEmptyOrUndefined(f))return layer.msg("请选择产能类型");const e=$("#addPlanName").val().trim();if(isStrEmptyOrUndefined(e))return layer.msg("计划号不能为空");const s=$("#addPlanRemark").val().trim(),i={CategoryId:u,CapacityId:f,Product:e,Remark:s};let r;n?r=5062:(r=5061,i.Id=$("#addEditPlanBtn").val());const o=[];let t=getDataTableRow("#addPlanCapacityList");for(let i=0,r=t.length;i<r;i++){const r=$(t[i]),e=r.find(".rate").val().trim()>>0;if(isStrEmptyOrUndefined(e))return layer.msg("请输入合格率");const s=r.find(".hour").val().trim()>>0,h=r.find(".minute").val().trim()>>0,c=r.find(".second").val().trim()>>0;if(isStrEmptyOrUndefined(s)&&isStrEmptyOrUndefined(h)&&isStrEmptyOrUndefined(c))return layer.msg("请输入工时");const u={Rate:e,Day:0,Hour:s,Min:h,Sec:c},f=r.find(".capacity-btn"),l=f.val(),a=f.attr("list")>>0;if(isStrEmptyOrUndefined(a))return layer.msg("请先配置工序产能");!n&&l!=0?u.Id=l:u.ProcessId=f.attr("process");o[i]=u}i.ProductCapacities=o;t=[];$("#planProcessCodeList .process-table").each((n,i)=>{Array.from(getDataTableRow(i)).forEach(n=>t.push(n))});i.ProductProcesses=t.map(n=>{const t=$(n),i=t.closest("table").DataTable().row(t[0]).data(),u=t.find(".set-btn")[0].ProcessData||[],r={ProcessRepeat:t.find(".isRework").val()>>0,ProcessNumber:t.find(".processNumber").val(),ProcessData:JSON.stringify(u)};return i.Id?r.Id=i.Id:(r.ProcessCodeId=i.ProcessCodeId,r.ProcessId=i.ProcessId),r});myPromise(r,[i]).then(()=>{$("#addPlanModel").modal("hide"),getPlanList()})}function addPlanModel(){addEditPlanModel(n=>{$("#addPlanCapacity").html(setOptions(n,"Capacity")).trigger("change");$("#addEditPlanTitle").text("添加计划号");$("#addPlanName,#addPlanRemark").val("");$("#addEditPlanBtn").text("添加").val(0).off("click").on("click",addUpPlan.bind(null,!0))})}function showUpdatePlanModel(){const n=$(this).val();myPromise(5060,{qId:n},!0).then(n=>{const t=n.datas[0];addEditPlanModel(n=>{$("#addPlanCapacity").html(setOptions(n,"Capacity")).val(t.CapacityId);$("#addEditPlanTitle").text("修改计划号");$("#addPlanName").val(t.Product);$("#addPlanRemark").val(t.Remark);const u=t.ProductCapacities,r=_tablesConfig(!1,u);r.columns=r.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-info btn-sm capacity-btn" value="${n.Id}" list="${n.ListId}" process="${n.ProcessId}" pid="${n.PId}" p="${n.Process}">查看</button>`},]);$("#addPlanCapacityList").DataTable(r);const f=t.ProductProcesses,i={};f.forEach(n=>{const t=n.ProcessCodeId;i[t]?i[t].push(n):i[t]=[n]});for(let n in i){$("#addPlanProcessList").click();$("#planProcessCodeList .process-code-select:last").val(n);$("#planProcessCodeList .process-code-category:last").text(`类型：${_planProcessCodeInfo[n].Category}`);const t=_tablesConfig(!1,i[n]);t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:null,title:"可否返工",render:tableSet.isRework},{data:"ProcessNumber",title:"单台加工数量",bVisible:!1,render:tableSet.addInput.bind(null,"processNumber","auto")},{data:null,title:"工艺数据",render:tableSet.setBtn}]);t.createdRow=(n,t)=>{n=$(n),n.find(".isRework").val(t.ProcessRepeat>>0),n.find(".set-btn")[0].ProcessData=JSON.parse(t.ProcessData)};$("#planProcessCodeList .process-table:last").DataTable(t)}disabledProcessCode();$("#addEditPlanBtn").text("修改").val(t.Id).off("click").on("click",addUpPlan.bind(null,!1))},t.CategoryId)})}function delPlan(){delTableRow(_planTrs,5063,getPlanList)}function showCapacityModel(){getCapacityList();$("#showCapacityModel").modal("show")}function getCapacityList(){myPromise(5530).then(n=>{_capacityTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Capacity",title:"类型",render:tableSet.input.bind(null,"capacity")},{data:"Category",title:"流程编号类型"},{data:null,title:"产能清单",render:n=>`<button class="btn btn-info btn-sm look-btn look-update-btn" value="${n.Id}" categoryId="${n.CategoryId}" category="${n.Category}">查看</button>`},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_capacityTrs,(n,t)=>{n.find(".capacity").val(t.Capacity),n.find(".look-update-btn").addClass("update-btn btn-success").removeClass("btn-info look-btn").text("修改"),n.find(".remark").val(t.Remark)},n=>{n.find(".look-update-btn").removeClass("update-btn btn-success").addClass("btn-info look-btn").text("查看")})};$("#capacityList").DataTable(t)})}function updateCapacityInfo(){const n=n=>{const t=n.find(".capacity").val().trim();return isStrEmptyOrUndefined(t)?void layer.msg("产能类型不能为空"):{Capacity:t,Remark:n.find(".remark").val(),Id:n.find(".isEnable").val()>>0}};updateTableRow(_capacityTrs,n,5531,getCapacityList)}function showAddCapacityCategoryModel(){$("#addCapacityCategory,#addCapacityRemark").val("");showCapacityDetailModal(2)}function showCapacityDetailModal(n){let t="";switch(n){case 0:case 1:currentCategoryId=$(this).attr("categoryId");capacityId=$(this).val();t=`产能清单${n==0?"查看":"修改"}`;$(`#showCapacityDetailModal .add`).addClass("hidden");$(`#showCapacityDetailModal ${n==0?".look":".update"}`).removeClass("hidden");$(`#showCapacityDetailModal ${n!=0?".look":".update"}`).addClass("hidden");break;case 2:t=`添加产能类型`;currentCategoryId=0;capacityId=0;$(`#showCapacityDetailModal .look`).addClass("hidden");$(`#showCapacityDetailModal .update`).addClass("hidden");$(`#showCapacityDetailModal .add`).removeClass("hidden")}if($("#showCapacityDetailModal").find(".modal-title").text(t),$("#devCapacitySetList").closest(".mailbox-messages").empty().append('<table class="table table-hover table-striped table-condensed table-responsive" id="devCapacitySetList"><\/table>'),$("#personCapacitySetList").closest(".mailbox-messages").empty().append('<table class="table table-hover table-striped table-condensed table-responsive" id="personCapacitySetList"><\/table>'),devAndPersonInputInit(),_capacityDetailListType!=n&&_capacityDetailList!=null&&_capacityDetailList.clear(),_capacityDetailListType=n,n==0)myPromise(5560,{capacityId},!0).then(n=>{$("#capacityDetailCode").text($(this).attr("category"));const t=_tablesConfig(!1,n.datas);t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-info btn-sm capacity-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">查看</button>`},{data:null,title:"是否设置",render:tableSet.isFinish}]);_capacityDetailList=$("#capacityDetailList").DataTable(t);$("#showCapacityDetailModal").modal("show")});else if(n==1){const n=$(this).attr("categoryId"),t=myPromise(5050),i=myPromise(5560,{capacityId,categoryId:n},!0);$("#updateCapacityBtn").val(capacityId);Promise.all([t,i]).then(t=>{$("#capacityProcess").html(setOptions(t[0].datas,"Category")).val(n);const i=_tablesConfig(!1,t[1].datas);i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-success btn-sm set-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">修改</button>`},{data:null,title:"是否设置",render:tableSet.isFinish}]);i.createdRow=(n,t)=>{const i=$(n).find(".set-btn")[0];for(let n in t)i[n]=t[n];i.exist=!0};_capacityDetailList=$("#capacityDetailList").DataTable(i);$("#showCapacityDetailModal").modal("show")})}else n==2&&myPromise(5050,{menu:!0},!0).then(n=>{if($("#addCapacityProcess").html(setOptions(n.datas,"Category")).trigger("change"),n.datas.length!=0){const t=n.datas[0].Id,i=myPromise(5050),r=myPromise(5560,{capacityId,categoryId:t},!0);$("#updateCapacityBtn").val(capacityId);Promise.all([i,r]).then(n=>{$("#capacityProcess").html(setOptions(n[0].datas,"Category")).val(t);const i=_tablesConfig(!1,n[1].datas);i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-primary btn-sm set-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">设置</button>`},{data:null,title:"是否设置",render:tableSet.isFinish}]);i.createdRow=(n,t)=>{const i=$(n).find(".set-btn")[0];for(let n in t)i[n]=t[n];i.exist=!0};_capacityDetailList=$("#capacityDetailList").DataTable(i);$("#showCapacityDetailModal").modal("show")})}else $("#showCapacityDetailModal").modal("show")})}function devicesOperatorsTable(n,t=false){const u=n.Devices,i=_tablesConfig(!1,u);i.columns=i.columns.concat([{data:"Category",title:"设备类型"},{data:"Model",title:"设备型号"},{data:"Count",title:"设备数量",sClass:"count"},{data:"Single",title:"单次加工",render:t?n=>n:tableSet.addNumberInput.bind(null,"single","50px")},{data:"Rate",title:"合格率(%)",render:t?n=>n:tableSet.addNumberInput.bind(null,"rate","50px")},{data:"WorkTime",title:"总工时",render:tableSet.msCal.bind(null,"workTime",t)},{data:"ProductTime",title:"单次工时",render:tableSet.msCal.bind(null,"productTime",t)},{data:"SingleCount",title:"日加工次数",sClass:"sCount"},{data:"Number",title:"单台日产能",sClass:"number"},{data:"Total",title:"日总产能",sClass:"total"}]);$("#devCapacitySetList").DataTable(i);u.length?$("#devCapacitySetBox").removeClass("hidden"):$("#devCapacitySetBox").addClass("hidden");const f=n.Operators,r=_tablesConfig(!1,f);r.columns=r.columns.concat([{data:"Level",title:"等级"},{data:"Count",title:"员工数量",sClass:"count"},{data:"Single",title:"单次加工",render:t?n=>n:tableSet.addNumberInput.bind(null,"single","50px")},{data:"Rate",title:"合格率",render:t?n=>n:tableSet.addNumberInput.bind(null,"rate","50px")},{data:"WorkTime",title:"总工时",render:tableSet.msCal.bind(null,"workTime",t)},{data:"ProductTime",title:"单次工时",render:tableSet.msCal.bind(null,"productTime",t)},{data:"SingleCount",title:"日加工次数",sClass:"sCount"},{data:"Number",title:"单台日产能",sClass:"number"},{data:"Total",title:"日总产能",sClass:"total"}]);$("#personCapacitySetList").DataTable(r)}function devAndPersonInputInit(){var n=n=>{const i=n.find(".single").val()>>0,r=n.find(".sCount").text()>>0,u=n.find(".count").text()>>0,t=i*r;n.find(".number").text(t);n.find(".total").text(u*t)},t;$("#devCapacitySetList,#personCapacitySetList").on("input",".single",function(){const t=$(this).closest("tr");n(t)});t=n=>{var u,e;let i=n.find(".minute.workTime").val()>>0,r=n.find(".second.workTime").val()>>0,t=convertSecond(0,i,r);u=86400;t>u&&(t=u,e=convertTime(u,!1),i=e.m,r=e.s,n.find(".minute.workTime").val(i),n.find(".second.workTime").val(r));let o=n.find(".minute.productTime").val()>>0,s=n.find(".second.productTime").val()>>0,f=convertSecond(0,o,s);f>t&&(f=t,o=i,s=r,n.find(".minute.productTime").val(o),n.find(".second.productTime").val(s));const h=f!=0?Math.floor(t/f):0;n.find(".sCount").text(h)};$("#devCapacitySetList,#personCapacitySetList").on("input",".minute",function(){const i=$(this).closest("tr");t(i);n(i)});$("#devCapacitySetList,#personCapacitySetList").on("input",".second",function(){const i=$(this).closest("tr");t(i);n(i)})}function showCapacitySetModal(){let t="processId",n=$(this).val();this.exist?(t="qId",n==0&&(t="processId",n=$(this).attr("process"))):n=$(this).attr("process");var r=$(this).attr("p");const i={};i[t]=n;this.Devices?devicesOperatorsTable(this):myPromise(5564,i,!0).then(n=>{n.Process=r,devicesOperatorsTable(n)});$("#addCapacitySetBtn").off("click").on("click",()=>{const n=(n,t)=>{const i=Array.from($(n).DataTable().data()),r=Array.from(getDataTableRow(n));this[t]=i.map((n,t)=>{const i=$(r[t]);n.Single=i.find(".single").val()>>0;n.Rate=i.find(".rate").val()>>0;let u=i.find(".minute.workTime").val()>>0,f=i.find(".second.workTime").val()>>0;n.WorkTime=convertSecond(0,u,f);let e=i.find(".minute.productTime").val()>>0,o=i.find(".second.productTime").val()>>0;return n.ProductTime=convertSecond(0,e,o),n.SingleCount=i.find(".sCount").val()>>0,n.Number=i.find(".number").text()>>0,n.Total=i.find(".total").text()>>0,n})};n("#devCapacitySetList","Devices");n("#personCapacitySetList","Operators");layer.msg("产能设置成功");$(this).closest("tr").find(".glyphicon").addClass("glyphicon-ok text-green").removeClass("glyphicon-remove text-red")})}function addCapacity(){const n=$("#addCapacityCategory").val().trim();if(isStrEmptyOrUndefined(n))return void layer.msg("产能类型不能为空");const u=$("#addCapacityRemark").val().trim(),t=$("#capacityProcess").val();if(isStrEmptyOrUndefined(t))return void layer.msg("请选择流程编号");const i=$(getDataTableRow("#capacityDetailList")).find(".set-btn"),r=[];for(let n=0,t=i.length;n<t;n++){const u=i[n];if(!u.Devices)return void layer.msg("请设置产能");const t=[];for(let n=0;n<20;n++)t[n]=[];u.Devices&&u.Devices.forEach(n=>{t[0].push(n.ModelId),t[1].push(n.Single),t[2].push(n.Rate),t[3].push(n.WorkTime),t[4].push(n.ProductTime),t[5].push(n.SingleCount),t[6].push(n.Number)});u.Operators&&u.Operators.forEach(n=>{t[10].push(n.LevelId),t[11].push(n.Single),t[12].push(n.Rate),t[13].push(n.WorkTime),t[14].push(n.ProductTime),t[15].push(n.SingleCount),t[16].push(n.Number)});r[n]={ProcessId:$(u).attr("process")>>0,DeviceModel:t[0].join(),DeviceSingle:t[1].join(),DeviceRate:t[2].join(),DeviceWorkTime:t[3].join(),DeviceProductTime:t[4].join(),DeviceSingleCount:t[5].join(),DeviceNumber:t[6].join(),OperatorLevel:t[10].join(),OperatorSingle:t[11].join(),OperatorRate:t[12].join(),OperatorWorkTime:t[13].join(),OperatorProductTime:t[14].join(),OperatorSingleCount:t[15].join(),OperatorNumber:t[16].join()}}const f=[{Capacity:n,CategoryId:t,Remark:u,List:r}];myPromise(5532,f).then(()=>{$("#showAddCapacityCategoryModel").modal("hide"),getCapacityList()})}function updateCapacity(){const n=$(this).val(),t=$("#capacityProcess").val();if(isStrEmptyOrUndefined(t))return void layer.msg("请选择流程编号");const i=$(getDataTableRow("#capacityDetailList")).find(".set-btn"),r=[];for(let t=0,u=i.length;t<u;t++){const u=i[t];if(!u.Devices&&!u.exist)return void layer.msg("请设置产能");const f=[];for(let n=0;n<20;n++)f[n]=[];u.Devices&&(u.Devices.forEach(n=>{f[0].push(n.ModelId),f[1].push(n.Single),f[2].push(n.Rate),f[3].push(n.WorkTime),f[4].push(n.ProductTime),f[5].push(n.SingleCount),f[6].push(n.Number)}),u.Operators.forEach(n=>{f[10].push(n.LevelId),f[11].push(n.Single),f[12].push(n.Rate),f[13].push(n.WorkTime),f[14].push(n.ProductTime),f[15].push(n.SingleCount),f[16].push(n.Number)}));r[t]={CapacityId:n,ProcessId:u.exist?$(u).attr("process"):$(u).val(),DeviceModel:u.Devices?f[0].join():u.DeviceModel,DeviceSingle:u.Devices?f[1].join():u.DeviceSingle,DeviceRate:u.Devices?f[2].join():u.DeviceRate,DeviceWorkTime:u.Devices?f[3].join():u.DeviceWorkTime,DeviceProductTime:u.Devices?f[4].join():u.DeviceProductTime,DeviceSingleCount:u.Devices?f[5].join():u.DeviceSingleCount,DeviceNumber:u.Devices?f[6].join():u.DeviceNumber,OperatorLevel:u.Devices?f[10].join():u.OperatorLevel,OperatorSingle:u.Devices?f[11].join():u.OperatorSingle,OperatorRate:u.Devices?f[12].join():u.OperatorRate,OperatorWorkTime:u.Devices?f[13].join():u.OperatorWorkTime,OperatorProductTime:u.Devices?f[14].join():u.OperatorProductTime,OperatorSingleCount:u.Devices?f[15].join():u.OperatorSingleCount,OperatorNumber:u.Devices?f[16].join():u.OperatorNumber,Id:u.exist?$(u).val():0}}const u={Id:n,CategoryId:t,List:r};myPromise(5561,u).then(()=>{$("#showUpdateCapacityCategoryModel").modal("hide"),getCapacityList()})}function delCapacity(){delTableRow(_capacityTrs,5533,getCapacityList)}function getWorkOrderList(){myPromise(5070).then(n=>{_workOrderTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"WorkOrder",title:"工单",render:tableSet.input.bind(null,"workOrder")},{data:"StateStr",title:"状态"},{data:"DeliveryTime",title:"交货日期",render:tableSet.day.bind(null,"deliveryTime")},{data:"Target",title:"目标产量",render:tableSet.input.bind(null,"target")},{data:"DoneTarget",title:"已完成",sClass:"text-green"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.createdRow=n=>initDayTime(n);t.drawCallback=function(){initCheckboxAddEvent.call(this,_workOrderTrs,(n,t)=>{n.find(".workOrder").val(t.WorkOrder),n.find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update"),n.find(".target").val(t.Target),n.find(".remark").val(t.Remark)})};$("#workOrderList").DataTable(t)})}function getWorkOrderTrInfo(n,t){const i=n.find(".workOrder").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("工单不能为空");const r=n.find(".deliveryTime").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择交货日期");const u=n.find(".target").val().trim();if(isStrEmptyOrUndefined(u))return void layer.msg("目标产量不能为0");const f={WorkOrder:i,DeliveryTime:r,Target:u,Remark:n.find(".remark").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updateWorkOrder(){updateTableRow(_workOrderTrs,getWorkOrderTrInfo,5071,getWorkOrderList)}function addWorkOrderModel(){const t={WorkOrder:"",DeliveryTime:getDate(),Target:0,Remark:""},n=_tablesConfig(!1,[t]);n.columns=n.columns.concat([{data:"WorkOrder",title:"工单",render:tableSet.addInput.bind(null,"workOrder","auto")},{data:"DeliveryTime",title:"交货日期",render:tableSet.addDay.bind(null,"deliveryTime")},{data:"Target",title:"目标产量",render:tableSet.addInput.bind(null,"target","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);n.createdRow=n=>initDayTime(n);$("#addWorkOrderList").DataTable(n);$("#addWorkOrderListBtn").off("click").on("click",()=>addDataTableTr("#addWorkOrderList",t));$("#addWorkOrderModel").modal("show")}function addWorkOrder(){addTableRow("#addWorkOrderList",getWorkOrderTrInfo,5072,()=>{$("#addWorkOrderModel").modal("hide"),getWorkOrderList()})}function delWorkOrder(){delTableRow(_workOrderTrs,5073,getWorkOrderList)}function getTaskOrderList(){const n=myPromise(5060),t=myPromise(5070),i=myPromise(5090);Promise.all([n,t,i]).then(n=>{_taskOrderTrs=[];const t=_tablesConfig(!0,n[2].datas);t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单",render:tableSet.input.bind(null,"taskOrder")},{data:"StateStr",title:"状态"},{data:"Target",title:"目标产量",render:tableSet.input.bind(null,"target")},{data:"Done",title:"已完成",sClass:"text-green"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"WorkOrder",title:"工单",render:tableSet.select.bind(null,setOptions(n[1].datas,"WorkOrder"),"workOrder")},{data:"Product",title:"计划号",render:tableSet.select.bind(null,setOptions(n[0].datas,"Product"),"product")},{data:"DeliveryTime",title:"交货日期",render:tableSet.day.bind(null,"deliveryTime")},{data:"Id",title:"详情",render:tableSet.detailBtn.bind(null,"showTaskOrderDetailModal")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.createdRow=n=>initDayTime(n);t.drawCallback=function(){initCheckboxAddEvent.call(this,_taskOrderTrs,(n,t)=>{n.find(".taskOrder").val(t.TaskOrder),n.find(".target").val(t.Target),n.find(".workOrder").val(t.WorkOrderId),n.find(".product").val(t.ProductId),n.find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update"),n.find(".remark").val(t.Remark)})};$("#taskOrderList").DataTable(t)})}function showTaskOrderDetailModal(){myPromise(5090).then(n=>{const t=$(this).val();$("#taskOrderSelect").html(setOptions(n.datas,"TaskOrder")).val(t).trigger("change");$("#taskOrderDetailModel").modal("show")})}function getTaskOrderTrInfo(n,t){const i=n.find(".taskOrder").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("任务单不能为空");const r=n.find(".target").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("目标产量不能为0");const u=n.find(".workOrder").val();if(isStrEmptyOrUndefined(u))return void layer.msg("请选择工单");const f=n.find(".product").val();if(isStrEmptyOrUndefined(f))return void layer.msg("请选择计划号");const e=n.find(".deliveryTime").val().trim();if(isStrEmptyOrUndefined(e))return void layer.msg("请选择交货日期");const o={TaskOrder:i,Target:r,WorkOrderId:u,ProductId:f,DeliveryTime:e,Remark:n.find(".remark").val()};return t||(o.Id=n.find(".isEnable").val()>>0),o}function updateTaskOrder(){updateTableRow(_taskOrderTrs,getTaskOrderTrInfo,5091,getTaskOrderList)}function addTaskOrderModel(){const n=myPromise(5060),t=myPromise(5070);Promise.all([n,t]).then(n=>{const t=n[1].datas[0],r={TaskOrder:"",WorkOrderId:"",TargetWork:t.Target,Left:t.Left,Doing:t.Doing,ProductId:"",Target:0,DeliveryTime:t.DeliveryTime.split(" ")[0],Remark:""},i=_tablesConfig(!1,[r]);i.columns=i.columns.concat([{data:"TaskOrder",title:"任务单",render:tableSet.addInput.bind(null,"taskOrder","auto")},{data:"WorkOrderId",title:"工单",render:tableSet.addSelect.bind(null,setOptions(n[1].datas,"WorkOrder"),"workOrder")},{data:"TargetWork",title:"目标产量"},{data:"Left",title:"未完成",sClass:"text-red"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"ProductId",title:"计划号",render:tableSet.addSelect.bind(null,setOptions(n[0].datas,"Product"),"product")},{data:"Target",title:"目标产量",render:tableSet.addInput.bind(null,"target","auto")},{data:"DeliveryTime",title:"交货日期",render:tableSet.addDay.bind(null,"deliveryTime")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);i.createdRow=n=>initDayTime(n);$("#addTaskOrderList").DataTable(i);$("#addTaskOrderListBtn").off("click").on("click",()=>addDataTableTr("#addTaskOrderList",r));$("#addTaskOrderModel").modal("show")})}function addTaskOrder(){addTableRow("#addTaskOrderList",getTaskOrderTrInfo,5092,()=>{$("#addTaskOrderModel").modal("hide"),getTaskOrderList()})}function delTaskOrder(){delTableRow(_taskOrderTrs,5093,getTaskOrderList)}function showCapacityNeedModel(){$(`#capacityTaskDetailListDiv`).addClass("hidden");$(`#capacityTaskDevPerDiv`).addClass("hidden");myPromise(5090).then(n=>{n=n.datas;var t=n.reduce((n,t)=>`${n}<div class="flexStyle pointer choseBox">
                            <label class="flexStyle pointer">
                                <input type="checkbox" class="icb_minimal" value="${t.Id}" cid="${t.CapacityId}">
                                <span class="textOverTop" style="margin-left: 5px">${t.TaskOrder}-<span class="text-blue">${t.Product}</span>-<span class="text-red">${t.Target}</span></span>
                            </label>
                            <button type="button" class="btn btn-primary btn-xs hidden chose" style="margin-left: 5px">选择</button>
                        </div>`,"");$("#capacityTaskCheck").empty().append(t);$(`#capacityTaskCheck .icb_minimal`).iCheck({handle:"checkbox",checkboxClass:"icheckbox_minimal-green",increaseArea:"20%"});$("#capacityTaskCheck").on("ifChanged",".icb_minimal",function(){const n=$(this),t=n.val().trim()>>0;n.is(":checked")?(_capacityNeed[t]={Id:t,Needs:[]},n.closest("label").siblings(".chose").removeClass("hidden")):(delete _capacityNeed[t],n.closest("label").siblings(".chose").addClass("hidden"));_capacityNeedCurrentTaskId=0;$(`#capacityTaskDetailListDiv`).addClass("hidden");$(`#capacityTaskDevPerDiv`).addClass("hidden")});$("#capacityTaskCheck").on("click",".chose",function(){const n=$(this).siblings("label").find(".icb_minimal");_capacityNeedCurrentTaskId=$(n).val().trim()>>0;const t=$(n).attr("cid").trim()>>0;_capacityNeedCurrentTaskId!=0&&($(`#capacityTaskDevPerDiv`).addClass("hidden"),showCapacityTaskChose(t))});$("#capacityNeedModel").modal("show")})}function showCapacityTaskChose(n){$(`#capacityTaskDetailListDiv`).removeClass("hidden");myPromise(5560,{capacityId:n},!0,0).then(n=>{n.datas.forEach(n=>{_capacityNeed[_capacityNeedCurrentTaskId].Needs[n.Id]||(_capacityNeed[_capacityNeedCurrentTaskId].Needs[n.Id]={Id:n.Id,DeviceList:[],OperatorList:[]})});const t=_tablesConfig(!1,n.datas);t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:null,title:"设备/人员",render:n=>`<button class="btn btn-info btn-sm capacity-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">选择</button>`},{data:null,title:"是否选择",render:n=>{const t=_capacityNeed[_capacityNeedCurrentTaskId].Needs[n.Id].DeviceList,i=_capacityNeed[_capacityNeedCurrentTaskId].Needs[n.Id].OperatorList;return(t&&t.length==0||i&&i.length==0)&&(n.Id=n.Id),tableSet.isFinish(n)}}]);_capacityTaskDetailList=$("#capacityTaskDetailList").DataTable(t);$("#capacityTaskDetailList").off("click").on("click",".capacity-btn",function(){let n=$(this).val()>>0;if(_capacityNeedCurrentPId=n,_capacityNeedCurrentPId!=0){var i=$(this).attr("p");const t={};t["qId"]=n;myPromise(5564,t,!0).then(n=>{n.Process=i;_capacityTaskDeviceTrs=[];_capacityTaskOperatorTrs=[];devAndPersonInputCapacityTaskInit();deviceOperatorCapacityTaskTable(n,!0);$("#capacityTaskSetBtn").off("click").on("click",()=>{const n=(n,t)=>{if(_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId][t]||(_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId][t]=[]),n.length==0){_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId][t]=[];return}var i=[];n.forEach(n=>{const u=$(n);var r=u.find(".isEnable").val().trim()>>0,f=u.find(".single").text().trim()>>0,e=u.find(".sCount").text().trim()>>0;r>0&&(f*e>0?(i[r]=r,_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId][t][r]={id:r,single:f,sCount:e}):delete _capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId][t][r])});const r=[];_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId][t].forEach(n=>{r.push(n.id)});r.forEach(n=>{i[n]||delete _capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId][t][n]})};n(_capacityTaskDeviceTrs,"DeviceList");n(_capacityTaskOperatorTrs,"OperatorList");_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId].DeviceList.length>0||_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId].OperatorList.length>0?(layer.msg("设置成功"),$(this).closest("tr").find(".glyphicon").addClass("glyphicon-ok text-green").removeClass("glyphicon-remove text-red")):(layer.msg("请选择"),$(this).closest("tr").find(".glyphicon").addClass("glyphicon-remove text-red").removeClass("glyphicon-ok text-green"))})});$("#addCapacitySetBtn").addClass("hidden")}})})}function deviceOperatorCapacityTaskTable(n){$(`#capacityTaskDevPerDiv`).removeClass("hidden");n.Devices.forEach(n=>(n.Id=n.ModelId,n));const r=n.Devices,t=_tablesConfig(!0,r);t.columns=t.columns.concat([{data:"Category",title:"设备类型"},{data:"Model",title:"设备型号"},{data:"Count",title:"设备数量",sClass:"count"},{data:"Single",title:"单次加工",sClass:"single"},{data:"Rate",title:"合格率(%)",sClass:"rate"},{data:"WorkTime",title:"总工时",sClass:"workTime"},{data:"ProductTime",title:"单次工时",sClass:"productTime"},{data:"SingleCount",title:"日加工次数",sClass:"sCount"},{data:"Number",title:"单台日产能",sClass:"number"},{data:"Total",title:"日总产能",sClass:"total"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_capacityTaskDeviceTrs)};t.createdRow=function(n,t){var r=t.Id;const i=_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId];$(n).find(".isEnable").iCheck(i&&i.DeviceList&&i.DeviceList[r]?"check":"uncheck")};$("#devCapacityTaskSetList").DataTable(t);r.length?$("#devCapacityTaskSetBox").removeClass("hidden"):$("#devCapacityTaskSetBox").addClass("hidden");n.Operators.forEach(n=>(n.Id=n.LevelId,n));const u=n.Operators,i=_tablesConfig(!0,u);i.columns=i.columns.concat([{data:"Level",title:"等级"},{data:"Count",title:"员工数量",sClass:"count"},{data:"Single",title:"单次加工",sClass:"single"},{data:"Rate",title:"合格率",sClass:"rate"},{data:"WorkTime",title:"总工时",sClass:"workTime"},{data:"ProductTime",title:"单次工时",sClass:"productTime"},{data:"SingleCount",title:"日加工次数",sClass:"sCount"},{data:"Number",title:"单台日产能",sClass:"number"},{data:"Total",title:"日总产能",sClass:"total"}]);i.drawCallback=function(){initCheckboxAddEvent.call(this,_capacityTaskOperatorTrs)};t.createdRow=function(n,t){var r=t.Id;const i=_capacityNeed[_capacityNeedCurrentTaskId].Needs[_capacityNeedCurrentPId];$(n).find(".isEnable").iCheck(i&&i.OperatorList&&i.OperatorList[r]?"check":"uncheck")};$("#personCapacityTaskSetList").DataTable(i)}function devAndPersonInputCapacityTaskInit(){var n=n=>{const i=n.find(".single").val()>>0,r=n.find(".sCount").text()>>0,u=n.find(".count").text()>>0,t=i*r;n.find(".number").text(t);n.find(".total").text(u*t)},t;$("#devCapacityTaskSetList,#personCapacityTaskSetList").on("input",".single",function(){const t=$(this).closest("tr");n(t)});t=n=>{var u,e;let i=n.find(".minute.workTime").val()>>0,r=n.find(".second.workTime").val()>>0,t=convertSecond(0,i,r);u=86400;t>u&&(t=u,e=convertTime(u,!1),i=e.m,r=e.s,n.find(".minute.workTime").val(i),n.find(".second.workTime").val(r));let o=n.find(".minute.productTime").val()>>0,s=n.find(".second.productTime").val()>>0,f=convertSecond(0,o,s);f>t&&(f=t,o=i,s=r,n.find(".minute.productTime").val(o),n.find(".second.productTime").val(s));const h=f!=0?Math.floor(t/f):0;n.find(".sCount").text(h)};$("#devCapacityTaskSetList,#personCapacityTaskSetList").on("input",".minute",function(){const i=$(this).closest("tr");t(i);n(i)});$("#devCapacityTaskSetList,#personCapacityTaskSetList").on("input",".second",function(){const i=$(this).closest("tr");t(i);n(i)})}function getCapacityNeedParams(){if(_capacityTasks=[],_capacityTaskProcessListInit){const n=getDataTableRow("#capacityTaskProcessList");for(let t=0,i=n.length;t<i;t++){const i=$(n[t]),r=i.attr("tid").trim()>>0;if(_capacityNeed[r]){const t=i.find(".target"),u=i.find(".doneTarget"),f=i.find(".put"),e=i.find(".havePut"),n=i.find(".stock");n.each((n,t)=>{let i=$(t);const u=i.attr("id").trim()>>0;_capacityNeed[r].Needs[u].Stock=i.val().trim()>>0})}}}const n=Object.values(_capacityNeed);n.length&&n.forEach(n=>{const t=deepCopy(n);t.Needs=Object.values(t.Needs);t.Needs.forEach(n=>{n.DeviceList&&(n.DeviceList=Object.values(n.DeviceList)),n.OperatorList&&(n.OperatorList=Object.values(n.OperatorList)),n.DeviceList&&(n.Devices=n.DeviceList.map(n=>`${n.id},${n.single},${n.sCount}`).join()),n.OperatorList&&(n.Operators=n.OperatorList.map(n=>`${n.id},${n.single},${n.sCount}`).join())});_capacityTasks.push(t)})}function updateCapacityNeedParams(n){n.forEach(n=>{const t=n.Id;_capacityNeed[t]&&(_capacityNeed[t].Needs||(_capacityNeed[t].Needs=[]),n.Needs.forEach(n=>{_capacityNeed[t].Needs[n.Id]?_capacityNeed[t].Needs[n.Id].Stock=n.Stock:_capacityNeed[t].Needs[n.Id]={Id:n.Id,Stock:n.Stock}}))})}function showCapacityTaskProcess(n=true){if(getCapacityNeedParams(),!_capacityTasks.length)return layer.msg("请选择任务单");const t=n=>{const t=n.datas;t.length>0&&(_capacityTaskProcessListInit=!0);updateCapacityNeedParams(t);const u=(n,t,i)=>`<div class="table-responsive mailbox-messages">
                        <table class="table table-hover table-striped table-bordered" id="capacityTaskProcessList">
                            <thead>
                                <tr>
                                    <th rowspan="2">序号</th>
                                    <th rowspan="2">任务单</th>
                                    <th rowspan="2">计划号</th>
                                    <th rowspan="2">数量</th>${n}
                                </tr>
                                <tr>${'<th class="bg-blue">总计<\/th><th class="bg-green">库存<\/th><th class="bg-yellow">需生产<\/th><th>需投料<\/th><th class="bg-yellow">设备<\/th><th>需要<\/th><th>已有<\/th><th class="bg-yellow">人员<\/th><th>需要<\/th><th>已有<\/th>'.repeat(t)}</tr>
                            </thead>
                            <tbody>${i}</tbody>
                        </table>
                    </div>`,i=n.Orders.sort((n,t)=>n.Order-t.Order),f=i.reduce((n,t,i)=>`${n}<th colspan="10" ${i%2?"":'class="bg-gray"'}>${t.Process}</th>`,""),e=t.reduce((n,t,r)=>{const o=t.Id,f=t.Needs.sort((n,t)=>n.Order-t.Order),u={};f.forEach(n=>{u[n.Order]=n});const e=i.reduce((n,t)=>{const i=u[t.Order];return i?`${n}
                          <td class="bg-blue">${i.Target+i.Stock}</td>
                          <td class="bg-green">
                             <input type="text" class="form-control text-center stock"
                                value="${i.Stock}" id="${i.Id}" order="${t.Order}" pid="${i.PId}" processid="${i.ProcessId}" productid="${i.ProductId}" style="width:50px;margin:auto;padding:inherit" onchange="showCapacityTaskProcess.call(this)">
                          </td>
                          <td class="bg-yellow target">${i.Target}</td>
                          <td><strong class="text-green put">${i.Put}</strong> (${i.Rate}%)</td>
                          <td class="bg-yellow"><strong>${i.DCapacity}</strong></td>
                          <td><strong${i.NeedDCapacity<i.HaveDCapacity?"":' class="text-red"'}>${i.NeedDCapacity}</strong></td>
                          <td><strong>${i.HaveDCapacity}</strong></td>
                          <td class="bg-yellow"><strong>${i.OCapacity}</strong></td>
                          <td><strong${i.NeedOCapacity<i.HaveOCapacity?"":' class="text-red"'}>${i.NeedOCapacity}</strong></td>
                          <td><strong>${i.HaveOCapacity}</strong></td>`:`${n}<td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>`},"");return`${n}<tr tid="${t.Id}">
                        <td>${r+1}</td>
                        <td>${t.Arranged?t.TaskOrder:`<strong class="text-red">${t.TaskOrder}</strong>`}</td>
                        <td>${t.Product}</td>
                        <td>${t.Target}</td>${e}
                    </tr>`},""),o=u(f,i.length,e);$("#capacityTaskProcessListBox").html(o).find("th,td").css("padding","4px").end().find("th,td").css("border","1px solid black").end().find("tbody .bg-green").css("padding",0);var r=dataTableConfig(0);r.fixedHeaderColumn(!0,4,0);$("#capacityTaskProcessList").DataTable(r)};myPromise(5094,_capacityTasks,!0,n).then(t)}function getPmcChildList(){const n=$("#pmcChildSTime").val();if(isStrEmptyOrUndefined(n))return layer.msg("请选择开始时间");const t=$("#pmcChildETime").val();if(isStrEmptyOrUndefined(t))return layer.msg("请选择结束时间");if(!comTimeDay(n,t)){const i=$("#pmcChildDTime").val(),r=$("#pmcChildAll").is(":checked");myPromise(5606,{startTime:n,endTime:t,deliveryTime:i,all:r},!0).then(n=>pmcChildCreate(n))}}function pmcChildCreate(n){const t="#pmcChildList";if($(t).html(""),n.errno!=0)return void layer.msg(n.errmsg);const r="pmcChildTable",u=n.Orders.reduce((t,i)=>{var c,l,a,v,y,f,p,u;const w=exchangeDateArray(n.StartTime,n.EndTime),b=w.reduce((n,t,i)=>`${n}<th colspan="4" ${i%2==0?'class="bg-gray"':""}>${monthDay(t)}</th>`,""),e=[],o=[],h=[],s=[];for(c=[],l=n.datas,f=0;f<l.length;f++)a=l[f],a.PId==i.Id&&c.push(a);for(v=[],y=n.Indexes,f=0;f<y.length;f++)p=y[f],p.PId==i.Id&&v.push(p);u=0;const k=Object.values(c).reduce((n,t,r)=>{const y=t.Schedules.reduce((n,r,u)=>{u++;const c=r.Put,l=r.HavePut;e[u]=(e[u]>>0)+c;o[u]=(o[u]>>0)+l;const a=r.Target,v=r.DoneTarget;h[u]=(h[u]>>0)+a;s[u]=(s[u]>>0)+v;const f=(n,u,f="white")=>u>0?`<a href="javascript: showPmcChildPlanModal('${r.ProcessTime}', ${r.Id}, 0, 0, '${t.Product}', '${i.Process}', ${n});" style="color:${f}">${u}</a>`:`${u}`;return`${n}
                            <td class="bg-green">${f(5607,c)}</td>
                            <td>${f(5607,l,l<c?"red":"green")}</td>
                            <td class="bg-green">${f(5608,a)}</td>
                            <td>${f(5608,v,v<a?"red":"green")}</td>`},""),c=t.Put,l=t.HavePut;e[u]=(e[u]>>0)+c;o[u]=(o[u]>>0)+l;const a=t.Target,v=t.DoneTarget;h[u]=(h[u]>>0)+a;s[u]=(s[u]>>0)+v;const f=(n,r,u="white")=>r>0?`<a href="javascript: showPmcChildPlanModal(undefined, 0, ${t.TaskOrderId}, ${t.PId}, '${t.Product}', '${i.Process}', ${n});" style="color:${u}">${r}</a>`:`${r}`;return`${n}<tr>
                            <td>${r+1}</td>
                            <td>${t.TaskOrder}</td>
                            <td>${t.Product}</td>
                            <td>${monthDay(t.DeliveryTime)}</td>
                            <td class="bg-yellow">${f(5607,c)}</td>
                            <td>${f(5607,l,l<c?"red":"green")}</td>
                            <td class="bg-yellow">${f(5608,a)}</td>
                            <td>${f(5608,v,v<a?"red":"green")}</td>${y}
                        </tr>`},""),d=e.reduce((n,t,i)=>`${n}<td class="bg-${i!==0?"green":"yellow"}">${e[i]}</td><td ${o[i]==0?'class="text-black"':o[i]<e[i]?'class="text-red"':'class="text-green"'}>${o[i]}</td>
                                                      <td class="bg-${i!==0?"green":"yellow"}">${h[i]}</td><td ${s[i]==0?'class="text-black"':s[i]<h[i]?'class="text-red"':'class="text-green"'}>${s[i]}</td>`,""),g=(n,t="white")=>n.Index>0?`<a href="javascript: showPmcChildIndexModal('${n.ProcessTime}', ${n.PId}, '${i.Process}')" style="color:${t}">${n.Index}</a>`:`${n.Index}`,nt=v.reduce((n,t)=>`${n}<td class="bg-green">${g(t)}</td><td>0</td><td></td><td></td>`,"");return`${t}<div class="form-group">
                        <label class="control-label">${i.Process}：</label>
                        <div class="table-responsive">
                            <table class="table table-hover table-striped table-bordered ${r}">
                                <thead>
                                    <tr>
                                        <th rowspan="2">序号</th>
                                        <th rowspan="2">任务单</th>
                                        <th rowspan="2">计划号</th>
                                        <th rowspan="2">交货日期</th>
                                        <th colspan="2" class="bg-gray">投料合计</th>
                                        <th colspan="2">入库合计</th>${b}
                                    </tr>
                                    <tr><th class="bg-yellow">计划</th><th>实际</th><th class="bg-yellow">计划</th><th>实际</th>${'<th class="bg-green">投料<\/th><th>实际<\/th><th class="bg-green">入库<\/th><th>实际<\/th>'.repeat(w.length)}</tr>
                                </thead>
                                <tbody>
                                    ${k}
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th>总计</th><th></th><th></th><th></th>${d}
                                    </tr>
                                    <tr>
                                        <th>产能</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th>${nt}
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                     </div>`},"");$(t).html(u).find("th,td").css("padding","4px").end().find("th,td").css("border","1px solid gray").end().find("th,td").css("width","auto");var i=dataTableConfig(0);i.fixedHeaderColumn(!0,8,0);$("#pmcChildList .pmcChildTable").DataTable(i)}function showPmcChildPlanModal(n,t,i,r,u,f,e,o=[]){n==undefined?$("#pmcChildPlanTimeBox").addClass("hidden"):($("#pmcChildPlanTimeBox").removeClass("hidden"),$("#pmcChildPlanTime").text(monthDay(n)));let s="Put",h="HavePut",a=`${f}投料详情`,c="#pmcChildPlanList0",l="#pmcChildPlanList1";e!=5607&&(s="Target",h="DoneTarget",a=`${f}入库详情`,c="#pmcChildPlanList1",l="#pmcChildPlanList0");$(c).removeClass("hidden");$(l).addClass("hidden");$(c).closest("div .dataTables_wrapper").removeClass("hidden");$(l).closest("div .dataTables_wrapper").addClass("hidden");$("#showPmcChildPlanModal .modal-title").text(a);const v=n=>{const t=dataTableConfig(n);t.addColumns([{data:"ProcessTime",title:"时间",render:n=>monthDay(n)},{data:"TaskOrder",title:"任务单"},{data:null,title:"计划号",render:()=>u},{data:s,title:"计划",sClass:"bg-green"},{data:h,title:"实际"}]);t.createdRow=function(n,t){const i=t[s],r=t[h],u=i>r?"red":"green";$("td",n).eq(5).css("font-weight","bold").css("color",u)};e===5607&&t.addColumns([{data:null,title:"安排",render:n=>Object.values(n.Arranges).map(n=>"{0}:{1}次".format(n.Item1,n.Item2)).join()}]);t.initComplete=function(){if(this.find("tfoot").remove(),n.length){let t=0,i=0;n.forEach(n=>{t+=n[s],i+=n[h]});let r="";r=e===5607?`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th>${t}</th>
                                <th>${i}</th>
                                <th></th>
                              </tr>
                           </tfoot>`:`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th>${t}</th>
                                <th>${i}</th>
                              </tr>
                           </tfoot>`;this.append(r).find("tfoot tr:last th").css("borderTop",0)}};$(c).DataTable(t);$("#showPmcChildPlanModal").modal("show")};if(o.length>0){v(o);return}myPromise(e,{time:n,id:t,taskOrderId:i,pId:r},!0).then(n=>{const t=n.datas;v(t)})}function showPmcChildIndexModal(n,t,i){const r="#showPmcChildIndexModal",e=`${i}指数详情`,u="#pmcChildIndexList0",f="#pmcChildIndexList1";$(`${r} .modal-title`).text(e);myPromise(5609,{time:n,pId:t},!0).then(t=>{const h=t.datas;let i=[],e=[];h.forEach(n=>{n.ProductType==0?i.push(n):n.ProductType==1&&e.push(n)});$(u).empty();const o=dataTableConfig(i);o.addColumns([{data:null,title:"时间",render:()=>monthDay(n)},{data:"Code",title:"设备"},{data:null,title:"指数",render:()=>1},{data:"Index",title:"安排"}]);o.initComplete=function(){if(this.find("tfoot").remove(),i.length){let n=0,t=0;i.forEach(i=>{n+=1,t+=i.Index});let r=`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th></th>
                                <th>${n}</th>
                                <th>${t}</th>
                              </tr>
                           </tfoot>`;this.append(r).find("tfoot tr:last th").css("borderTop",0)}};$(u).DataTable(o);$(f).empty();const s=dataTableConfig(e);s.addColumns([{data:null,title:"时间",render:()=>monthDay(n)},{data:"Name",title:"人员"},{data:null,title:"指数",render:()=>1},{data:"Index",title:"安排"}]);s.initComplete=function(){if(this.find("tfoot").remove(),e.length){let n=0,t=0;e.forEach(i=>{n+=1,t+=i.Index});let i=`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th></th>
                                <th>${n}</th>
                                <th>${t}</th>
                              </tr>
                           </tfoot>`;this.append(i).find("tfoot tr:last th").css("borderTop",0)}};$(f).DataTable(s);$(`${r}`).modal("show")})}function getNotArrangeTaskListReset(){getNotArrangeTaskList()}function notArrangeTaskListTimeReset(){$("#notArrangeTaskList .form_date").val("");$("#notArrangeTaskList .form_date").datepicker("update");getPmcPreviewParams()}function getNotArrangeTaskList(){myPromise(5601).then(n=>{n=n.datas;const i={};n.forEach(n=>i[n.Id]=n);const r={Product:"",Target:"",DeliveryTime:"",StartTime:"",EndTime:"",EstimatedTime:""},t=_tablesConfig(!1,[]);t.columns=t.columns.concat([{data:null,title:"任务单",render:tableSet.addSelect.bind(null,setOptions(n,"TaskOrder"),"taskOrder")},{data:"Product",title:"计划号"},{data:"Target",title:"数量"},{data:"DeliveryTime",title:"交货时间",render:n=>n.split(" ")[0]},{data:"StartTime",title:"开始时间",render:tableSet.addDay.bind(null,"startTime")},{data:"EndTime",title:"截止时间",render:tableSet.addDay.bind(null,"endTime")},{data:null,title:"工期",render:()=>"",sClass:"workDay"},{data:null,title:"删除",render:()=>`<button class="btn btn-danger btn-xs del-btn"><i class="fa fa-minus"></i></button>`}]);t.createdRow=n=>{$(n).find(".taskOrder").val(0),initDayTime(n)};$("#notArrangeTaskList").DataTable(t);$("#addNotArrangeTaskListBtn").off("click").on("click",function(){addDataTableTr("#notArrangeTaskList",r);disabledPmcTask();n.length===$("#notArrangeTaskList").DataTable().column(1).nodes().length&&$(this).prop("disabled",!0)}).prop("disabled",!n.length);$("#notArrangeTaskList").off("change").on("change",".taskOrder",function(){const f=$(this).val(),r=$($("#notArrangeTaskList").DataTable().columns(1).nodes()[0]).find(".taskOrder"),u={};for(let n=0,t=r.length;n<t;n++){const i=r.eq(n),f=i.find("option[disabled]");f.prop("disabled",!1);const t=i.val();f.prop("disabled",!0);isStrEmptyOrUndefined(t)||(u[t]=_pmcPreviewParams[t]||{Id:+t})}_pmcPreviewParams=u;const t=i[f],n=$(this).closest("tr");n.find("td").eq(2).text(t.Product);n.find("td").eq(3).text(t.Target);n.find("td").eq(4).text(t.DeliveryTime.split(" ")[0]);initDayTime(n);disabledPmcTask();setNotArrangeTaskWork($(this).closest("tr"));const e=$("#pmcChildAuto").is(":checked");e&&getTaskProcessList(!1)});$("#notArrangeTaskList").off("changeDate").on("changeDate",".form_date",function(){setNotArrangeTaskWork($(this).closest("tr"));getPmcPreviewParams();const n=$("#pmcChildAuto").is(":checked");n&&getTaskProcessList(!1)})})}function setNotArrangeTaskWork(n){const t=n.find(".startTime").val().trim(),i=n.find(".endTime").val().trim();if(t&&i){const r=(new Date(i)-new Date(t))/864e5;n.find(".workDay").text(r+1)}}function disabledPmcTask(){const n=$($("#notArrangeTaskList").DataTable().columns(1).nodes()[0]).find(".taskOrder");disabledProcessCodeCommon(n)}function updatePmcPreviewParams(n){n.forEach(n=>{const t={Id:n.Id,Needs:n.Needs.map(n=>({Order:n.Order,TaskOrderId:n.TaskOrderId,ProcessId:n.ProcessId,PId:n.PId,ProductId:n.ProductId,Target:n.Target,DoneTarget:n.DoneTarget,Put:n.Put,HavePut:n.HavePut,Stock:n.Stock}))};n.StartTime!="0001-01-01 00:00:00"&&(t.StartTime=n.StartTime);n.EndTime!="0001-01-01 00:00:00"&&(t.EndTime=n.EndTime);_pmcPreviewParams[n.Id]=t});_taskOrders=Object.values(_pmcPreviewParams)}function getPmcPreviewParams(n=false,t=true){if(!n){t&&$("#pmcPreviewProcessBtn").html("");_pmcPreviewParams={};let n=getDataTableRow("#arrangeTaskList"),i=$("#arrangeTaskList").DataTable();for(let t=0,r=n.length;t<r;t++){const e=$(n[t]),o=i.row(e).data(),r=o.Id,u=e.find(".startTime").val().trim(),f=e.find(".endTime").val().trim();if(_pmcPreviewParams[r]||(_pmcPreviewParams[r]={Id:r}),u?_pmcPreviewParams[r].StartTime=u:delete _pmcPreviewParams[r].StartTime,f?_pmcPreviewParams[r].EndTime=f:delete _pmcPreviewParams[r].EndTime,u&&f&&compareDate(u,f))return"截止时间不能小于开始时间"}n=getDataTableRow("#notArrangeTaskList");for(let t=0,i=n.length;t<i;t++){const f=$(n[t]),e=f.find(".taskOrder"),o=e.find("option[disabled]");o.prop("disabled",!1);const i=e.val();if((o.prop("disabled",!0),!isStrEmptyOrUndefined(i))&&!_pmcPreviewParams[i]){const r=f.find(".startTime").val().trim(),u=f.find(".endTime").val().trim();if(_pmcPreviewParams[i]||(_pmcPreviewParams[i]={Id:i}),r?_pmcPreviewParams[i].StartTime=r:delete _pmcPreviewParams[i].StartTime,u?_pmcPreviewParams[i].EndTime=u:delete _pmcPreviewParams[i].EndTime,r&&u&&compareDate(r,u))return"截止时间不能小于开始时间"}}}const i=$("#notArrangeTaskProcess").length;if(i>0){const t=getDataTableRow("#notArrangeTaskProcess");if(n&&t.length!=_taskOrders.length)return"缺少工序加工数量数据，请重新查询！";for(let n=0,i=t.length;n<i;n++){const i=$(t[n]),r=i.attr("tid").trim()>>0;if(_pmcPreviewParams[r]){const t=i.find(".target"),u=i.find(".doneTarget"),f=i.find(".put"),e=i.find(".havePut"),o=i.find(".stock");let n=[];o.each((i,o)=>{let s=$(o);n.push({Order:s.attr("order").trim()>>0,TaskOrderId:r,ProcessId:s.attr("processid").trim()>>0,PId:s.attr("pid").trim()>>0,ProductId:s.attr("productid").trim()>>0,Target:$(t[i]).text().trim()>>0,DoneTarget:$(u[i]).text().trim()>>0,Put:$(f[i]).text().trim()>>0,HavePut:$(e[i]).text().trim()>>0,Stock:s.val().trim()>>0})});_pmcPreviewParams[r].Needs=n}}}_taskOrders=Object.values(_pmcPreviewParams)}function getArrangeTaskList(){const n=myPromise(5590),t=myPromise(5600);Promise.all([n,t]).then(n=>{_arrangeTask=[];const t=_tablesConfig(!1,n[1].datas);t.columns=t.columns.concat([{data:null,title:"等级",render:tableSet.addSelect.bind(null,setOptions(n[0].datas,"Level"),"level")},{data:"StateStr",title:"状态"},{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:"Target",title:"数量"},{data:"DoneTarget",title:"已完成"},{data:"DeliveryTime",title:"交货时间",render:tableSet.showTime},{data:"StartTime",title:"开始时间",render:tableSet.addDay.bind(null,"startTime")},{data:"EndTime",title:"截止时间",render:tableSet.addDay.bind(null,"endTime")},{data:"CostDay",title:"工期",render:n=>n||"",sClass:"workDay"}]);t.createdRow=(n,t)=>{$(n).find(".level").val(t.LevelId),initDayTime(n,t.StartTime,getPmcPreviewParams)};t.drawCallback=()=>{};$("#arrangeTaskList").DataTable(t);$("#arrangeTaskList").off("changeDate").on("changeDate",".form_date",function(){})})}function setArrangeTaskList(){const t=Array.from(getDataTableRow("#arrangeTaskList")),i=$("#arrangeTaskList").DataTable(),n=[];for(let r=0,u=t.length;r<u;r++){const u=t[r],s=i.row(u).data(),f=$(u).find(".level").val();if(isStrEmptyOrUndefined(f))return void layer.msg("请选择等级");const e=$(u).find(".startTime").val();if(isStrEmptyOrUndefined(e))return layer.msg("请选择开始时间");const o=$(u).find(".endTime").val();if(isStrEmptyOrUndefined(o))return layer.msg("请选择结束时间");n[r]={StartTime:e,EndTime:o,LevelId:f,Id:s.Id}}if(!n.length)return layer.msg("请设置任务单");myPromise(5603,n)}function getTaskProcessList(n=true){const t=getPmcPreviewParams();if(!isStrEmptyOrUndefined(t))return layer.msg(t);if(!_taskOrders.length)return layer.msg("请选择任务单");const i=n=>{const t=n.datas;updatePmcPreviewParams(t);const f=(n,t,i)=>`<div class="box box-primary">
                        <div class="box-header no-padding-left">
                            <label class="control-label text-red">任务单各工序数量：</label>
                            <div class="box-tools pull-right">
                                <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                            </div>
                        </div>
                        <div class="box-body">
                            <div class="form-group">
                                <div class="table-responsive mailbox-messages">
                                    <table class="table table-hover table-striped table-bordered" id="notArrangeTaskProcess">
                                        <thead>
                                            <tr>
                                                <th rowspan="2">序号</th>
                                                <th rowspan="2">任务单</th>
                                                <th rowspan="2">计划号</th>${n}
                                            </tr>
                                            <tr>${'<th class="bg-blue">总计<\/th><th class="bg-green">库存<\/th><th class="bg-yellow">需生产<\/th><th>需投料<\/th><th class="bg-yellow">已完成<\/th><th>已投料<\/th>'.repeat(t)}</tr>
                                        </thead>
                                        <tbody>${i}</tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>`,r=n.Orders.sort((n,t)=>n.Order-t.Order),e=r.reduce((n,t,i)=>`${n}<th colspan="6" ${i%2?"":'class="bg-gray"'}>${t.Process}</th>`,""),o=t.reduce((n,t,i)=>{const o=t.Id,f=t.Needs.sort((n,t)=>n.Order-t.Order),u={};f.forEach(n=>{u[n.Order]=n});const e=r.reduce((n,t)=>{const i=u[t.Order];return i?`${n}
                          <td class="bg-blue">${i.Target+i.Stock}</td>
                          <td class="bg-green">
                             <input type="text" class="form-control text-center stock"
                                value="${i.Stock}" order="${t.Order}" pid="${i.PId}" processid="${i.ProcessId}" productid="${i.ProductId}" style="width:50px;margin:auto;padding:inherit" onchange="getTaskProcessList.call(this)">
                          </td>
                          <td class="bg-yellow target">${i.Target}</td>
                          <td><strong class="text-red put">${i.Put}</strong> (${i.Rate}%)</td>
                          <td class="bg-yellow"><strong class="doneTarget">${i.DoneTarget}</strong></td>
                          <td><strong class="text-green havePut">${i.HavePut}</strong></td>`:`${n}<td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>
                          <td class="short-slab"><i></td>`},"");return`${n}<tr tid="${t.Id}">
                        <td>${i+1}</td>
                        <td>${t.Arranged?t.TaskOrder:`<strong class="text-red">${t.TaskOrder}</strong>`}</td>
                        <td>${t.Product}</td>${e}
                    </tr>`},""),s=f(e,r.length,o);$("#notArrangeTaskProcessBox").html(s).find("th,td").css("padding","4px").end().find("th,td").css("border","1px solid black").end().find("tbody .bg-green").css("padding",0);var u=dataTableConfig(0);u.fixedHeaderColumn(!0,3,0);$("#notArrangeTaskProcess").DataTable(u);$("#setNotArrangeTaskProcessBtn").off("click").on("click",()=>{if(getPmcPreviewParams(),!_taskOrders.length)return layer.msg("请选择任务单");myPromise(5602,_taskOrders).then(n=>{updatePmcPreviewParams(t),i(n)})})};myPromise(5602,_taskOrders,!0,n).then(i)}function getPmcPreviewList(){const n=getPmcPreviewParams(!0);if(!isStrEmptyOrUndefined(n))return layer.msg(n);if(_taskOrders.length==0)return"";myPromise(5604,!$("#notArrangeTaskProcessBox").html()?[]:_taskOrders,!0).then(n=>{const r=(t,i)=>`<div class="form-group">
                        <label class="control-label text-red">预计开始时间：${n.StartTime.split(" ")[0]}</label><br />
                        <label class="control-label text-red">产能指数：</label>
                        <div class="table-responsive">
                            <table class="table table-hover table-striped table-bordered" id="pmcPreview">
                                <thead>
                                    <tr>
                                        <th rowspan="2" style="width: 40px">序号</th>
                                        <th rowspan="2" style="width: 82px">任务单</th>
                                        <th rowspan="2" style="width: 82px">计划号</th>
                                        <th rowspan="2" style="width: 82px">开始时间</th>
                                        <th rowspan="2" style="width: 82px">结束时间</th>
                                        <th rowspan="2" style="width: 82px">预计开始</th>
                                        <th rowspan="2" style="width: 82px">预计结束</th>
                                        <th rowspan="2" style="width: 50px">耗时</th>
                                        <th rowspan="2" style="width: 50px">逾期</th>${t}
                                    </tr>
                                    <tr>${'<th class="bg-yellow">设备<\/th><th>人员<\/th>'.repeat(n.Orders.length)}</tr>
                                </thead>
                                <tbody>${i}</tbody>
                            </table>
                        </div>
                      </div>`,t=n.Orders.sort((n,t)=>n.Order-t.Order),u=t.reduce((n,t,i)=>i%2==0?`${n}<th colspan="2" class="bg-gray">${t.Process}</th>`:`${n}<th colspan="2">${t.Process}</th>`,""),f=n.Cost.reduce((n,i,r)=>{const h=i.Id,l=i.CostDays.sort((n,t)=>n.Order-t.Order),c={};l.forEach(n=>{c[n.Order]=n});const a=t.reduce((n,t)=>{const i=c[t.Order];return i?`${n}<td class="bg-yellow">${i.DeviceDay}</td><td>${i.OperatorDay}</td>`:`${n}<td class="short-slab"><i></td><td class="short-slab"><i></td>`},""),u=i.EstimatedStartTime.split(" ")[0],f=i.EstimatedEndTime.split(" ")[0],v=Array.from(getDataTableRow("#notArrangeTaskList")),s=i.Id;v.forEach(n=>{n=$(n);const t=n.find(".taskOrder option[disabled]");t.prop("disabled",!1);const i=n.find(".taskOrder").val();t.prop("disabled",!0);i==s&&(isStrEmptyOrUndefined(n.find(".startTime").val())&&(n.find(".startTime").val(u).datepicker("update"),_pmcPreviewParams[h]&&(_pmcPreviewParams[s].StartTime=u)),isStrEmptyOrUndefined(n.find(".endTime").val())&&(n.find(".endTime").val(f).datepicker("update"),_pmcPreviewParams[h]&&(_pmcPreviewParams[s].EndTime=f)))});const e=i.StartTime.split(" ")[0],o=i.EndTime.split(" ")[0];return`${n}<tr>
                        <td>${r+1}</td>
                        <td>${i.TaskOrder}</td>
                        <td>${i.Product}</td>
                        <td>${validTime(e)?e:""}</td>
                        <td>${validTime(o)?o:""}</td>
                        <td${validTime(e)?compareDate(u,e)?' class="text-red"':"":""}>${u}</td>
                        <td${validTime(o)?compareDate(f,o)?' class="text-red"':"":""}>${f}</td>
                        <td>${i.CostDay}</td>
                        <td>${i.OverdueDay}</td>${a}
                    </tr>`},""),e=r(u,f);$("#pmcPreviewBox").html(e).find("th,td").css("padding","4px").end().find("th,td").css("border","1px solid gray").end().find("th,td").css("width","auto");var i=dataTableConfig(0);i.fixedHeaderColumn(!0,9,0);$("#pmcPreview").DataTable(i);getPresentSchedule(n)})}function getPresentSchedule(n){var t="#pmcPreviewProcess";const i={startTime:n.StartTime,endTime:n.EndTime};myPromise(5606,i,!0).then(i=>{var u,f,e;const r=[];for(u=0;u<n.Put.length;u++){const t=n.Put[u];for(r[t.TaskOrderId]||(r[t.TaskOrderId]=[]),f=0;f<t.Schedules.length;f++){const n=t.Schedules[f];r[t.TaskOrderId][n.ProcessTime]||(r[t.TaskOrderId][n.ProcessTime]=[]);r[t.TaskOrderId][n.ProcessTime][t.PId]||(r[t.TaskOrderId][n.ProcessTime][t.PId]=[]);r[t.TaskOrderId][n.ProcessTime][t.PId].push(n.Data)}}const o=n.Orders.reduce((t,r)=>{var f,u;const o=exchangeDateArray(n.StartTime,n.EndTime),h=o.reduce((n,t,i)=>`${n}<th colspan="2" ${i%2==0?'class="bg-gray"':""}>${monthDay(t)}</th>`,""),e=(n,t)=>{for(var r,u=[],i=0;i<n.length;i++)r=n[i],r.PId==t&&u.push(r);return u},c=(n,t)=>{for(var r,u=[],i=0;i<n.length;i++)r=n[i],r.PId==t&&u.push(r);return u};f=1;const l=(n,t,i,r,u)=>`<div class="form-group">
                        <label class="control-label">${t}：</label>
                        <div class="table-responsive">
                            <table class="table table-hover table-striped table-bordered pmcPreviewProcess ${n}">
                                <thead>
                                    <tr>
                                        <th rowspan="2" style="width: 40px">序号</th>
                                        <th rowspan="2" style="width: 100px">任务单</th>
                                        <th rowspan="2" style="width: 10px">计划号</th>
                                        <th rowspan="2" style="width: 100px">交货日期</th>
                                        <th colspan="2" class="bg-gray">合计</th>
                                        ${h.repeat(f)}
                                    </tr>
                                    <tr>
                                        <th class="bg-yellow">投料</th>
                                        <th>入库</th>
                                        ${'<th class="bg-green">投料<\/th><th>入库<\/th>'.repeat(o.length).repeat(f)}
                                    </tr>
                                </thead>
                                <tbody>
                                    ${i}
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th>总计</th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        ${r}
                                    </tr>
                                    <tr>
                                        <th>产能</th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        ${u}
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>`;u=0;const a=(n,t,i,e)=>n.reduce((n,o,s)=>{const l=o.Schedules.reduce((n,u,f)=>{f++;const s=u.Put,h=u.Target;i[f]=(i[f]>>0)+s;e[f]=(e[f]>>0)+h;const c=(n,i="white")=>s>0?t===0?`<a href="javascript: showPmcChildPlanModal('${u.ProcessTime}', ${u.Id}, 0,0, '${o.Product}', '${r.Process}', 5607)" style="color:${i}";>${n}</a>`:`<a href="javascript:;" class="put" index="${o.PId}" tid="${o.TaskOrderId}" time="${u.ProcessTime}" product="${o.Product}" process="${r.Process}" style="color:${i}">${n}</a>`:`${n}`,l=(n,i="white")=>h>0?t===0?`<a href="javascript: showPmcChildPlanModal('${u.ProcessTime}', ${u.Id}, 0, 0, '${o.Product}', '${r.Process}', 5608)" style="color:${i}";>${n}</a>`:`<a href="javascript:;" class="target" index="${o.PId}" tid="${o.TaskOrderId}" time="${u.ProcessTime}" product="${o.Product}" process="${r.Process}" style="color:${i}">${n}</a>`:`${n}`;return`${n}<td class="bg-green">${c(s)}</td>
                                <td>${l(h,"black")}</td>`},""),h=o.Put,c=o.Target;i[u]=(i[u]>>0)+h;e[u]=(e[u]>>0)+c;const a=(n,i="white")=>h>0?t===0?`<a href="javascript: showPmcChildPlanModal(undefined, 0, ${o.TaskOrderId}, ${o.PId}, '${o.Product}', '${r.Process}', 5607)" style="color:${i}";>${n}</a>`:`<a href="javascript:;" class="allPut" index="0" time="undefined" product="${o.Product}" process="${r.Process}" style="color:${i}">${n}</a>`:`${n}`,v=(n,i="white")=>c>0?t===0?`<a href="javascript: showPmcChildPlanModal(undefined, 0, ${o.TaskOrderId}, ${o.PId}, '${o.Product}', '${r.Process}', 5608)" style="color:${i}";>${n}</a>`:`<a href="javascript:;" class="allTarget" index="0" time="undefined" product="${o.Product}" process="${r.Process}" style="color:${i}">${n}</a>`:`<${n}`;return`${n}<tr>
                            <td style="width: 40px">${s+1}</td>
                            <td>${o.TaskOrder}</td>
                            <td>${o.Product}</td>
                            <td>${monthDay(o.DeliveryTime)}</td>
                            <td class="bg-yellow">${a(h)}</td>
                            <td>${v(c,"black")}</td>${l.repeat(f)}
                        </tr>`},""),v=(n,t)=>n.reduce((i,r,u)=>u!=0?i+`<td class="bg-green">${n[u]}</td><td>${t[u]}</td>`.repeat(f):i,`<td  style="width: 40px" class="bg-yellow">${n[u]}</td><td>${t[u]}</td>`),y=(n,t,i=true)=>n.Index>0&&t==0?`<a href="javascript: showPmcChildIndexModal('${n.ProcessTime}', ${n.PId}, '${r.Process}')" ${i?'style="color:white"':""}>${n.Index}</a>`:`${n.Index}`,p=(n,t)=>n.reduce((n,i)=>`${n}<td class="bg-green">${y(i,t)}</td><td>0</td>`,""),s=(n,t,i,u,f)=>{let e=[],o=[],s="",h="",y="";return u.length>0?(s=a(u,i,e,o),h=v(e,o),y=p(c(f,r.Id),i),l(n,t,s,h,y)):""};return t+=`<div class="form-group"><label class="control-label text-red"><strong>工序：${r.Process}</strong></label></div>`,t+=s("pre","当前排程",0,e(i.datas,r.Id),e(i.Indexes,r.Id)),t+s("later","安排后",1,e(n.Put,r.Id),e(n.Indexes,r.Id))},"");$(t).html(o).find("th,td").css("padding","4px").end().find("th,td").css("border","1px solid gray").end().find("th,td").css("width","auto");$("#pmcPreviewProcessBtn").html('<button class="btn btn-primary btn-sm">排产<\/button>').find("button").on("click",()=>{if(!_taskOrders.length)return layer.msg("请先设置待排程任务单各工序数量");showConfirm("排产",()=>{const t={TaskOrders:_taskOrders,Schedule:n.Schedule};myPromise(5605,t,!1,1,()=>{getNotArrangeTaskList(),getArrangeTaskList(),getPmcPreviewParams(!1)})})});$(`${t} .later`).find(".target, .put").off("click").on("click",function(){const t=$(this).attr("index"),n=$(this).attr("time"),i=$(this).attr("tid");showPmcChildPlanModal(n,0,0,0,$(this).attr("product"),$(this).attr("process"),$(this).hasClass("put")?5607:5608,r[i][n][t])});e=dataTableConfig(0);e.fixedHeaderColumn(!0,6,0);$(`${t} .pmcPreviewProcess`).DataTable(e)})}function showPmcProcessPlanModal(n,t,i,r,u){$("#pmcProcessPlanCode").text(r);$("#pmcProcessPlanProcess").text(u);myPromise(5607,{time:n,productId:t,pId:i},!0).then(n=>{const i=n.datas,t=_tablesConfig(!1,i);t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单"},{data:"Put",title:"数量"},{data:null,title:"安排",render:n=>Object.values(n.Arranges).map(n=>"{0}:{1}次".format(n.Item1,n.Item2)).join()}]);t.initComplete=function(){if(this.find("tfoot").remove(),i.length){const n=`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th>${i.reduce((n,t)=>n+t.Put,0)}</th>
                              </tr>
                           </tfoot>`;this.append(n).find("tfoot tr:last th").css("borderTop",0)}};$("#pmcProcessPlanList").DataTable(t);$("#showPmcProcessPlanModal").modal("show")})}function showTaskLevelModel(){getTaskLevelList();$("#showTaskLevelModel").modal("show")}function getTaskLevelList(){_pmcTaskLevelTrs=[];myPromise(5590).then(n=>{const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Level",title:"等级",render:tableSet.input.bind(null,"level")},{data:"Order",title:"顺序",render:tableSet.input.bind(null,"order")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_pmcTaskLevelTrs,(n,t)=>{n.find(".level").val(t.Level),n.find(".order").val(t.Order),n.find(".remark").val(t.Remark)})};$("#pmcTaskLevelList").DataTable(t)})}function getTaskLevelTrInfo(n,t){const i=n.find(".level").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("等级不能为空");const r=n.find(".order").val().trim().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("顺序不能为空");const u={Level:i,Order:r,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateTaskLevel(){updateTableRow(_pmcTaskLevelTrs,getTaskLevelTrInfo,5591,getTaskLevelList)}function showAddTaskLevelModel(){const t={Level:"",Order:"",Remark:""},n=_tablesConfig(!1,[t]);n.columns=n.columns.concat([{data:"Level",title:"等级",render:tableSet.addInput.bind(null,"level","auto")},{data:"Order",title:"顺序",render:tableSet.addInput.bind(null,"order","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);$("#addTaskLevelList").DataTable(n);$("#addTaskLevelListBtn").off("click").on("click",()=>addDataTableTr("#addTaskLevelList",t));$("#showAddTaskLevelModel").modal("show")}function addTaskLevel(){addTableRow("#addTaskLevelList",getTaskLevelTrInfo,5592,()=>{$("#showAddTaskLevelModel").modal("hide"),getTaskLevelList()})}function delTaskLevel(){delTableRow(_pmcTaskLevelTrs,5593,getTaskLevelList)}function getPmcPersonList(){const n={condition:$("#pmcPersonQueryTF").val()},t=$("#pmcPersonQueryMode").val();n[t]=["number","name"].includes(t)?$("#pmcPersonQueryInput").val().trim():$("#pmcPersonQuerySelect").val();const i=myPromise(5500,n,!0),r=myPromise(5510,{menu:!0},!0),u=myPromise(5030,{menu:!0},!0);Promise.all([i,r,u]).then(n=>{_pmcPersonTrs=[];const t=_tablesConfig(!0,n[0].datas);t.columns=t.columns.concat([{data:"StateStr",title:"状态",render:tableSet.select.bind(null,tableSet.stateOps,"state")},{data:"Number",title:"编号"},{data:"Name",title:"姓名"},{data:"Level",title:"等级",render:tableSet.select.bind(null,setOptions(n[1].datas,"Level"),"level")},{data:"Process",title:"工序",render:tableSet.select.bind(null,setOptions(n[2].datas,"Process"),"process")},{data:"Priority",title:"优先级",render:tableSet.input.bind(null,"priority")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_pmcPersonTrs,(n,t)=>{n.find(".state").val(t.State),n.find(".level").val(t.LevelId),n.find(".process").val(t.ProcessId),n.find(".priority").val(t.Priority),n.find(".remark").val(t.Remark)})};$("#pmcPersonList").DataTable(t)})}function getPmcPersonTrInfo(n,t){let i;if(t){const t=n.find(".name"),r=t.find("option[disabled]");r.prop("disabled",!1);const u=t.val();if(r.prop("disabled",!0),isStrEmptyOrUndefined(u))return void layer.msg("请选择员工");i={UserId:u,State:1}}else{const t=n.find(".state").val();if(isStrEmptyOrUndefined(t))return void layer.msg("请选择状态");i={State:t,Id:n.find(".isEnable").val()>>0}}const r=n.find(".level").val();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择等级");i.LevelId=r;const u=n.find(".process").val();return isStrEmptyOrUndefined(u)?void layer.msg("请选择工序"):(i.ProcessId=u,i.Priority=n.find(".priority").val()>>0,i.Remark=n.find(".remark").val(),i)}function updatePmcPerson(){updateTableRow(_pmcPersonTrs,getPmcPersonTrInfo,5501,getPmcPersonList)}function showAddPmcPersonModel(){const n=myPromise(5500,{menu:!0,add:!0},!0),t=myPromise(5510,{menu:!0},!0),i=myPromise(5030,{menu:!0},!0);Promise.all([n,t,i]).then(n=>{const i={Name:"",Level:"",Process:"",Priority:0,Remark:""},t=_tablesConfig(!1,[i]);t.columns=t.columns.concat([{data:"Name",title:"员工姓名",render:tableSet.addSelect.bind(null,setOptions(n[0].datas,"Name"),"name")},{data:"Level",title:"等级",render:tableSet.addSelect.bind(null,setOptions(n[1].datas,"Level"),"level")},{data:"Process",title:"工序",render:tableSet.addSelect.bind(null,setOptions(n[2].datas,"Process"),"process")},{data:"Priority",title:"优先级",render:tableSet.addInput.bind(null,"priority","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:()=>'<button class="btn btn-danger btn-xs del-btn"><i class="fa fa-minus"><\/i><\/button>'}]);t.createdRow=n=>$(n).find(".name").val(0);$("#addPmcPersonList").DataTable(t);$("#addPmcPersonListBtn").prop("disabled",n[0].datas.length<=$("#addPmcPersonList").DataTable().column(1).nodes().length);$("#addPmcPersonListBtn").off("click").on("click",function(){addDataTableTr("#addPmcPersonList",i);disabledPmcPerson();n[0].datas.length===$("#addPmcPersonList").DataTable().column(1).nodes().length&&$(this).prop("disabled",!0)});$("#showAddPmcPersonModel").modal("show")})}function disabledPmcPerson(){const n=$($("#addPmcPersonList").DataTable().columns(1).nodes()[0]).find(".name");disabledProcessCodeCommon(n)}function addPmcPerson(){addTableRow("#addPmcPersonList",getPmcPersonTrInfo,5502,()=>{$("#showAddPmcPersonModel").modal("hide"),getPmcPersonList()})}function delPmcPerson(){delTableRow(_pmcPersonTrs,5503,getPmcPersonList)}function showPmcGradeModal(){getPmcGradeList();$("#showPmcGradeModal").modal("show")}function getPmcGradeList(){myPromise(5510).then(n=>{_pmcGradeTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"Level",title:"等级",render:tableSet.input.bind(null,"level")},{data:"Order",title:"顺序",render:tableSet.input.bind(null,"order")},{data:"Remark",title:"备注",render:tableSet.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_pmcGradeTrs,(n,t)=>{n.find(".level").val(t.Level),n.find(".remark").val(t.Remark)})};$("#pmcGradeList").DataTable(t)})}function getPmcGradeTrInfo(n,t){const i=n.find(".level").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("等级不能为空");const r=n.find(".order").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("顺序不能为空");const u={Level:i,Order:r>>0,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updatePmcGrade(){updateTableRow(_pmcGradeTrs,getPmcGradeTrInfo,5511,getPmcGradeList)}function addPmcGradeModel(){const t={Level:"",Order:"",Remark:""},n=_tablesConfig(!1,[t]);n.columns=n.columns.concat([{data:"Level",title:"等级",render:tableSet.addInput.bind(null,"level","auto")},{data:"Order",title:"顺序",render:tableSet.addInput.bind(null,"order","auto")},{data:"Remark",title:"备注",render:tableSet.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:tableSet.delBtn}]);$("#addPmcGradeList").DataTable(n);$("#addPmcGradeListBtn").off("click").on("click",()=>addDataTableTr("#addPmcGradeList",t));$("#addPmcGradeModel").modal("show")}function addPmcGrade(){addTableRow("#addPmcGradeList",getPmcGradeTrInfo,5512,()=>{$("#addPmcGradeModel").modal("hide"),getPmcGradeList(),getPmcPersonList()})}function delPmcGrade(){delTableRow(_pmcGradeTrs,5513,()=>{getPmcGradeList(),getPmcPersonList()})}function getFlowCardList(){let n=$("#sendCardSTime").val().trim();if(isStrEmptyOrUndefined(n))return layer.msg("请选择发卡开始时间");let t=$("#sendCardETime").val().trim();if(isStrEmptyOrUndefined(t))return layer.msg("请选择发卡结束时间");if(compareDate(n,t))return layer.msg("结束时间不能小于开始时间");n+=" 00:00:00";t+=" 23:59:59";const i=$("#flowCardTaskOrderSelect").val();if(isStrEmptyOrUndefined(i))return layer.msg("请选择任务单");const r=$("#flowCardPlanSelect").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择计划号");myPromise(5110,{startTime:n,endTime:t,taskOrderId:i,productId:r},!0).then(n=>{_flowCardTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"CreateTime",title:"发卡时间"},{data:"FlowCard",title:"流程卡"},{data:"ProcessCode",title:"流程编号"},{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:"Batch",title:"预计工时"},{data:"Id",title:"流程详情",render:n=>`<button class="btn btn-info btn-sm" onclick="showProcessFlowCardIdModal(${n})">查看</button>`},{data:"Remark",title:"备注"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_flowCardTrs)};$("#flowCardList").DataTable(t)})}function showProcessFlowCardIdModal(n){myPromise(5150,{flowCardId:n},!0).then(n=>{const t=_tablesConfig(!1,n.datas);t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:"Processor",title:"加工人"},{data:"DeviceCode",title:"加工设备"},{data:null,title:"最后完成时间",render:tableSet.endFinishTime},{data:"Progress",title:"进度",render:tableSet.progress},{data:"Count",title:"加工次数"},{data:"Before",title:"加工前数量"},{data:"Left",title:"剩余数量"},{data:"Qualified",title:"合格数"},{data:"Unqualified",title:"不合格数"},{data:"Before",title:"产量"}]);$("#processFlowCardIdList").DataTable(t);$("#showProcessFlowCardIdModal").modal("show")})}function showProcessDetail(n){myPromise(5060,{qId:n},!0).then(n=>{const i=n.datas[0],r=i.ProductProcesses,t={};r.forEach(n=>{const i=n.ProcessCodeId;t[i]?t[i].push(n):t[i]=[n]});$("#processDetailCodeSelect").off("change").on("change",function(){const i=$(this).val(),n=_tablesConfig(!1,t[i]);n.columns=n.columns.concat([{data:"Process",title:"流程"},{data:"ProcessRepeat",title:"可否返工",render:tableSet.isReworkText},{data:"ProcessNumber",title:"单台加工数量"},{data:null,title:"工艺数据",render:()=>'<button class="btn btn-info btn-sm look-btn">查看<\/button>'}]);n.createdRow=(n,t)=>$(n).find(".look-btn")[0].ProcessData=JSON.parse(t.ProcessData);$("#processDetailList").DataTable(n)});$("#processDetailCodeSelect").html(getPlanToProcessCodeOps(i)).trigger("change");$("#showProcessDetailModal").modal("show")})}function getPlanToProcessCodeOps(n){const t=n.ProcessCodes?n.ProcessCodes.split(","):[],i=n.ProcessCodeIds?n.ProcessCodeIds.split(","):[],r=i.map((n,i)=>({Id:n,ProcessCode:t[i]}));return setOptions(r,"ProcessCode")}function selectTaskOrder(n){const t=$("#addFlowCardProcessList");t.html()&&(t.DataTable().destroy().clear(),t.empty());$("#addFlowCardWorkNum").val("");$("#addFlowCardCardNum").val("");$("#addFlowCardTarget").text(n.Target);$("#addFlowCardLeft").text(n.Left);$("#addFlowCardDoing").text(n.Doing);$("#addFlowCardIssue").text(n.Issue);$("#addFlowCardPlan").text(n.Product);$("#addFlowCardTime").text(n.DeliveryTime.split(" ")[0]);$("#processCodeLookBtn").val(n.ProductId);const i=n.ProductId;myPromise(5060,{qId:i},!0).then(n=>$("#addFlowCardProcessCodeSelect").html(getPlanToProcessCodeOps(n.datas[0])).trigger("change"))}function addFlowCardModel(){const n=myPromise(5090),t=myPromise(5e3);Promise.all([n,t]).then(n=>{const t=n[0].datas;$("#addFlowCardTaskOrderSelect").html(setOptions(t,"TaskOrder"));$("#addFlowCardPersonSelect").html(setOptions(n[1].datas,"Account"));selectTaskOrder(t[0])});$("#addFlowCardModel").modal("show")}function addFlowCardProcessCodeLook(){const n=$(this).val();showProcessDetail(n)}function addFlowCardPreview(){let n=$("#addFlowCardWorkNum").val()>>0;if(isStrEmptyOrUndefined(n))return layer.msg("请输入加工数量");const t=$("#addFlowCardCardNum").val()>>0;if(isStrEmptyOrUndefined(t))return layer.msg("请输入单卡数量");const u=$("#addFlowCardProcessCodeSelect").val();if(isStrEmptyOrUndefined(u))return layer.msg("请选择流程编号");const e=$("#addFlowCardProcessCodeSelect :selected").text(),r=$("#addFlowCardPersonSelect").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择加个人");const o=$("#addFlowCardPersonSelect").html(),f=[];do f.push({FlowCard:"",Number:n>=t?t:n,ProcessCode:e,PersonId:r});while((n-=t)>0);const i=_tablesConfig(!1,f);i.columns=i.columns.concat([{data:"FlowCard",title:"流程卡号"},{data:"Number",title:"加工数量",render:tableSet.addInput.bind(null,"number","auto")},{data:"ProcessCode",title:"流程编号",render:n=>`<span codeid="${u}">${n}</span>`},{data:"PersonId",title:"加工人",render:tableSet.addSelect.bind(null,o,"person")}]);i.createdRow=n=>$(n).find(".person").val(r);$("#addFlowCardProcessList").DataTable(i)}function addFlowCard(){if(!$("#addFlowCardProcessList").html())return layer.msg("请预览之后再生成");const n=$("#addFlowCardTaskOrderSelect").val();if(isStrEmptyOrUndefined(n))return layer.msg("请选择任务单");const t=[],i=i=>{const r=i.find(".person").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择加工人");t.push(i.find(".person :selected").text());const u=i.find(".number").val().trim()>>0;if(isStrEmptyOrUndefined(u))return layer.msg("请输入加工数量");return{TaskOrderId:n,ProcessCodeId:i.find("[codeid]").attr("codeid"),ProcessorId:r,Number:u,Remark:"string"}},r=$("#addFlowCardProcessList [codeid]:first").text();addTableRow("#addFlowCardProcessList",i,5112,n=>{const u=n.FlowCards.map((n,i)=>({FlowCard:n.FlowCard,Number:n.Number,ProcessCode:r,PersonId:t[i]})),i=_tablesConfig(!1,u);i.columns=i.columns.concat([{data:"FlowCard",title:"流程卡号"},{data:"Number",title:"加工数量"},{data:"ProcessCode",title:"流程编号"},{data:"PersonId",title:"加工人"}]);$("#addFlowCardProcessList").DataTable(i)})}function flowCardPrint(){const n=$("#addFlowCardProcessList");if(!(n.html()&&!n.find("input").length))return layer.msg("生成成功后才能打印");const t=Array.from(getDataTableRow("#addFlowCardProcessList")).reduce((n,t)=>`${n}${$(t).prop("outerHTML")}`,""),i=`<table border="1" style="width:100%;text-align:center;border-collapse:collapse">${"<thead><tr><th>序号<\/th><th>流程卡号<\/th><th>加工数量<\/th><th>流程编号<\/th><th>加工人<\/th><\/tr><\/thead>"}<tbody>${t}</tbody></table>`;printCode(i)}function delFlowCard(){delTableRow(_flowCardTrs,5113,getFlowCardList)}const tableSet=_tableSet();let _personTrs=null;let _deviceTrs=null;let _deviceCategoryTrs=null;let _deviceModelTrs=null;let _processCodeTrs=null;let _processCodeCategoryTrs=null;let _processOpTrs=null;let _planTrs=null;let _planProcessCodeInfo=null;let _capacityTrs=null;let _capacityDetailList=null,_capacityDetailListType=-1,capacityId=-1,currentCategoryId=-1;let _workOrderTrs=null;let _taskOrderTrs=null;let _capacityNeed=[],_capacityNeedCurrentTaskId=0,_capacityNeedCurrentPId=0;let _capacityTaskProcessListInit=!1,_capacityTaskDetailList=null,_capacityTaskDeviceTrs=null,_capacityTaskOperatorTrs=null;let _capacityTasks=null;let _pmcPreviewParams={};let _arrangeTask=null;let _taskOrders=[];let _pmcTaskLevelTrs=null;let _pmcPersonTrs=null;let _pmcGradeTrs=null;let _flowCardTrs=null;