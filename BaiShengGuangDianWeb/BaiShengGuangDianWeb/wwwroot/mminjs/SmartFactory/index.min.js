function pageReady(){getProductionLine();$("#personNavLi").one("click",getPersonList);$("#deviceNavLi").one("click",getDeviceList);$("#flowNavLi").one("click",getProcessCodeList);$("#processSetNavLi").one("click",getProcessOpList);$("#planNavLi").one("click",getPlanList);$("#workOrderNavLi").one("click",getWorkOrderList);$("#taskOrderNavLi").one("click",getTaskOrderList);$("#flowCardNavLi").one("click",()=>{$("#sendCardSTime,#sendCardETime").val(getDate()).datepicker("update");const n=myPromise(5090),t=myPromise(5040),i=myPromise(5060);Promise.all([n,t,i]).then(n=>{const t='<option value="0">所有<\/option>';$("#flowCardTaskOrderSelect").html(`${t}${setOptions(n[0],"TaskOrder")}`);$("#flowCardProcessCodeSelect").html(`${t}${setOptions(n[1],"Code")}`);$("#flowCardPlanSelect").html(`${t}${setOptions(n[2],"Product")}`);getFlowCardList()})});$("#addProcessCodeBody,#addProcessCodeCategoryBody").on("click",".upTr",function(){const n=$(this).parents("tr"),t="#"+$(this).parents("tbody").attr("id"),i=n.prev();i.before(n);setAddProcessOpList(t)});$("#addProcessCodeBody,#addProcessCodeCategoryBody").on("click",".delBtn",function(){const n="#"+$(this).parents("tbody").attr("id");$(this).parents("tr").remove();setAddProcessOpList(n)});$("#planProcessCodeList").on("change",".process-code-select",function(){const r=$(this).val(),n=_planProcessCodeInfo[r];$(this).siblings(".process-code-category").text(`类型：${n.Category}`);const u=n.List?n.List.split(","):[],f=n.Processes?n.Processes.split(","):[],e=u.map((t,i)=>({ProcessId:t,Process:f[i],ProcessNumber:0,ProcessCodeId:n.Id})),t=_tablesConfig(!1,e),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:null,title:"可否返工",render:i.isRework},{data:"ProcessNumber",title:"单台加工数量",render:i.addInput.bind(null,"processNumber","auto")},{data:null,title:"工艺数据",render:i.setBtn}]);$(this).closest(".temp").find(".process-table").DataTable(t);disabledProcessCode()});$("#planProcessCodeList").on("click",".browse-btn",function(){myPromise(5040).then(n=>{const t=_tablesConfig(!1,n,0),i=_tableSet();t.columns=t.columns.concat([{data:"Code",title:"编号"},{data:"Category",title:"类型"},{data:"Processes",title:"流程详情",render:i.processDetail},{data:"Remark",title:"备注"}]);$("#browseProcessCodeList").DataTable(t);$("#browseProcessCodeModel").modal("show")})});$("#planProcessCodeList").on("click",".del-btn",function(){$(this).closest(".temp").remove();disabledProcessCode();$("#addPlanProcessList").prop("disabled",!1)});$("#planProcessCodeList").on("click",".set-btn",function(){const i=this.ProcessData?this.ProcessData.map(n=>({addPressM:n[0],addPressS:n[1],workM:n[2],workS:n[3],setPress:n[4],rotate:n[5]})):[],t=_tablesConfig(!1,i),n=_tableSet();t.columns=t.columns.concat([{data:"addPressM",title:"加压时间（M）",render:n.addInput.bind(null,"addPressM","auto")},{data:"addPressS",title:"加压时间（S）",render:n.addInput.bind(null,"addPressS","auto")},{data:"workM",title:"工序时间（M）",render:n.addInput.bind(null,"workM","auto")},{data:"workS",title:"工序时间（S）",render:n.addInput.bind(null,"workS","auto")},{data:"setPress",title:"设定压力（Kg）",render:n.addInput.bind(null,"setPress","auto")},{data:"rotate",title:"下盘速度（rpm）",render:n.addInput.bind(null,"rotate","auto")},{data:null,title:"删除",render:()=>'<button class="btn btn-danger btn-xs del-btn"><i class="fa fa-minus"><\/i><\/button>'}]);$("#setCraftList").DataTable(t);$("#addCraftTrBtn").prop("disabled",getDataTableRow("#setCraftList").length===8);$("#setCraftModel").modal("show");$("#addCraftBtn").off("click").on("click",()=>{const n=getDataTableRow("#setCraftList");if(!n.length){layer.msg("请先设置数据再添加");return}const t=Array.from(n).map(n=>{const t=$(n),i=t.find(".addPressM").val()>>0||0,r=t.find(".addPressS").val()>>0||0,u=t.find(".workM").val()>>0||0,f=t.find(".workS").val()>>0||0,e=t.find(".setPress").val()>>0||0,o=t.find(".rotate").val()>>0||0;return[i,r,u,f,e,o]});this.ProcessData=t;layer.msg("工艺设置成功");$("#setCraftModel").modal("hide")})});$("#setCraftList").on("click",".del-btn",function(){$("#addCraftTrBtn").prop("disabled",!1);delDataTableTr.call(this)});$("#addCraftTrBtn").on("click",function(){addDataTableTr("#setCraftList",{addPressM:0,addPressS:0,workM:0,workS:0,setPress:0,rotate:0});getDataTableRow("#setCraftList").length===8&&$(this).prop("disabled",!0)});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList").on("input","input",function(){onInput(this,3,0)});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList").on("focus","input",function(){$(this).val().trim()==0&&$(this).val("")});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList").on("blur","input",function(){isStrEmptyOrUndefined($(this).val().trim())&&$(this).val(0)});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("input",".target",function(){onInput(this,3,0)});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("focus",".target",function(){$(this).val().trim()==0&&$(this).val("")});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("blur",".target",function(){isStrEmptyOrUndefined($(this).val().trim())&&$(this).val(0)});$("#addTaskOrderList").on("change",".workOrder",function(){const n=$(this).val();myPromise(5070,{qId:n},!0).then(n=>{const t=n[0];$(this).closest("td").next().text(t.Target).next().text(t.Left).next().text(t.Doing).nextAll().find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update")})});$("#taskOrderSelect").on("change",function(){const n=$(this).val();myPromise(5090,{qId:n},!0).then(n=>{const t=n[0];$("#taskOrderTarget").text(t.Target);$("#taskOrderIssueCount").text(t.IssueCount);$("#taskOrderIssue").text(t.Issue);$("#taskOrderDoingCount").text(t.DoingCount);$("#taskOrderDoneCount").text(t.DoneCount)})});$("#processDetailList").on("click",".look-btn",function(){const t=this.ProcessData.map(n=>({addPressM:n[0],addPressS:n[1],workM:n[2],workS:n[3],setPress:n[4],rotate:n[5]})),n=_tablesConfig(!1,t);n.columns=n.columns.concat([{data:"addPressM",title:"加压时间（M）"},{data:"addPressS",title:"加压时间（S）"},{data:"workM",title:"工序时间（M）"},{data:"workS",title:"工序时间（S）"},{data:"setPress",title:"设定压力（Kg）"},{data:"rotate",title:"下盘速度（rpm）"}]);$("#craftDetailList").DataTable(n);$("#showCraftDetailModal").modal("show")});$("#addFlowCardTaskOrderSelect").on("change",function(){const n=$(this).val();myPromise(5090,{qId:n},!0).then(n=>selectTaskOrder(n[0]))});$("#addFlowCardProcessCodeSelect").on("change",function(){const n=$(this).val();n?myPromise(5040,{qId:n},!0).then(n=>{const t=n[0];$("#addFlowCardType").text(t.Category);$("#addFlowCardProcessDetail").text(t.Processes.replace(/,/g," > "))}):($("#addFlowCardType").text(""),$("#addFlowCardProcessDetail").text(""))});$("#showMode").on("change",getProductionLine);$("#productionLineList").on("click",".show-task-btn",function(n){const t=$(this).val();myPromise(5250,{workOrderId:t},!0).then(n=>{const t=_tablesConfig(!1,n),i=_tableSet();t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"流程卡",render:n=>`<button class="btn btn-info btn-sm show-flow-btn" value="${n}">查看</button>`}]);$("#taskDetailList").DataTable(t);$("#showTaskDetailModal").modal("show")});n.stopPropagation()});$("#productionLineList").on("click",".work-order",function(){getLineCommon.call(this,5201,getWorkLine);const n=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"WorkOrder",title:"工单"},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},t=$(this).attr("value"),i=()=>{myPromise(5204,{workOrderId:t},!0).then(t=>{processWarningDangerTemp("warning",`报警工单（${t.length}）`);$("#warningLineBox .refresh").on("click",i);$("#warningLineBox table").DataTable(n(t,"报警时间","报警信息"))})},r=()=>{myPromise(5205,{workOrderId:t},!0).then(t=>{processWarningDangerTemp("danger",`中断工单（${t.length}）`);$("#dangerLineBox .refresh").on("click",r);$("#dangerLineBox table").DataTable(n(t,"中断时间","原因"))})};i();r()});$("#productionLineList").on("click",".task-order",function(){getLineCommon.call(this,5251,getTaskLine);const n=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"TaskOrder",title:"任务单"},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},t=$(this).attr("value"),f=$(this).attr("work"),i=()=>{myPromise(5251,{qId:f},!0).then(n=>{processWarningDangerTemp("success",`标准工序（${n.length?n[0].Processes.length:0}）`);$("#successLineBox .refresh").on("click",i);const t=_tablesConfig(!1,n.length?n[0].Processes:[]),r=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:null,title:"最后完成时间",render:r.endFinishTime},{data:"Progress",title:"进度",render:r.progress},{data:"Qualified",title:"加工次数"},{data:"Before",title:"产量"}]);$("#successLineBox table").DataTable(t)})},r=()=>{myPromise(5254,{taskOrderId:t},!0).then(t=>{processWarningDangerTemp("warning",`报警工单（${t.length}）`);$("#warningLineBox .refresh").on("click",r);$("#warningLineBox table").DataTable(n(t,"报警时间","报警信息"))})},u=()=>{myPromise(5255,{taskOrderId:t},!0).then(t=>{processWarningDangerTemp("danger",`中断工单（${t.length}）`);$("#dangerLineBox .refresh").on("click",u);$("#dangerLineBox table").DataTable(n(t,"中断时间","原因"))})};i();r();u()});$("#productionLineList").on("click",".flow-card",function(){getLineCommon.call(this,5301,getFlowCardLine);const t=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},n=$(this).attr("value"),i=()=>{myPromise(5150,{flowCardId:n},!0).then(n=>{processWarningDangerTemp("success",`流程卡工序（${n.length}）`);$("#successLineBox .refresh").on("click",i);const t=_tablesConfig(!1,n),r=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:null,title:"最后完成时间",render:r.endFinishTime},{data:"Progress",title:"进度",render:r.progress},{data:"Count",title:"加工次数"},{data:"Before",title:"产量"}]);$("#successLineBox table").DataTable(t)})},r=()=>{myPromise(5304,{flowCardId:n},!0).then(n=>{processWarningDangerTemp("warning",`报警工单（${n.length}）`);$("#warningLineBox .refresh").on("click",r);$("#warningLineBox table").DataTable(t(n,"报警时间","报警信息"))})},u=()=>{myPromise(5305,{flowCardId:n},!0).then(n=>{processWarningDangerTemp("danger",`中断工单（${n.length}）`);$("#dangerLineBox .refresh").on("click",u);$("#dangerLineBox table").DataTable(t(n,"中断时间","原因"))})};i();r();u()});$("#taskDetailList,#productionLineList").on("click",".show-flow-btn",function(n){const t=$(this).val();myPromise(5300,{taskOrderId:t},!0).then(n=>{const t=_tablesConfig(!1,n),i=_tableSet();t.columns=t.columns.concat([{data:"CreateTime",title:"发出日期"},{data:"FlowCard",title:"流程卡号"},{data:"Process",title:"当前工序"},{data:null,title:"状态",render:i.state},{data:"Progress",title:"进度",render:i.progress}]);$("#flowDetailList").DataTable(t);$("#showFlowDetailModal").modal("show")});n.stopPropagation()});$("#addCapacityList").on("change",".process",function(){const n=$(this).val(),t=_planProcessCodeInfo[n];$(this).parent().next().text(t.DeviceCategory)})}function myPromise(n,t,i=false,r=1){const u={opType:n};return t&&(u.opData=JSON.stringify(t)),i&&(t=!t),new Promise(n=>{ajaxPost("/Relay/Post",u,i=>{if(t)layer.msg(i.errmsg),i.errno==0&&n(i);else{if(i.errno!=0)return layer.msg(i.errmsg);n(i.datas)}},r)})}function _tablesConfig(n,t,i=1){const r={dom:'<"pull-left"l><"pull-right"f>rt<"col-sm-5"i><"col-sm-7"p>',bAutoWidth:!1,destroy:!0,paging:!0,searching:n,ordering:n,data:t,aaSorting:[[i,"asc"]],aLengthMenu:[20,40,60],iDisplayLength:20,language:oLanguage,columns:[{data:null,title:"序号",render:_tableSet().order,sWidth:"25px"}]};return n&&r.columns.unshift({data:null,title:"",render:_tableSet().isEnable,orderable:!1,sWidth:"80px"}),r}function _tableSet(){return{order:(n,t,i,r)=>r.row+1,isEnable:n=>`<input type="checkbox" class="icb_minimal isEnable" value="${n.Id}">`,input:(n,t)=>`<span class="textOn">${t}</span><input type="text" class="form-control text-center textIn ${n} hidden" maxlength="20" style="min-width:120px;width:${n==="remark"?"100%":"auto"}" value=${t}>`,addInput:(n,t,i)=>`<input type="text" class="form-control text-center ${n}" style="margin:auto;min-width:120px;width:${t}", value="${i}">`,select:(n,t,i)=>`<span class="textOn">${i}</span><select class="form-control hidden textIn ${t}" style="min-width:120px">${n}</select>`,addSelect:(n,t)=>`<select class="form-control ${t}" style="min-width:120px">${n}</select>`,updateBtn:(n,t)=>`<button class="btn btn-success btn-xs" onclick="${n}.call(this)" value="${t}">修改</button>`,delBtn:()=>`<button class="btn btn-danger btn-xs" onclick="delDataTableTr.call(this)"><i class="fa fa-minus"></i></button>`,addBtn:n=>`<button class="btn btn-success btn-xs" onclick="${n}.call(this)"><i class="fa fa-plus"></i></button>`,setBtn:()=>'<button class="btn btn-primary btn-sm set-btn">设置<\/button>',detailBtn:(n,t)=>`<button class="btn btn-info btn-sm" onclick="${n}.call(this)" value="${t}">查看</button>`,processDetail:n=>n.replace(/,/g," > "),isRework:()=>'<select class="form-control isRework" style="width:100px"><option value="0">否<\/option><option value="1">是<\/option><\/select>',isReworkText:n=>n?"是":"否",day:(n,t)=>`<span class="textOn">${t.split(" ")[0]}</span><input type="text" class="pointer textIn hidden form_date form-control text-center ${n}" style="min-width: 100px">`,addDay:(n,t)=>`<input type="text" class="pointer form_date form-control text-center ${n}" value="${t.split(" ")[0]}" style="min-width: 100px">`,state:n=>{return`<span style="color:${["#CCCCCC","#ff9933","#ff33cc","black","black","#FF0000"][n.State]}">${n.StateStr}</span>`},delivery:n=>{let t="black";return new Date(n)-new Date(getFullTime())<2592e5&&(t="red"),`<span style="color:${t}">${n.split(" ")[0]}</span>`},progress:n=>`${n}%`,endFinishTime:n=>n.State===4?n.EndTime:_tableSet().state(n)}}function addDataTableTr(n,t){$(n).DataTable().row.add(t).draw(!1)}function delDataTableTr(){const n=$(this).parents("tr")[0],i=$(n).find("td:first").text()>>0,r=$(n).parents("table").prop("id"),t=$(`#${r}`).DataTable();t.row(n).remove().draw(!1);t.column(0).nodes().each(n=>{const t=$(n).text()>>0;t>i&&$(n).text(t-1)})}function getDataTableRow(n){return $(n).DataTable().rows().nodes()}function initCheckboxAddEvent(n,t){const i=this.api();$(this).find(".isEnable").iCheck({handle:"checkbox",checkboxClass:"icheckbox_minimal-blue",increaseArea:"20%"}).on("ifChanged",function(){const r=$(this).parents("tr"),u=r[0];$(this).is(":checked")?(n.push(u),t&&(t(r,i.row(u).data()),r.find(".textOn").addClass("hidden").siblings(".textIn").removeClass("hidden"))):(n.splice(n.indexOf(u),1),t&&r.find(".textIn").addClass("hidden").siblings(".textOn").removeClass("hidden"))})}function delTableRow(n,t,i){if(!n.length)return layer.msg("请选择需要删除的数据");const r=[];n.forEach(n=>{const t=$(n);r.push(t.find(".isEnable").val()>>0)});showConfirm("删除所选项",()=>myPromise(t,{ids:r}).then(i))}function addTableRow(n,t,i,r){const f=[],u=getDataTableRow(n);if(!u.length){layer.msg("请先设置数据再添加");return}for(let n=0,i=u.length;n<i;n++){const i=t($(u[n]),!0);if(!i)return;f.push(i)}myPromise(i,f).then(r)}function updateTableRow(n,t,i,r){if(!n.length){layer.msg("请选择需要修改的数据");return}const u=[];for(let i=0,r=n.length;i<r;i++){const r=t($(n[i]),!1);if(!r)return;u.push(r)}myPromise(i,u).then(r)}function initDayTime(n){$(n).find(".form_date").attr("readonly",!0).datepicker({language:"zh-CN",format:"yyyy-mm-dd",maxViewMode:2,todayBtn:"linked",autoclose:!0})}function showScheduleModal(){myPromise(5401).then(n=>{const t=_tablesConfig(!1,n),i=_tableSet();t.columns=t.columns.concat([{data:"Code",title:"设备"},{data:"FlowCard",title:"流程卡"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress}]);$("#scheduleList").DataTable(t);$("#showScheduleModal").modal("show")})}function getProductionLine(){clearInterval($("#productionLineList")[0].time);$("#lineBox,#productionLineHead,#warningBox,#dangerBox,#successLineBox,#warningLineBox,#dangerLineBox").empty();const n=$("#showMode").val();[workWarningList,taskWarningList,flowWarningList][n]();[workDangerList,taskDangerList,flowDangerList][n]();myPromise([5200,5250,5300][n]).then(t=>{const r=_tablesConfig(!1,t,0),i=_tableSet(),u=[{data:"WorkOrder",title:"工单"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"任务单",render:n=>`<button class="btn btn-info btn-sm show-task-btn" value="${n}">查看</button>`},{data:"Id",title:"",visible:!1}],f=[{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"流程卡",render:n=>`<button class="btn btn-info btn-sm show-flow-btn" value="${n}">查看</button>`}],e=[{data:"CreateTime",title:"发出日期"},{data:"FlowCard",title:"流程卡号"},{data:"Process",title:"当前工序"},{data:null,title:"状态",render:i.state},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"",visible:!1}];r.columns=r.columns.concat([u,f,e][n]);const o=["work-order","task-order","flow-card"][n];r.createdRow=(t,i)=>{$(t).addClass(`pointer ${o}`).attr("value",i.Id),n==1&&$(t).attr("work",i.WorkOrderId)};$("#productionLineList").DataTable(r)})}function workWarningList(){myPromise(5202).then(n=>{const t=warningDangerCount(n,"WorkOrder");warningDangerTemp("warning",`报警工单（${t.count}）`,"<th>工单<\/th><th>报警次数<\/th>",t.tbody,"workWarningList")})}function workDangerList(){myPromise(5203).then(n=>{const t=warningDangerCount(n,"WorkOrder");warningDangerTemp("danger",`中断工单（${t.count}）`,"<th>工单<\/th><th>中断次数<\/th>",t.tbody,"workDangerList")})}function taskWarningList(){myPromise(5252).then(n=>{const t=warningDangerCount(n,"TaskOrder");warningDangerTemp("warning",`报警任务单（${t.count}）`,"<th>任务单<\/th><th>报警次数<\/th>",t.tbody,"taskWarningList")})}function taskDangerList(){myPromise(5253).then(n=>{const t=warningDangerCount(n,"TaskOrder");warningDangerTemp("danger",`中断任务单（${t.count}）`,"<th>任务单<\/th><th>中断次数<\/th>",t.tbody,"taskDangerList")})}function flowWarningList(){myPromise(5302).then(n=>{const t=warningDangerCount(n,"FlowCard");warningDangerTemp("warning",`报警流程卡（${t.count}）`,"<th>流程卡<\/th><th>报警次数<\/th>",t.tbody,"flowWarningList")})}function flowDangerList(){myPromise(5303).then(n=>{const t=warningDangerCount(n,"FlowCard");warningDangerTemp("danger",`中断流程卡（${t.count}）`,"<th>流程卡<\/th><th>中断次数<\/th>",t.tbody,"flowDangerList")})}function warningDangerCount(n,t){let i=0,r="";return n.forEach(n=>{i+=n.Count,r+=`<tr><td>${n[t]}</td><td>${n.Count}</td></tr>`}),{count:i,tbody:r}}function warningDangerTemp(n,t,i,r,u){const f=`<div class="panel panel-${n}">
                        <div class="panel-heading">
                            <span class="glyphicon glyphicon-refresh pull-right pointer text-bold" aria-hidden="true" title="刷新" onclick="${u}()"></span>
                            <h3 class="panel-title text-center">${t}</h3>
                        </div>
                        <div class="panel-body">
                            <div class="table-responsive">
                                <table class="table table-hover table-striped">
                                    <thead><tr>${i}</tr></thead>
                                    <tbody>${r}</tbody>
                                </table>
                            </div>
                        </div>
                    </div>`;$(`#${n}Box`).html(f)}function processWarningDangerTemp(n,t){const i=`<div class="panel panel-${n}">
                        <div class="panel-heading">
                            <span class="glyphicon glyphicon-refresh pull-right pointer text-bold refresh" aria-hidden="true" title="刷新"></span>
                            <h3 class="panel-title text-center">${t}</h3>
                        </div>
                        <div class="panel-body">
                            <div class="table-responsive mailbox-messages">
                                <table class="table table-hover table-striped"></table>
                            </div>
                        </div>
                    </div>`;$(`#${n}LineBox`).html(i)}function getLineCommon(n,t){const u=getDataTableRow("#productionLineList");Array.from(u).forEach(n=>$(n).css("background",""));$(this).css("background","#d9edf7");const i=$(this).attr("value"),r=()=>{t(i),myPromise(n,{qId:i},!0,0).then(n=>{const i=["white","green","orange","gray","darkblue","#00A9FC"];let r=0;const t=[],u=n.reduce((n,u)=>`${n}<div style="width:100%;position: relative;overflow-x:scroll;height:133px"><div class="line">
                                ${u.Processes.reduce((n,u)=>(t.push(u.Faults),`${n}<div class="line-box">
                                    <div class="line-box-title">
                                        <span>${u.Process}</span>
                                        <span class="info" style="background:${i[u.State]}">${u.StateStr}</span>
                                    </div>
                                    <div class="line-box-content">
                                        <p>进度：${u.Progress}%</p>
                                        <p>合格数：${u.Qualified}</p>
                                        <p>不合格数：${u.Unqualified}</p>
                                        <p>报警列表(${u.Faults.length})：<button class="btn btn-info btn-xs show-btn" value="${r++}">查看</button></p>
                                    </div>
                                </div>`),"")}
                            </div></div>`,"");$("#lineBox").html(u).off("click").on("click",".show-btn",function(){const n=_tablesConfig(!1,t[$(this).val()]);n.columns=n.columns.concat([{data:"FaultTime",title:"时间"},{data:"FlowCard",title:"流程卡"},{data:null,title:"信息",render:n=>n.Remark||n.Fault}]);$("#WarningDetailList").DataTable(n);$("#showWarningDetailModal").modal("show")})})};r();clearInterval($("#productionLineList")[0].time);$("#productionLineList")[0].time=setInterval(r,5e3)}function getWorkLine(n){myPromise(5070,{qId:n},!0,0).then(n=>{const t=n[0],i=`<tr><td>${t.WorkOrder}</td><td>${t.Target}</td><td>${t.DeliveryTime.split(" ")[0]}</td><td>${t.IssueCount}</td><td>${t.DoneCount}</td><td>${t.Done}</td><td>${t.Delivery}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>工单<\/td><td class="text-blue">交货数量<\/td><td class="text-red">交货日期<\/td><td>任务单数量<\/td><td>已完成任务单数量<\/td><td class="text-info">已完成<\/td><td class="text-green">已交货<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getTaskLine(n){myPromise(5090,{qId:n},!0,0).then(n=>{const t=n[0],i=`<tr><td>${t.TaskOrder}</td><td>${t.Product}</td><td>${t.Target}</td><td>${t.DeliveryTime.split(" ")[0]}</td><td>${t.IssueCount}</td><td>${t.DoneCount}</td><td>${t.Done}</td><td>${t.Delivery}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>任务单<\/td><td>计划号<\/td><td class="text-blue">交货数量<\/td><td class="text-red">交货日期<\/td><td>已发流程卡<\/td><td>以完成流程卡<\/td><td class="text-info">已完成<\/td><td class="text-green">已交货<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getFlowCardLine(n){myPromise(5110,{qId:n},!0,0).then(n=>{const t=n[0],i=`<tr><td>${t.FlowCard}</td><td>${t.TaskOrder}</td><td>${t.Product}</td><td>${t.ProcessCode}</td><td>${t.Done}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>流程卡号<\/td><td>任务单<\/td><td>计划号<\/td><td>流程编号<\/td><td class="text-info">已完成<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getPersonList(){myPromise(5e3).then(n=>{_personTrs=[];const t=_tablesConfig(!0,n),i=_tableSet();t.columns=t.columns.concat([{data:"Account",title:"用户名",render:i.input.bind(null,"account")},{data:"Number",title:"编号",render:i.input.bind(null,"number")},{data:"Name",title:"姓名",render:i.input.bind(null,"name")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_personTrs,(n,t)=>{n.find(".account").val(t.Account),n.find(".number").val(t.Number),n.find(".name").val(t.Name),n.find(".remark").val(t.Remark)})};$("#personList").DataTable(t)})}function getPersonTrInfo(n,t){const i=n.find(".account").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("用户名不能为空");const r=n.find(".number").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("编号不能为空");const u=n.find(".name").val().trim();if(isStrEmptyOrUndefined(u))return void layer.msg("姓名不能为空");const f={Account:i,Number:r,Name:u,Remark:n.find(".remark").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updatePerson(){updateTableRow(_personTrs,getPersonTrInfo,5001,getPersonList)}function addPersonModel(){const i={Account:"",Number:"",Name:"",Remark:""},t=_tablesConfig(!1,[i]),n=_tableSet();t.columns=t.columns.concat([{data:"Account",title:"用户名",render:n.addInput.bind(null,"account","auto")},{data:"Number",title:"编号",render:n.addInput.bind(null,"number","auto")},{data:"Name",title:"姓名",render:n.addInput.bind(null,"name","auto")},{data:"Remark",title:"备注",render:n.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:n.delBtn}]);$("#addPersonList").DataTable(t);$("#addPersonListBtn").off("click").on("click",()=>addDataTableTr("#addPersonList",i));$("#addPersonModel").modal("show")}function addPerson(){addTableRow("#addPersonList",getPersonTrInfo,5002,()=>{$("#addPersonModel").modal("hide"),getPersonList()})}function delPerson(){delTableRow(_personTrs,5003,getPersonList)}function getDeviceList(){const n=myPromise(5020),t=myPromise(5010);Promise.all([n,t]).then(n=>{_deviceTrs=[];const t=_tablesConfig(!0,n[1]),i=_tableSet();t.columns=t.columns.concat([{data:"Category",title:"类型",render:i.select.bind(null,setOptions(n[0],"Category"),"category")},{data:"Code",title:"机台号",render:i.input.bind(null,"code")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceTrs,(n,t)=>{n.find(".category").val(t.CategoryId),n.find(".code").val(t.Code),n.find(".remark").val(t.Remark)})};$("#deviceList").DataTable(t)})}function getDeviceTrInfo(n,t){const i=n.find(".category").val();if(isStrEmptyOrUndefined(i))return void layer.msg("请选择设备类型");const r=n.find(".code").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("机台号不能为空");const u={CategoryId:i,Code:r,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateDevice(){updateTableRow(_deviceTrs,getDeviceTrInfo,5011,getDeviceList)}function addDeviceModel(){myPromise(5020).then(n=>{const r={Category:"",Code:"",Remark:""},i=_tablesConfig(!1,[r]),t=_tableSet();i.columns=i.columns.concat([{data:"Category",title:"类型",render:t.addSelect.bind(null,setOptions(n,"Category"),"category")},{data:"Code",title:"机台号",render:t.addInput.bind(null,"code","auto")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);$("#addDeviceList").DataTable(i);$("#addDeviceListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceList",r));$("#addDeviceModel").modal("show")})}function addDevice(){addTableRow("#addDeviceList",getDeviceTrInfo,5012,()=>{$("#addDeviceModel").modal("hide"),getDeviceList()})}function delDevice(){delTableRow(_deviceTrs,5013,getDeviceList)}function showDeviceCategoryModal(){getDeviceCategoryList();$("#deviceCategoryModal").modal("show")}function getDeviceCategoryList(){myPromise(5020).then(n=>{_deviceCategoryTrs=[];const t=_tablesConfig(!0,n),i=_tableSet();t.columns=t.columns.concat([{data:"Category",title:"类型",render:i.input.bind(null,"category")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceCategoryTrs,(n,t)=>{n.find(".category").val(t.Category),n.find(".remark").val(t.Remark)})};$("#deviceCategoryList").DataTable(t)})}function getDeviceCategoryTrInfo(n,t){const i=n.find(".category").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("设备类型不能为空");const r={Category:i,Remark:n.find(".remark").val()};return t||(r.Id=n.find(".isEnable").val()>>0),r}function updateDeviceCategory(){updateTableRow(_deviceCategoryTrs,getDeviceCategoryTrInfo,5021,()=>{getDeviceCategoryList(),getDeviceList()})}function addDeviceCategoryModel(){const i={Category:"",Remark:""},n=_tablesConfig(!1,[i]),t=_tableSet();n.columns=n.columns.concat([{data:"Category",title:"类型",render:t.addInput.bind(null,"category","auto")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);$("#addDeviceCategoryList").DataTable(n);$("#addDeviceCategoryListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceCategoryList",i));$("#addDeviceCategoryModel").modal("show")}function addDeviceCategory(){addTableRow("#addDeviceCategoryList",getDeviceCategoryTrInfo,5022,()=>{$("#addDeviceCategoryModel").modal("hide"),getDeviceCategoryList(),getDeviceList()})}function delDeviceCategory(){delTableRow(_deviceCategoryTrs,5023,()=>{getDeviceCategoryList(),getDeviceList()})}function getProcessCodeList(){myPromise(5040).then(n=>{_processCodeTrs=[];const t=_tablesConfig(!0,n),i=_tableSet();t.columns=t.columns.concat([{data:"Code",title:"编号"},{data:"Category",title:"类型"},{data:"Processes",title:"流程详情",render:i.processDetail},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:i.updateBtn.bind(null,"showUpdateProcessCodeModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processCodeTrs)};$("#processCodeList").DataTable(t)})}function addEditProcessCodeModel(n){const t=myPromise(5050),i=myPromise(5030);Promise.all([t,i]).then(t=>{$("#addProcessCodeCategoryName").html(setOptions(t[0],"Category"));const i=_tablesConfig(!1,t[1]),r=_tableSet();i.columns.unshift({data:null,title:"",render:r.addBtn.bind(null,"addProcessOpToCode"),orderable:!1,sWidth:"80px"});i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:"Remark",title:"备注"}]);$("#addProcessCodeOpList").DataTable(i);$("#addProcessCodeBody").empty();n();$("#addProcessCodeModel").modal("show")})}function addUpProcessCode(n){const i=$("#addProcessCodeName").val().trim();if(isStrEmptyOrUndefined(i))return layer.msg("编号不能为空");const r=$("#addProcessCodeCategoryName").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择类型");const t=[];if($("#addProcessCodeBody tr").each((n,i)=>t.push($(i).attr("list"))),!t.length)return layer.msg("请设置流程");const u=t.join(),f=n?5042:5041,e=[{Code:i,CategoryId:r,List:u,Remark:$("#addProcessCodeRemark").val().trim(),Id:n?0:$("#addEditBtn").val()}];myPromise(f,e).then(()=>{$("#addProcessCodeModel").modal("hide"),getProcessCodeList()})}function addProcessOpTo(n,t){const r=$(this).parents("tr")[0],i=$(n).DataTable().row(r).data(),u=`<tr list="${i.Id}">
                             <td class="num"></td>
                             <td>${i.Process}</td>
                             <td><span class="glyphicon glyphicon-arrow-up pointer text-green upTr" aria-hidden="true" title="上移"></span></td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`;$(t).append(u);setAddProcessOpList(t)}function addProcessOpToCode(){addProcessOpTo.call(this,"#addProcessCodeOpList","#addProcessCodeBody")}function setAddProcessOpList(n){const t=$(`${n} tr`);for(let n=0,i=t.length;n<i;n++){const i=t.eq(n);i.find(".num").text(n+1);n?i.find(".upTr").removeClass("hidden"):i.find(".upTr").addClass("hidden")}}function addProcessCodeModel(){addEditProcessCodeModel(()=>{$("#addProcessCodeName").val("");$("#addProcessCodeCategoryName ").val($("#addProcessCodeCategoryName option:first").val());$("#addProcessCodeRemark").val("");$("#addEditTitle").text("添加流程编号");$("#addEditBtn").text("添加").val(0).off("click").on("click",addUpProcessCode.bind(null,!0))})}function showUpdateProcessCodeModel(){const t=$(this).parents("tr")[0],n=$("#processCodeList").DataTable().row(t).data();addEditProcessCodeModel(()=>{$("#addProcessCodeName").val(n.Code);$("#addProcessCodeCategoryName ").val(n.CategoryId);$("#addProcessCodeRemark").val(n.Remark);const t=n.List?n.List.split(","):[],i=n.Processes?n.Processes.split(","):[],r=t.reduce((n,t,r)=>`${n}<tr list="${t}">
                             <td class="num"></td>
                             <td>${i[r]}</td>
                             <td><span class="glyphicon glyphicon-arrow-up pointer text-green upTr" aria-hidden="true" title="上移"></span></td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`,"");$("#addProcessCodeBody").append(r);$("#addEditTitle").text("修改流程编号");$("#addEditBtn").text("修改").val(n.Id).off("click").on("click",addUpProcessCode.bind(null,!1));setAddProcessOpList("#addProcessCodeBody")})}function delProcessCode(){delTableRow(_processCodeTrs,5043,getProcessCodeList)}function showProcessCodeCategoryModal(){getProcessCodeCategoryList();$("#processCodeCategoryModal").modal("show")}function getProcessCodeCategoryList(){myPromise(5050).then(n=>{_processCodeCategoryTrs=[];const t=_tablesConfig(!0,n),i=_tableSet();t.columns=t.columns.concat([{data:"Category",title:"类型"},{data:"List",title:"标准流程",render:i.processDetail},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:i.updateBtn.bind(null,"showUpdateProcessCodeCategoryModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processCodeCategoryTrs)};$("#processCodeCategoryList").DataTable(t)})}function addEditProcessCodeCategoryModel(n){myPromise(5030).then(t=>{const i=_tablesConfig(!1,t),r=_tableSet();i.columns.unshift({data:null,title:"",render:r.addBtn.bind(null,"addProcessOpToCodeCategory"),orderable:!1,sWidth:"80px"});i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:"Remark",title:"备注"}]);$("#addProcessCodeCategoryOpList").DataTable(i);$("#addProcessCodeCategoryBody").empty();n();$("#addProcessCodeCategoryModel").modal("show")})}function addUpProcessCodeCategory(n){const i=$("#addProcessCodeCategory").val().trim();if(isStrEmptyOrUndefined(i))return layer.msg("类型不能为空");const t={Category:i,Remark:$("#addProcessCodeCategoryRemark").val().trim()};n||(t.Id=$("#addEditProcessCategoryBtn").val());const r=Array.from($("#addProcessCodeCategoryBody tr")).map((n,t)=>{const i={Order:t+1,ProcessId:$(n).attr("list")},r=$(n).attr("processid");return r&&(i.Id=r),i});if(!r.length)return layer.msg("请设置流程");t.Processes=r;const u=n?5052:5051;myPromise(u,[t]).then(()=>{$("#addProcessCodeCategoryModel").modal("hide"),getProcessCodeCategoryList()})}function addProcessOpToCodeCategory(){addProcessOpTo.call(this,"#addProcessCodeCategoryOpList","#addProcessCodeCategoryBody")}function addProcessCodeCategoryModel(){addEditProcessCodeCategoryModel(()=>{$("#addProcessCodeCategory").val("");$("#addProcessCodeCategoryRemark").val("");$("#addEditProcessCategoryTitle").text("添加流程编号类型");$("#addEditProcessCategoryBtn").text("添加").val(0).off("click").on("click",addUpProcessCodeCategory.bind(null,!0))})}function showUpdateProcessCodeCategoryModel(){const n=$(this).val();myPromise(5056,{categoryId:n},!0).then(t=>{addEditProcessCodeCategoryModel(()=>{const r=$(this).parents("tr")[0],i=$("#processCodeCategoryList").DataTable().row(r).data();$("#addProcessCodeCategory").val(i.Category);$("#addProcessCodeCategoryRemark").val(i.Remark);const u=t.reduce((n,t)=>`${n}<tr list="${t.ProcessId}" processid="${t.Id}">
                             <td class="num"></td>
                             <td>${t.Process}</td>
                             <td><span class="glyphicon glyphicon-arrow-up pointer text-green upTr" aria-hidden="true" title="上移"></span></td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`,"");$("#addProcessCodeCategoryBody").append(u);$("#addEditProcessCategoryTitle").text("修改流程编号类型");$("#addEditProcessCategoryBtn").text("修改").val(n).off("click").on("click",addUpProcessCodeCategory.bind(null,!1));setAddProcessOpList("#addProcessCodeCategoryBody")})})}function delProcessCodeCategory(){delTableRow(_processCodeCategoryTrs,5053,getProcessCodeCategoryList)}function getProcessOpList(){const n=myPromise(5020),t=myPromise(5030);Promise.all([n,t]).then(n=>{_processOpTrs=[];const t=_tablesConfig(!0,n[1]),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"流程",render:i.input.bind(null,"process")},{data:"DeviceCategory",title:"设备类型",render:i.select.bind(null,setOptions(n[0],"Category"),"category")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processOpTrs,(n,t)=>{n.find(".process").val(t.Process),n.find(".category").val(t.DeviceCategoryId),n.find(".remark").val(t.Remark)})};$("#processOpList").DataTable(t)})}function getProcessOpTrInfo(n,t){const i=n.find(".process").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("流程名称不能为空");const r=n.find(".category").val();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择设备类型");const u={DeviceCategoryId:r,Process:i,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateProcessOp(){updateTableRow(_processOpTrs,getProcessOpTrInfo,5031,getProcessOpList)}function addProcessOpModel(){myPromise(5020).then(n=>{const r={DeviceCategory:"",Process:"",Remark:""},i=_tablesConfig(!1,[r]),t=_tableSet();i.columns=i.columns.concat([{data:"Process",title:"流程",render:t.addInput.bind(null,"process","auto")},{data:"DeviceCategory",title:"设备类型",render:t.addSelect.bind(null,setOptions(n,"Category"),"category")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);$("#addProcessOpList").DataTable(i);$("#addProcessOpListBtn").off("click").on("click",()=>addDataTableTr("#addProcessOpList",r));$("#addProcessOpModel").modal("show")})}function addProcessOp(){addTableRow("#addProcessOpList",getProcessOpTrInfo,5032,()=>{$("#addProcessOpModel").modal("hide"),getProcessOpList()})}function delProcessOp(){delTableRow(_processOpTrs,5033,getProcessOpList)}function getPlanList(){myPromise(5060).then(n=>{_planTrs=[];const t=_tablesConfig(!0,n),i=_tableSet();t.columns=t.columns.concat([{data:"Product",title:"计划号"},{data:"ProcessCodes",title:"流程编号清单"},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:i.updateBtn.bind(null,"showUpdatePlanModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_planTrs)};$("#planList").DataTable(t)})}function disabledProcessCode(){const n=$("#planProcessCodeList .process-code-select");disabledProcessCodeCommon(n)}function disabledProcessCodeCommon(n){const t=[];(n.find("option").prop("disabled",!1),n.each((n,i)=>{const r=$(i).val();r&&t.push(r)}),t.length)&&n.find("option").each((n,i)=>{const r=$(i);~t.indexOf(r.val())&&r.prop("disabled",!0)})}function addEditPlanModel(n){_planProcessCodeInfo={};myPromise(5040).then(t=>{t.forEach(n=>_planProcessCodeInfo[n.Id]=n);const i=`<div class="temp form-group" style="border-bottom:1px solid #eee">
                        <div class="flexStyle form-group" style="justify-content:space-between">
                            <div class="flexStyle">
                                <label class="control-label text-nowrap no-margin">流程编号：</label>
                                <select class="form-control process-code-select" style="width:150px;margin-right:15px">${setOptions(t,"Code")}</select>
                                <button class="btn btn-info btn-sm browse-btn" style="margin-right:15px">浏览</button>
                                <label class="control-label text-nowrap no-margin process-code-category">类型：</label>
                            </div>
                            <button class="btn btn-danger btn-sm del-btn"><i class="fa fa-minus"></i></button>
                        </div>
                        <div class="table-responsive mailbox-messages">
                            <table class="table table-hover table-striped process-table"></table>
                        </div>
                    </div>`;$("#planProcessCodeList").empty();$("#addPlanProcessList").off("click").on("click",function(){$("#planProcessCodeList").append(i).find(".process-code-select:last").val("");disabledProcessCode();$("#planProcessCodeList .process-code-select:first option").length===$("#planProcessCodeList .temp").length&&$(this).prop("disabled",!0)});n();$("#addPlanModel").modal("show")})}function addUpPlan(n){const r=$("#addPlanName").val().trim();if(isStrEmptyOrUndefined(r))return layer.msg("计划号不能为空");const f=$("#addPlanRemark").val().trim(),t={Product:r,Remark:f};let i;n?i=5062:(i=5061,t.Id=$("#addEditPlanBtn").val());const u=[];$("#planProcessCodeList .process-table").each((n,t)=>u.push(...Array.from(getDataTableRow(t))));t.ProductProcesses=u.map(n=>{const t=$(n),i=t.closest("table").DataTable().row(t[0]).data(),u=t.find(".set-btn")[0].ProcessData||[],r={ProcessRepeat:t.find(".isRework").val()>>0,ProcessNumber:t.find(".processNumber").val(),ProcessData:JSON.stringify(u)};return i.Id?r.Id=i.Id:(r.ProcessCodeId=i.ProcessCodeId,r.ProcessId=i.ProcessId),r});myPromise(i,[t]).then(()=>{$("#addPlanModel").modal("hide"),getPlanList()})}function addPlanModel(){addEditPlanModel(()=>{$("#addEditPlanTitle").text("添加计划号");$("#addPlanName").val("");$("#addPlanRemark").val("");$("#addPlanProcessList").click();$("#addEditPlanBtn").text("添加").val(0).off("click").on("click",addUpPlan.bind(null,!0))})}function showUpdatePlanModel(){const n=$(this).val();myPromise(5060,{qId:n},!0).then(n=>{const t=n[0];addEditPlanModel(()=>{$("#addEditPlanTitle").text("修改计划号");$("#addPlanName").val(t.Product);$("#addPlanRemark").val(t.Remark);const i=t.ProductProcesses,n={};i.forEach(t=>{const i=t.ProcessCodeId;n[i]?n[i].push(t):n[i]=[t]});for(let t in n){$("#addPlanProcessList").click();$("#planProcessCodeList .process-code-select:last").val(t);$("#planProcessCodeList .process-code-category:last").text(`类型：${_planProcessCodeInfo[t].Category}`);const i=_tablesConfig(!1,n[t]),r=_tableSet();i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:null,title:"可否返工",render:r.isRework},{data:"ProcessNumber",title:"单台加工数量",render:r.addInput.bind(null,"processNumber","auto")},{data:null,title:"工艺数据",render:r.setBtn}]);i.createdRow=(n,t)=>{n=$(n),n.find(".isRework").val(t.ProcessRepeat>>0),n.find(".set-btn")[0].ProcessData=JSON.parse(t.ProcessData)};$("#planProcessCodeList .process-table:last").DataTable(i)}disabledProcessCode();$("#addEditPlanBtn").text("修改").val(t.Id).off("click").on("click",addUpPlan.bind(null,!1))})})}function delPlan(){delTableRow(_planTrs,5063,getPlanList)}function showCapacityModel(){$("#showCapacityModel").modal("show")}function showAddCapacityCategoryModel(){_planProcessCodeInfo={};myPromise(5030).then(n=>{n.forEach(n=>_planProcessCodeInfo[n.Id]=n);const r=n[0],u={ProcessId:r.Id,DeviceCategory:r.DeviceCategory},t=_tablesConfig(!1,[u]),i=_tableSet();t.columns=t.columns.concat([{data:"ProcessId",title:"流程",render:i.addSelect.bind(null,setOptions(n,"Process"),"process")},{data:"DeviceCategory",title:"设备类型"},{data:null,title:"设备类型",render:i.setBtn},{data:null,title:"删除",render:i.delBtn}]);$("#addCapacityList").DataTable(t);$("#addCapacityListBtn").off("click").on("click",()=>{addDataTableTr("#addCapacityList",u)})});$("#showAddCapacityCategoryModel").modal("show")}function getWorkOrderList(){myPromise(5070).then(n=>{_workOrderTrs=[];const t=_tablesConfig(!0,n),i=_tableSet();t.columns=t.columns.concat([{data:"WorkOrder",title:"工单",render:i.input.bind(null,"workOrder")},{data:"StateStr",title:"状态"},{data:"DeliveryTime",title:"交货日期",render:i.day.bind(null,"deliveryTime")},{data:"Target",title:"目标产量",render:i.input.bind(null,"target")},{data:"DoneTarget",title:"已完成",sClass:"text-green"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.createdRow=n=>initDayTime(n);t.drawCallback=function(){initCheckboxAddEvent.call(this,_workOrderTrs,(n,t)=>{n.find(".workOrder").val(t.WorkOrder),n.find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update"),n.find(".target").val(t.Target),n.find(".remark").val(t.Remark)})};$("#workOrderList").DataTable(t)})}function getWorkOrderTrInfo(n,t){const i=n.find(".workOrder").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("工单不能为空");const r=n.find(".deliveryTime").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择交货日期");const u=n.find(".target").val().trim();if(isStrEmptyOrUndefined(u))return void layer.msg("目标产量不能为0");const f={WorkOrder:i,DeliveryTime:r,Target:u,Remark:n.find(".remark").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updateWorkOrder(){updateTableRow(_workOrderTrs,getWorkOrderTrInfo,5071,getWorkOrderList)}function addWorkOrderModel(){const i={WorkOrder:"",DeliveryTime:getDate(),Target:0,Remark:""},t=_tablesConfig(!1,[i]),n=_tableSet();t.columns=t.columns.concat([{data:"WorkOrder",title:"工单",render:n.addInput.bind(null,"workOrder","auto")},{data:"DeliveryTime",title:"交货日期",render:n.addDay.bind(null,"deliveryTime")},{data:"Target",title:"目标产量",render:n.addInput.bind(null,"target","auto")},{data:"Remark",title:"备注",render:n.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:n.delBtn}]);t.createdRow=n=>initDayTime(n);$("#addWorkOrderList").DataTable(t);$("#addWorkOrderListBtn").off("click").on("click",()=>addDataTableTr("#addWorkOrderList",i));$("#addWorkOrderModel").modal("show")}function addWorkOrder(){addTableRow("#addWorkOrderList",getWorkOrderTrInfo,5072,()=>{$("#addWorkOrderModel").modal("hide"),getWorkOrderList()})}function delWorkOrder(){delTableRow(_workOrderTrs,5073,getWorkOrderList)}function getTaskOrderList(){const n=myPromise(5060),t=myPromise(5070),i=myPromise(5090);Promise.all([n,t,i]).then(n=>{_taskOrderTrs=[];const i=_tablesConfig(!0,n[2]),t=_tableSet();i.columns=i.columns.concat([{data:"TaskOrder",title:"任务单",render:t.input.bind(null,"taskOrder")},{data:"StateStr",title:"状态"},{data:"Target",title:"目标产量",render:t.input.bind(null,"target")},{data:"Done",title:"已完成",sClass:"text-green"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"WorkOrder",title:"工单",render:t.select.bind(null,setOptions(n[1],"WorkOrder"),"workOrder")},{data:"Product",title:"计划号",render:t.select.bind(null,setOptions(n[0],"Product"),"product")},{data:"DeliveryTime",title:"交货日期",render:t.day.bind(null,"deliveryTime")},{data:"Id",title:"详情",render:t.detailBtn.bind(null,"showTaskOrderDetailModal")},{data:"Remark",title:"备注",render:t.input.bind(null,"remark")}]);i.createdRow=n=>initDayTime(n);i.drawCallback=function(){initCheckboxAddEvent.call(this,_taskOrderTrs,(n,t)=>{n.find(".taskOrder").val(t.TaskOrder),n.find(".target").val(t.Target),n.find(".workOrder").val(t.WorkOrderId),n.find(".product").val(t.ProductId),n.find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update"),n.find(".remark").val(t.Remark)})};$("#taskOrderList").DataTable(i)})}function showTaskOrderDetailModal(){myPromise(5090).then(n=>{const t=$(this).val();$("#taskOrderSelect").html(setOptions(n,"TaskOrder")).val(t).trigger("change");$("#taskOrderDetailModel").modal("show")})}function getTaskOrderTrInfo(n,t){const i=n.find(".taskOrder").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("任务单不能为空");const r=n.find(".target").val().trim().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("目标产量不能为0");const u=n.find(".workOrder").val();if(isStrEmptyOrUndefined(u))return void layer.msg("请选择工单");const f=n.find(".product").val();if(isStrEmptyOrUndefined(f))return void layer.msg("请选择计划号");const e=n.find(".deliveryTime").val().trim();if(isStrEmptyOrUndefined(e))return void layer.msg("请选择交货日期");const o={TaskOrder:i,Target:r,WorkOrderId:u,ProductId:f,DeliveryTime:e,Remark:n.find(".remark").val()};return t||(o.Id=n.find(".isEnable").val()>>0),o}function updateTaskOrder(){updateTableRow(_taskOrderTrs,getTaskOrderTrInfo,5091,getTaskOrderList)}function addTaskOrderModel(){const n=myPromise(5060),t=myPromise(5070);Promise.all([n,t]).then(n=>{const i=n[1][0],u={TaskOrder:"",WorkOrderId:"",TargetWork:i.Target,Left:i.Left,Doing:i.Doing,ProductId:"",Target:0,DeliveryTime:i.DeliveryTime.split(" ")[0],Remark:""},r=_tablesConfig(!1,[u]),t=_tableSet();r.columns=r.columns.concat([{data:"TaskOrder",title:"任务单",render:t.addInput.bind(null,"taskOrder","auto")},{data:"WorkOrderId",title:"工单",render:t.addSelect.bind(null,setOptions(n[1],"WorkOrder"),"workOrder")},{data:"TargetWork",title:"目标产量"},{data:"Left",title:"未完成",sClass:"text-red"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"ProductId",title:"计划号",render:t.addSelect.bind(null,setOptions(n[0],"Product"),"product")},{data:"Target",title:"目标产量",render:t.addInput.bind(null,"target","auto")},{data:"DeliveryTime",title:"交货日期",render:t.addDay.bind(null,"deliveryTime")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);r.createdRow=n=>initDayTime(n);$("#addTaskOrderList").DataTable(r);$("#addTaskOrderListBtn").off("click").on("click",()=>addDataTableTr("#addTaskOrderList",u));$("#addTaskOrderModel").modal("show")})}function addTaskOrder(){addTableRow("#addTaskOrderList",getTaskOrderTrInfo,5092,()=>{$("#addTaskOrderModel").modal("hide"),getTaskOrderList()})}function delTaskOrder(){delTableRow(_taskOrderTrs,5093,getTaskOrderList)}function getFlowCardList(){let n=$("#sendCardSTime").val().trim();if(isStrEmptyOrUndefined(n))return layer.msg("请选择发卡开始时间");let t=$("#sendCardETime").val().trim();if(isStrEmptyOrUndefined(t))return layer.msg("请选择发卡结束时间");if(compareDate(n,t))return layer.msg("结束时间不能小于开始时间");n+=" 00:00:00";t+=" 23:59:59";const i=$("#flowCardTaskOrderSelect").val();if(isStrEmptyOrUndefined(i))return layer.msg("请选择任务单");const r=$("#flowCardPlanSelect").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择计划号");myPromise(5110,{startTime:n,endTime:t,taskOrderId:i,productId:r},!0).then(n=>{_flowCardTrs=[];const t=_tablesConfig(!0,n);t.columns=t.columns.concat([{data:"CreateTime",title:"发卡时间"},{data:"FlowCard",title:"流程卡"},{data:"ProcessCode",title:"流程编号"},{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:"Batch",title:"预计工时"},{data:"Id",title:"流程详情",render:n=>`<button class="btn btn-info btn-sm" onclick="showProcessFlowCardIdModal(${n})">查看</button>`},{data:"Remark",title:"备注"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_flowCardTrs)};$("#flowCardList").DataTable(t)})}function showProcessFlowCardIdModal(n){myPromise(5150,{flowCardId:n},!0).then(n=>{const t=_tablesConfig(!1,n),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:"Processor",title:"加工人"},{data:"DeviceCode",title:"加工设备"},{data:null,title:"最后完成时间",render:i.endFinishTime},{data:"Progress",title:"进度",render:i.progress},{data:"Count",title:"加工次数"},{data:"Before",title:"加工前数量"},{data:"Left",title:"剩余数量"},{data:"Qualified",title:"合格数"},{data:"Unqualified",title:"不合格数"},{data:"Before",title:"产量"}]);$("#processFlowCardIdList").DataTable(t);$("#showProcessFlowCardIdModal").modal("show")})}function showProcessDetail(n){myPromise(5060,{qId:n},!0).then(n=>{const i=n[0],r=i.ProductProcesses,t={};r.forEach(n=>{const i=n.ProcessCodeId;t[i]?t[i].push(n):t[i]=[n]});$("#processDetailCodeSelect").off("change").on("change",function(){const i=$(this).val(),n=_tablesConfig(!1,t[i]),r=_tableSet();n.columns=n.columns.concat([{data:"Process",title:"流程"},{data:"ProcessRepeat",title:"可否返工",render:r.isReworkText},{data:"ProcessNumber",title:"单台加工数量"},{data:null,title:"工艺数据",render:()=>'<button class="btn btn-info btn-sm look-btn">查看<\/button>'}]);n.createdRow=(n,t)=>$(n).find(".look-btn")[0].ProcessData=JSON.parse(t.ProcessData);$("#processDetailList").DataTable(n)});$("#processDetailCodeSelect").html(getPlanToProcessCodeOps(i)).trigger("change");$("#showProcessDetailModal").modal("show")})}function getPlanToProcessCodeOps(n){const t=n.ProcessCodes?n.ProcessCodes.split(","):[],i=n.ProcessCodeIds?n.ProcessCodeIds.split(","):[],r=i.map((n,i)=>({Id:n,ProcessCode:t[i]}));return setOptions(r,"ProcessCode")}function selectTaskOrder(n){const t=$("#addFlowCardProcessList");t.html()&&(t.DataTable().destroy().clear(),t.empty());$("#addFlowCardWorkNum").val("");$("#addFlowCardCardNum").val("");$("#addFlowCardTarget").text(n.Target);$("#addFlowCardLeft").text(n.Left);$("#addFlowCardDoing").text(n.Doing);$("#addFlowCardIssue").text(n.Issue);$("#addFlowCardPlan").text(n.Product);$("#addFlowCardTime").text(n.DeliveryTime.split(" ")[0]);$("#processCodeLookBtn").val(n.ProductId);const i=n.ProductId;myPromise(5060,{qId:i},!0).then(n=>$("#addFlowCardProcessCodeSelect").html(getPlanToProcessCodeOps(n[0])).trigger("change"))}function addFlowCardModel(){const n=myPromise(5090),t=myPromise(5e3);Promise.all([n,t]).then(n=>{const t=n[0];$("#addFlowCardTaskOrderSelect").html(setOptions(t,"TaskOrder"));$("#addFlowCardPersonSelect").html(setOptions(n[1],"Account"));selectTaskOrder(t[0])});$("#addFlowCardModel").modal("show")}function addFlowCardProcessCodeLook(){const n=$(this).val();showProcessDetail(n)}function addFlowCardPreview(){let n=$("#addFlowCardWorkNum").val()>>0;if(isStrEmptyOrUndefined(n))return layer.msg("请输入加工数量");const t=$("#addFlowCardCardNum").val()>>0;if(isStrEmptyOrUndefined(t))return layer.msg("请输入单卡数量");const u=$("#addFlowCardProcessCodeSelect").val();if(isStrEmptyOrUndefined(u))return layer.msg("请选择流程编号");const o=$("#addFlowCardProcessCodeSelect :selected").text(),r=$("#addFlowCardPersonSelect").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择加个人");const s=$("#addFlowCardPersonSelect").html(),f=[];do f.push({FlowCard:"",Number:n>=t?t:n,ProcessCode:o,PersonId:r});while((n-=t)>0);const i=_tablesConfig(!1,f),e=_tableSet();i.columns=i.columns.concat([{data:"FlowCard",title:"流程卡号"},{data:"Number",title:"加工数量",render:e.addInput.bind(null,"number","auto")},{data:"ProcessCode",title:"流程编号",render:n=>`<span codeid="${u}">${n}</span>`},{data:"PersonId",title:"加工人",render:e.addSelect.bind(null,s,"person")}]);i.createdRow=n=>$(n).find(".person").val(r);$("#addFlowCardProcessList").DataTable(i)}function addFlowCard(){if(!$("#addFlowCardProcessList").html())return layer.msg("请预览之后再生成");const n=$("#addFlowCardTaskOrderSelect").val();if(isStrEmptyOrUndefined(n))return layer.msg("请选择任务单");const t=[],i=i=>{const r=i.find(".person").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择加个人");t.push(i.find(".person :selected").text());const u=i.find(".number").val().trim()>>0;if(isStrEmptyOrUndefined(u))return layer.msg("请输入加工数量");return{TaskOrderId:n,ProcessCodeId:i.find("[codeid]").attr("codeid"),ProcessorId:r,Number:u,Remark:"string"}},r=$("#addFlowCardProcessList [codeid]:first").text();addTableRow("#addFlowCardProcessList",i,5112,n=>{const u=n.FlowCards.map((n,i)=>({FlowCard:n.FlowCard,Number:n.Number,ProcessCode:r,PersonId:t[i]})),i=_tablesConfig(!1,u);i.columns=i.columns.concat([{data:"FlowCard",title:"流程卡号"},{data:"Number",title:"加工数量"},{data:"ProcessCode",title:"流程编号"},{data:"PersonId",title:"加工人"}]);$("#addFlowCardProcessList").DataTable(i)})}function flowCardPrint(){const n=$("#addFlowCardProcessList");if(!(n.html()&&!n.find("input").length))return layer.msg("生成成功后才能打印");const t=Array.from(getDataTableRow("#addFlowCardProcessList")).reduce((n,t)=>`${n}${$(t).prop("outerHTML")}`,""),i=`<table border="1" style="width:100%;text-align:center;border-collapse:collapse">${"<thead><tr><th>序号<\/th><th>流程卡号<\/th><th>加工数量<\/th><th>流程编号<\/th><th>加工人<\/th><\/tr><\/thead>"}<tbody>${t}</tbody></table>`;printCode(i)}function delFlowCard(){delTableRow(_flowCardTrs,5113,getFlowCardList)}let _personTrs=null;let _deviceTrs=null;let _deviceCategoryTrs=null;let _processCodeTrs=null;let _processCodeCategoryTrs=null;let _processOpTrs=null;let _planTrs=null;let _planProcessCodeInfo=null;let _workOrderTrs=null;let _taskOrderTrs=null;let _flowCardTrs=null;