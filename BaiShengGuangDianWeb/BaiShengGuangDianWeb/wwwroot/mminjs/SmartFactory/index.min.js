function pageReady(){$("#sendCardSTime,#sendCardETime,#pmcChildSTime,#pmcChildETime,#pmcInStoreSTime,#pmcInStoreETime").val(getDate()).datepicker("update");getProductionLine();getNotArrangeTaskList();getArrangeTaskList();$("#personNavLi").one("click",getPersonList);$("#deviceNavLi").one("click",getDeviceList);$("#flowNavLi").one("click",getProcessCodeList);$("#processSetNavLi").one("click",getProcessOpList);$("#planNavLi").one("click",getPlanList);$("#workOrderNavLi").one("click",getWorkOrderList);$("#taskOrderNavLi").one("click",getTaskOrderList);$("#flowCardNavLi").one("click",()=>{const n=myPromise(5090),t=myPromise(5040),i=myPromise(5060);Promise.all([n,t,i]).then(n=>{const t='<option value="0">所有<\/option>';$("#flowCardTaskOrderSelect").html(`${t}${setOptions(n[0].datas,"TaskOrder")}`);$("#flowCardProcessCodeSelect").html(`${t}${setOptions(n[1].datas,"Code")}`);$("#flowCardPlanSelect").html(`${t}${setOptions(n[2].datas,"Product")}`);getFlowCardList()})});$("#pmcExpelProNavLi").one("click",()=>{getNotArrangeTaskList(),getArrangeTaskList()});$("#addProcessCodeBody,#addProcessCodeCategoryBody").on("click",".upTr",function(){const n=$(this).parents("tr"),t="#"+$(this).parents("tbody").attr("id"),i=n.prev();i.before(n);setAddProcessOpList(t)});$("#addProcessCodeBody,#addProcessCodeCategoryBody").on("click",".delBtn",function(){const n="#"+$(this).parents("tbody").attr("id");$(this).parents("tr").remove();setAddProcessOpList(n)});$("#addPlanCapacity").on("change",function(){const n=n=>{const t=_tablesConfig(!1,n),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-info btn-sm capacity-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">查看</button>`},{data:null,title:"合格率",render:i.addInput.bind(null,"rate","auto",0)},{data:null,title:"工时",render:i.hms}]);$("#addPlanCapacityList").DataTable(t)},t=$(this).val();t?myPromise(5560,{capacityId:t},!0).then(t=>n(t.datas)):n([])});$("#addPlanCapacityList").on("input",".rate",function(){$(this).val()>>0>100&&$(this).val(100)});$("#addPlanCapacityList").on("input",".minute,.second",function(){$(this).val()>>0>59&&$(this).val(59)});$("#addPlanProcess").on("change",function(n,t){const i=$(this).val(),r=myPromise(5530,{categoryId:i,menu:!0},!0),u=myPromise(5040,{categoryId:i},!0);Promise.all([r,u]).then(n=>{const i=n[1].datas;i.forEach(n=>_planProcessCodeInfo[n.Id]=n);const r=`<div class="temp form-group" style="border-bottom:1px solid #eee">
                            <div class="flexStyle form-group" style="justify-content:space-between;align-items:flex-start">
                                <div class="flexStyle" style="flex-wrap:wrap">
                                    <label class="control-label text-nowrap no-margin">流程编号：</label>
                                    <select class="form-control process-code-select" style="width:150px;margin-right:15px">${setOptions(i,"Code")}</select>
                                    <button class="btn btn-info btn-sm browse-btn" style="margin-right:15px">浏览</button>
                                    <label class="control-label text-nowrap no-margin process-code-category">类型：</label>
                                </div>
                                <button class="btn btn-danger btn-sm del-btn"><i class="fa fa-minus"></i></button>
                            </div>
                            <div class="table-responsive mailbox-messages">
                                <table class="table table-hover table-striped process-table"></table>
                            </div>
                        </div>`;$("#planProcessCodeList").empty();$("#addPlanProcessList").off("click").on("click",function(){$("#planProcessCodeList").append(r).find(".process-code-select:last").val("");disabledProcessCode();$("#planProcessCodeList .process-code-select:first option").length===$("#planProcessCodeList .temp").length&&$(this).prop("disabled",!0)});t?t(n[0].datas):$("#addPlanCapacity").html(setOptions(n[0].datas,"Capacity")).trigger("change");$("#addPlanProcessList").prop("disabled",!i.length);$("#addPlanModel").modal("show")})});$("#planProcessCodeList").on("change",".process-code-select",function(){const r=$(this).val(),n=_planProcessCodeInfo[r];$(this).siblings(".process-code-category").text(`类型：${n.Category}`);const u=n.List?n.List.split(","):[],f=n.Processes?n.Processes.split(","):[],e=u.map((t,i)=>({ProcessId:t,Process:f[i],ProcessNumber:0,ProcessCodeId:n.Id})),t=_tablesConfig(!1,e),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:null,title:"可否返工",render:i.isRework},{data:"ProcessNumber",title:"单台加工数量",bVisible:!1,render:i.addInput.bind(null,"processNumber","auto")},{data:null,title:"工艺数据",render:i.setBtn}]);$(this).closest(".temp").find(".process-table").DataTable(t);disabledProcessCode()});$("#planProcessCodeList").on("click",".browse-btn",function(){myPromise(5040).then(n=>{const t=_tablesConfig(!1,n.datas,0),i=_tableSet();t.columns=t.columns.concat([{data:"Code",title:"编号"},{data:"Category",title:"类型"},{data:"Processes",title:"流程详情",render:i.processDetail},{data:"Remark",title:"备注"}]);$("#browseProcessCodeList").DataTable(t);$("#browseProcessCodeModel").modal("show")})});$("#planProcessCodeList").on("click",".del-btn",function(){$(this).closest(".temp").remove();disabledProcessCode();$("#addPlanProcessList").prop("disabled",!1)});$("#planProcessCodeList").on("click",".set-btn",function(){const i=this.ProcessData?this.ProcessData.map(n=>({addPressM:n[0],addPressS:n[1],workM:n[2],workS:n[3],setPress:n[4],rotate:n[5]})):[],t=_tablesConfig(!1,i),n=_tableSet();t.columns=t.columns.concat([{data:"addPressM",title:"加压时间（M）",render:n.addInput.bind(null,"addPressM","auto")},{data:"addPressS",title:"加压时间（S）",render:n.addInput.bind(null,"addPressS","auto")},{data:"workM",title:"工序时间（M）",render:n.addInput.bind(null,"workM","auto")},{data:"workS",title:"工序时间（S）",render:n.addInput.bind(null,"workS","auto")},{data:"setPress",title:"设定压力（Kg）",render:n.addInput.bind(null,"setPress","auto")},{data:"rotate",title:"下盘速度（rpm）",render:n.addInput.bind(null,"rotate","auto")},{data:null,title:"删除",render:()=>'<button class="btn btn-danger btn-xs del-btn"><i class="fa fa-minus"><\/i><\/button>'}]);$("#setCraftList").DataTable(t);$("#addCraftTrBtn").prop("disabled",getDataTableRow("#setCraftList").length===8);$("#setCraftModel").modal("show");$("#addCraftBtn").off("click").on("click",()=>{const n=getDataTableRow("#setCraftList");if(!n.length){layer.msg("请先设置数据再添加");return}const t=Array.from(n).map(n=>{const t=$(n),i=t.find(".addPressM").val()>>0||0,r=t.find(".addPressS").val()>>0||0,u=t.find(".workM").val()>>0||0,f=t.find(".workS").val()>>0||0,e=t.find(".setPress").val()>>0||0,o=t.find(".rotate").val()>>0||0;return[i,r,u,f,e,o]});this.ProcessData=t;layer.msg("工艺设置成功");$("#setCraftModel").modal("hide")})});$("#setCraftList").on("click",".del-btn",function(){$("#addCraftTrBtn").prop("disabled",!1);delDataTableTr.call(this)});$("#addCraftTrBtn").on("click",function(){addDataTableTr("#setCraftList",{addPressM:0,addPressS:0,workM:0,workS:0,setPress:0,rotate:0});getDataTableRow("#setCraftList").length===8&&$(this).prop("disabled",!0)});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList,#addPlanCapacityList,#notArrangeTaskProcessBox").on("input","input",function(){onInput(this,8,0)});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList,#devCapacitySetList,#personCapacitySetList,#addPlanCapacityList,#notArrangeTaskProcessBox").on("focus","input",function(){$(this).val().trim()==0&&$(this).val("")});$("#setCraftList,#planProcessCodeList,#addFlowCardProcessList,#devCapacitySetList,#personCapacitySetList,#addPlanCapacityList,#notArrangeTaskProcessBox").on("blur","input",function(){isStrEmptyOrUndefined($(this).val().trim())&&$(this).val(0)});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("input",".target",function(){onInput(this,8,0)});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("focus",".target",function(){$(this).val().trim()==0&&$(this).val("")});$("#workOrderList,#addWorkOrderList,#taskOrderList,#addTaskOrderList").on("blur",".target",function(){isStrEmptyOrUndefined($(this).val().trim())&&$(this).val(0)});$("#addTaskOrderList").on("change",".workOrder",function(){const n=$(this).val();myPromise(5070,{qId:n},!0).then(n=>{const t=n.datas[0];$(this).closest("td").next().text(t.Target).next().text(t.Left).next().text(t.Doing).nextAll().find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update")})});$("#taskOrderSelect").on("change",function(){const n=$(this).val();myPromise(5090,{qId:n},!0).then(n=>{const t=n.datas[0];$("#taskOrderTarget").text(t.Target);$("#taskOrderIssueCount").text(t.IssueCount);$("#taskOrderIssue").text(t.Issue);$("#taskOrderDoingCount").text(t.DoingCount);$("#taskOrderDoneCount").text(t.DoneCount)})});$("#processDetailList").on("click",".look-btn",function(){const t=this.ProcessData.map(n=>({addPressM:n[0],addPressS:n[1],workM:n[2],workS:n[3],setPress:n[4],rotate:n[5]})),n=_tablesConfig(!1,t);n.columns=n.columns.concat([{data:"addPressM",title:"加压时间（M）"},{data:"addPressS",title:"加压时间（S）"},{data:"workM",title:"工序时间（M）"},{data:"workS",title:"工序时间（S）"},{data:"setPress",title:"设定压力（Kg）"},{data:"rotate",title:"下盘速度（rpm）"}]);$("#craftDetailList").DataTable(n);$("#showCraftDetailModal").modal("show")});$("#addFlowCardTaskOrderSelect").on("change",function(){const n=$(this).val();myPromise(5090,{qId:n},!0).then(n=>selectTaskOrder(n.datas[0]))});$("#addFlowCardProcessCodeSelect").on("change",function(){const n=$(this).val();n?myPromise(5040,{qId:n},!0).then(n=>{const t=n.datas[0];$("#addFlowCardType").text(t.Category);$("#addFlowCardProcessDetail").text(t.Processes.replace(/,/g," > "))}):($("#addFlowCardType").text(""),$("#addFlowCardProcessDetail").text(""))});$("#showMode").on("change",getProductionLine);$("#productionLineList").on("click",".show-task-btn",function(n){const t=$(this).val();myPromise(5250,{workOrderId:t},!0).then(n=>{const t=_tablesConfig(!1,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"流程卡",render:n=>`<button class="btn btn-info btn-sm show-flow-btn" value="${n}">查看</button>`}]);$("#taskDetailList").DataTable(t);$("#showTaskDetailModal").modal("show")});n.stopPropagation()});$("#productionLineList").on("click",".work-order",function(){getLineCommon.call(this,5201,getWorkLine);const n=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"WorkOrder",title:"工单"},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},t=$(this).attr("value"),i=()=>{myPromise(5204,{workOrderId:t},!0).then(t=>{processWarningDangerTemp("warning",`报警工单（${t.datas.length}）`);$("#warningLineBox .refresh").on("click",i);$("#warningLineBox table").DataTable(n(t,"报警时间","报警信息"))})},r=()=>{myPromise(5205,{workOrderId:t},!0).then(t=>{processWarningDangerTemp("danger",`中断工单（${t.datas.length}）`);$("#dangerLineBox .refresh").on("click",r);$("#dangerLineBox table").DataTable(n(t,"中断时间","原因"))})};i();r()});$("#productionLineList").on("click",".task-order",function(){getLineCommon.call(this,5251,getTaskLine);const n=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"TaskOrder",title:"任务单"},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},t=$(this).attr("value"),f=$(this).attr("work"),i=()=>{myPromise(5251,{qId:f},!0).then(n=>{n=n.datas;processWarningDangerTemp("success",`标准工序（${n.length?n[0].Processes.length:0}）`);$("#successLineBox .refresh").on("click",i);const t=_tablesConfig(!1,n.length?n[0].Processes:[]),r=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:null,title:"最后完成时间",render:r.endFinishTime},{data:"Progress",title:"进度",render:r.progress},{data:"Qualified",title:"加工次数"},{data:"Before",title:"产量"}]);$("#successLineBox table").DataTable(t)})},r=()=>{myPromise(5254,{taskOrderId:t},!0).then(t=>{t=t.datas;processWarningDangerTemp("warning",`报警工单（${t.length}）`);$("#warningLineBox .refresh").on("click",r);$("#warningLineBox table").DataTable(n(t,"报警时间","报警信息"))})},u=()=>{myPromise(5255,{taskOrderId:t},!0).then(t=>{t=t.datas;processWarningDangerTemp("danger",`中断工单（${t.length}）`);$("#dangerLineBox .refresh").on("click",u);$("#dangerLineBox table").DataTable(n(t,"中断时间","原因"))})};i();r();u()});$("#productionLineList").on("click",".flow-card",function(){getLineCommon.call(this,5301,getFlowCardLine);const t=(n,t,i)=>{const r=_tablesConfig(!1,n);return r.columns=r.columns.concat([{data:"FaultTime",title:t},{data:"FlowCard",title:"流程卡"},{data:"Process",title:"工序"},{data:null,title:i,render:n=>n.Remark||n.Fault}]),r},n=$(this).attr("value"),i=()=>{myPromise(5150,{flowCardId:n},!0).then(n=>{n=n.datas;processWarningDangerTemp("success",`流程卡工序（${n.length}）`);$("#successLineBox .refresh").on("click",i);const t=_tablesConfig(!1,n),r=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:null,title:"最后完成时间",render:r.endFinishTime},{data:"Progress",title:"进度",render:r.progress},{data:"Count",title:"加工次数"},{data:"Before",title:"产量"}]);$("#successLineBox table").DataTable(t)})},r=()=>{myPromise(5304,{flowCardId:n},!0).then(n=>{n=n.datas;processWarningDangerTemp("warning",`报警工单（${n.length}）`);$("#warningLineBox .refresh").on("click",r);$("#warningLineBox table").DataTable(t(n,"报警时间","报警信息"))})},u=()=>{myPromise(5305,{flowCardId:n},!0).then(n=>{n=n.datas;processWarningDangerTemp("danger",`中断工单（${n.length}）`);$("#dangerLineBox .refresh").on("click",u);$("#dangerLineBox table").DataTable(t(n,"中断时间","原因"))})};i();r();u()});$("#taskDetailList,#productionLineList").on("click",".show-flow-btn",function(n){const t=$(this).val();myPromise(5300,{taskOrderId:t},!0).then(n=>{const t=_tablesConfig(!1,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"CreateTime",title:"发出日期"},{data:"FlowCard",title:"流程卡号"},{data:"Process",title:"当前工序"},{data:null,title:"状态",render:i.state},{data:"Progress",title:"进度",render:i.progress}]);$("#flowDetailList").DataTable(t);$("#showFlowDetailModal").modal("show")});n.stopPropagation()});$("#pmcPersonQueryMode").on("change",function(){const t=$(this).val(),n=n=>{$("#pmcPersonQuerySelect").html(n).removeClass("hidden"),$("#pmcPersonQueryInput").addClass("hidden")};switch(t){case"state":n(_tableSet().stateOps);break;case"levelId":myPromise(5510,{menu:!0},!0,0).then(t=>n(setOptions(t.datas,"Level")));break;case"processId":myPromise(5030,{menu:!0},!0,0).then(t=>n(setOptions(t.datas,"Process")));break;default:$("#pmcPersonQueryInput").val("").removeClass("hidden");$("#pmcPersonQuerySelect").addClass("hidden")}});$("#pmcGradeList,#addPmcGradeList").on("input",".order",function(){onInput(this,8,0)});$("#addPmcPersonList").on("change",".name",disabledPmcPerson);$("#addPmcPersonList").on("click",".del-btn",function(){delDataTableTr.call(this);disabledPmcPerson();$("#addPmcPersonListBtn").prop("disabled",!1)});$("#addDeviceList,#deviceList").on("change",".category",function(){const n=$(this).val(),t=$(this).closest("tr");myPromise(5024,{categoryId:n,menu:!0},!0,0).then(n=>t.find(".model").html(setOptions(n.datas,"Model")))});$("#addCapacityProcess,#updateCapacityProcess").on("change",function(){const n=$(this).val();myPromise(5560,{categoryId:n},!0).then(n=>{const t=_tablesConfig(!1,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-primary btn-sm set-btn" value="${n.ProcessId}" p="${n.Process}">设置</button>`},{data:null,title:"是否设置",render:i.isFinish}]);const r=$(this).attr("table");$(r).DataTable(t)})});$("#addCapacityList,#updateCapacityList").on("click",".set-btn",function(){showCapacitySetModal.call(this);$("#addCapacitySetBtn").removeClass("hidden")});$("#devCapacitySetList,#personCapacitySetList").on("input",".single",function(){onInput(this,8,0);const n=$(this).closest("tr"),i=$(this).val()>>0,r=n.find(".sCount").val()>>0,u=n.find(".count").text()>>0,t=i*r;n.find(".number").text(t);n.find(".total").text(u*t)});$("#devCapacitySetList,#personCapacitySetList").on("input",".sCount",function(){onInput(this,8,0);const n=$(this).closest("tr"),i=n.find(".single").val()>>0,r=$(this).val()>>0,u=n.find(".count").text()>>0,t=i*r;n.find(".number").text(t);n.find(".total").text(u*t)});$("#capacityList").on("click",".look-btn",function(){showCapacityDetailModal.call(this)});$("#capacityDetailList").on("click",".capacity-btn",function(){let t="qId",n=$(this).val();n&&n!=0||(t="processId",n=$(this).attr("process"));var r=$(this).attr("p");const i={};i[t]=n;myPromise(5564,i,!0).then(n=>{n.Process=r,devicesOperatorsTable(n,!0)});$("#addCapacitySetBtn").addClass("hidden")});$("#addPlanCapacityList").on("click",".capacity-btn",function(){let t="qId",n=$(this).attr("list");n&&n!=0||(t="processId",n=$(this).attr("process"));var r=$(this).attr("p");const i={};i[t]=n;myPromise(5564,i,!0).then(n=>{n.Process=r,devicesOperatorsTable(n,!0)});$("#addCapacitySetBtn").addClass("hidden")});$("#capacityList").on("click",".update-btn",function(){showUpdateCapacityModal.call(this)});$("#addProcessCodeCategoryName").on("change",function(){const n=$(this).val();$("#addProcessCodeBody").empty();myPromise(5056,{CategoryId:n},!0).then(n=>{const t=_tablesConfig(!1,n.datas),i=_tableSet();t.columns.unshift({data:null,title:"",render:i.addBtn.bind(null,"addProcessOpToCode"),orderable:!1,sWidth:"80px"});t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:"Remark",title:"备注"}]);$("#addProcessCodeOpList").DataTable(t)})});$("#notArrangeTaskList").on("click",".del-btn",function(){const n=$(this).closest("tr");n.find(".taskOrder option").prop("disabled",!1);const t=n.find(".taskOrder").val();isStrEmptyOrUndefined(t)||delete _pmcPreviewParams[t];delDataTableTr.call(this);disabledPmcTask();$("#addNotArrangeTaskListBtn").prop("disabled",!1)})}function myPromise(n,t,i=false,r=1,u=undefined){const f={opType:n};return t&&(f.opData=JSON.stringify(t)),i&&(t=!t),new Promise(n=>{ajaxPost("/Relay/Post",f,i=>{if(t)layer.msg(i.errmsg),i.errno==0&&(u!=undefined&&u(),n(i));else{if(i.errno!=0){var r="";return i.datas&&(r=i.datas.join()+","),layer.msg(r+i.errmsg)}u!=undefined&&u();n(i)}},r)})}function _tablesConfig(n,t,i=1){const r={dom:'<"pull-left"l><"pull-right"f>rt<"col-sm-5"i><"col-sm-7"p>',bAutoWidth:!1,destroy:!0,paging:!0,searching:n,ordering:n,data:t,aaSorting:[[i,"asc"]],aLengthMenu:[20,40,60],iDisplayLength:20,language:oLanguage,columns:[{data:null,title:"序号",render:_tableSet().order,sWidth:"25px"}]};return n&&r.columns.unshift({data:null,title:"",render:_tableSet().isEnable,orderable:!1,sWidth:"80px"}),r}function _tableSet(){return{order:(n,t,i,r)=>+r.row+1,isEnable:n=>`<input type="checkbox" class="icb_minimal isEnable" value="${n.Id}">`,input:(n,t)=>`<span class="textOn">${t}</span><input type="text" class="form-control text-center textIn ${n} hidden" maxlength="20" style="min-width:120px;width:${n==="remark"?"100%":"auto"}" value=${t}>`,addInput:(n,t,i)=>`<input type="text" class="form-control text-center ${n}" style="margin:auto;min-width:120px;width:${t}" value="${i}">`,select:(n,t,i)=>`<span class="textOn">${i}</span><select class="form-control hidden textIn ${t}" style="min-width:120px">${n}</select>`,addSelect:(n,t)=>`<select class="form-control ${t}" style="min-width:120px">${n}</select>`,updateBtn:(n,t)=>`<button class="btn btn-success btn-xs" onclick="${n}.call(this)" value="${t}">修改</button>`,delBtn:()=>`<button class="btn btn-danger btn-xs" onclick="delDataTableTr.call(this)"><i class="fa fa-minus"></i></button>`,addBtn:n=>`<button class="btn btn-success btn-xs" onclick="${n}.call(this)"><i class="fa fa-plus"></i></button>`,setBtn:()=>'<button class="btn btn-primary btn-sm set-btn">设置<\/button>',detailBtn:(n,t)=>`<button class="btn btn-info btn-sm" onclick="${n}.call(this)" value="${t}">查看</button>`,processDetail:n=>n.replace(/,/g," > "),isRework:()=>'<select class="form-control isRework" style="width:100px"><option value="0">否<\/option><option value="1">是<\/option><\/select>',isReworkText:n=>n?"是":"否",day:(n,t)=>`<span class="textOn">${t.split(" ")[0]}</span><input type="text" class="pointer textIn hidden form_date form-control text-center ${n}" style="min-width: 100px">`,addDay:(n,t)=>`<input type="text" class="pointer form_date form-control text-center ${n}" value="${t?t.split(" ")[0]:""}" style="min-width: 100px">`,state:n=>{return`<span style="color:${["#CCCCCC","#ff9933","#ff33cc","black","black","#FF0000"][n.State]}">${n.StateStr}</span>`},delivery:n=>{let t="black";return new Date(n)-new Date(getFullTime())<2592e5&&(t="red"),`<span style="color:${t}">${n.split(" ")[0]}</span>`},progress:n=>`${n}%`,endFinishTime:n=>n.State===4?n.EndTime:_tableSet().state(n),stateOps:'<option value="1">正常<\/option><option value="2">休息<\/option>',DevStateOps:'<option value="1">正常<\/option><option value="2">故障<\/option><option value="3">报废<\/option>',isFinish:n=>{let t="remove",i="red";return n.Id&&(t="ok",i="green"),`<span class="glyphicon glyphicon-${t} text-${i} middle" aria-hidden="true" style="font-size:25px"></span>`},hms:n=>`<div class="flexStyle" style="justify-content:center">
                        <input type="text" class="form-control text-center hour" style="width:50px" value="${n.Hour||0}"><span style="margin:0 5px">时</span>
                        <input type="text" class="form-control text-center minute" style="width:50px" value="${n.Min||0}"><span style="margin:0 5px">分</span>
                        <input type="text" class="form-control text-center second" style="width:50px" value="${n.Sec||0}"><span style="margin:0 5px">秒</span>
                    </div>`,showTime:n=>n==="0001-01-01 00:00:00"?"":n.split(" ")[0]}}function addDataTableTr(n,t){$(n).DataTable().row.add(t).draw(!1)}function delDataTableTr(){const n=$(this).parents("tr")[0],i=$(n).find("td:first").text()>>0,r=$(n).parents("table").prop("id"),t=$(`#${r}`).DataTable();t.row(n).remove().draw(!1);t.column(0).nodes().each(n=>{const t=$(n).text()>>0;t>i&&$(n).text(t-1)})}function getDataTableRow(n){return $(n).DataTable().rows().nodes()}function initCheckboxAddEvent(n,t,i){const r=this.api();$(this).find(".isEnable").iCheck({handle:"checkbox",checkboxClass:"icheckbox_minimal-blue",increaseArea:"20%"}).on("ifChanged",function(){const u=$(this).parents("tr"),f=u[0];$(this).is(":checked")?(n.push(f),t&&(t(u,r.row(f).data()),u.find(".textOn").addClass("hidden").siblings(".textIn").removeClass("hidden"))):(n.splice(n.indexOf(f),1),t&&u.find(".textIn").addClass("hidden").siblings(".textOn").removeClass("hidden"),i&&i(u))})}function delTableRow(n,t,i){if(!n||!n.length)return layer.msg("请选择需要删除的数据");const r=[];n.forEach(n=>{const t=$(n);r.push(t.find(".isEnable").val()>>0)});showConfirm("删除所选项",()=>myPromise(t,{ids:r}).then(i))}function addTableRow(n,t,i,r){const f=[],u=getDataTableRow(n);if(!u||!u.length){layer.msg("请先设置数据再添加");return}for(let n=0,i=u.length;n<i;n++){const i=t($(u[n]),!0);if(!i)return;f.push(i)}myPromise(i,f).then(r)}function updateTableRow(n,t,i,r){if(!n||!n.length){layer.msg("请选择需要修改的数据");return}const u=[];for(let i=0,r=n.length;i<r;i++){const r=t($(n[i]),!1);if(!r)return;u.push(r)}myPromise(i,u).then(r)}function initDayTime(n){$(n).find(".form_date").attr("readonly",!0).datepicker({language:"zh-CN",format:"yyyy-mm-dd",maxViewMode:2,todayBtn:"linked",autoclose:!0})}function showScheduleModal(){myPromise(5401).then(n=>{const t=_tablesConfig(!1,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Code",title:"设备"},{data:"FlowCard",title:"流程卡"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress}]);$("#scheduleList").DataTable(t);$("#showScheduleModal").modal("show")})}function getProductionLine(){clearInterval($("#productionLineList")[0].time);$("#lineBox,#productionLineHead,#warningBox,#dangerBox,#successLineBox,#warningLineBox,#dangerLineBox").empty();const n=$("#showMode").val();[workWarningList,taskWarningList,flowWarningList][n]();[workDangerList,taskDangerList,flowDangerList][n]();myPromise([5200,5250,5300][n]).then(t=>{const r=_tablesConfig(!1,t.datas,0),i=_tableSet(),u=[{data:"WorkOrder",title:"工单"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"任务单",render:n=>`<button class="btn btn-info btn-sm show-task-btn" value="${n}">查看</button>`},{data:"Id",title:"",visible:!1}],f=[{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:null,title:"状态",render:i.state},{data:"DeliveryTime",title:"交货日期",render:i.delivery},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"流程卡",render:n=>`<button class="btn btn-info btn-sm show-flow-btn" value="${n}">查看</button>`}],e=[{data:"CreateTime",title:"发出日期"},{data:"FlowCard",title:"流程卡号"},{data:"Process",title:"当前工序"},{data:null,title:"状态",render:i.state},{data:"Progress",title:"进度",render:i.progress},{data:"Id",title:"",visible:!1}];r.columns=r.columns.concat([u,f,e][n]);const o=["work-order","task-order","flow-card"][n];r.createdRow=(t,i)=>{$(t).addClass(`pointer ${o}`).attr("value",i.Id),n==1&&$(t).attr("work",i.WorkOrderId)};$("#productionLineList").DataTable(r)})}function workWarningList(){myPromise(5202).then(n=>{const t=warningDangerCount(n.datas,"WorkOrder");warningDangerTemp("warning",`报警工单（${t.count}）`,"<th>工单<\/th><th>报警次数<\/th>",t.tbody,"workWarningList")})}function workDangerList(){myPromise(5203).then(n=>{const t=warningDangerCount(n.datas,"WorkOrder");warningDangerTemp("danger",`中断工单（${t.count}）`,"<th>工单<\/th><th>中断次数<\/th>",t.tbody,"workDangerList")})}function taskWarningList(){myPromise(5252).then(n=>{const t=warningDangerCount(n.datas,"TaskOrder");warningDangerTemp("warning",`报警任务单（${t.count}）`,"<th>任务单<\/th><th>报警次数<\/th>",t.tbody,"taskWarningList")})}function taskDangerList(){myPromise(5253).then(n=>{const t=warningDangerCount(n.datas,"TaskOrder");warningDangerTemp("danger",`中断任务单（${t.count}）`,"<th>任务单<\/th><th>中断次数<\/th>",t.tbody,"taskDangerList")})}function flowWarningList(){myPromise(5302).then(n=>{const t=warningDangerCount(n.datas,"FlowCard");warningDangerTemp("warning",`报警流程卡（${t.count}）`,"<th>流程卡<\/th><th>报警次数<\/th>",t.tbody,"flowWarningList")})}function flowDangerList(){myPromise(5303).then(n=>{const t=warningDangerCount(n.datas,"FlowCard");warningDangerTemp("danger",`中断流程卡（${t.count}）`,"<th>流程卡<\/th><th>中断次数<\/th>",t.tbody,"flowDangerList")})}function warningDangerCount(n,t){let i=0,r="";return n.forEach(n=>{i+=n.Count,r+=`<tr><td>${n[t]}</td><td>${n.Count}</td></tr>`}),{count:i,tbody:r}}function warningDangerTemp(n,t,i,r,u){const f=`<div class="panel panel-${n}">
                        <div class="panel-heading">
                            <span class="glyphicon glyphicon-refresh pull-right pointer text-bold" aria-hidden="true" title="刷新" onclick="${u}()"></span>
                            <h3 class="panel-title text-center">${t}</h3>
                        </div>
                        <div class="panel-body">
                            <div class="table-responsive">
                                <table class="table table-hover table-striped">
                                    <thead><tr>${i}</tr></thead>
                                    <tbody>${r}</tbody>
                                </table>
                            </div>
                        </div>
                    </div>`;$(`#${n}Box`).html(f)}function processWarningDangerTemp(n,t){const i=`<div class="panel panel-${n}">
                        <div class="panel-heading">
                            <span class="glyphicon glyphicon-refresh pull-right pointer text-bold refresh" aria-hidden="true" title="刷新"></span>
                            <h3 class="panel-title text-center">${t}</h3>
                        </div>
                        <div class="panel-body">
                            <div class="table-responsive mailbox-messages">
                                <table class="table table-hover table-striped"></table>
                            </div>
                        </div>
                    </div>`;$(`#${n}LineBox`).html(i)}function getLineCommon(n,t){const u=getDataTableRow("#productionLineList");Array.from(u).forEach(n=>$(n).css("background",""));$(this).css("background","#d9edf7");const i=$(this).attr("value"),r=()=>{t(i),myPromise(n,{qId:i},!0,0).then(n=>{const i=["white","green","orange","gray","darkblue","#00A9FC"];let r=0;const t=[],u=n.datas.reduce((n,u)=>`${n}<div style="width:100%;position: relative;overflow-x:scroll;height:133px"><div class="line">
                                ${u.Processes.reduce((n,u)=>(t.push(u.Faults),`${n}<div class="line-box">
                                    <div class="line-box-title">
                                        <span>${u.Process}</span>
                                        <span class="info" style="background:${i[u.State]}">${u.StateStr}</span>
                                    </div>
                                    <div class="line-box-content">
                                        <p>进度：${u.Progress}%</p>
                                        <p>合格数：${u.Qualified}</p>
                                        <p>不合格数：${u.Unqualified}</p>
                                        <p>报警列表(${u.Faults.length})：<button class="btn btn-info btn-xs show-btn" value="${r++}">查看</button></p>
                                    </div>
                                </div>`),"")}
                            </div></div>`,"");$("#lineBox").html(u).off("click").on("click",".show-btn",function(){const n=_tablesConfig(!1,t[$(this).val()]);n.columns=n.columns.concat([{data:"FaultTime",title:"时间"},{data:"FlowCard",title:"流程卡"},{data:null,title:"信息",render:n=>n.Remark||n.Fault}]);$("#WarningDetailList").DataTable(n);$("#showWarningDetailModal").modal("show")})})};r();clearInterval($("#productionLineList")[0].time);$("#productionLineList")[0].time=setInterval(r,5e3)}function getWorkLine(n){myPromise(5070,{qId:n},!0,0).then(n=>{n=n.datas;const t=n[0],i=`<tr><td>${t.WorkOrder}</td><td>${t.Target}</td><td>${t.DeliveryTime.split(" ")[0]}</td><td>${t.IssueCount}</td><td>${t.DoneCount}</td><td>${t.Done}</td><td>${t.Delivery}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>工单<\/td><td class="text-blue">交货数量<\/td><td class="text-red">交货日期<\/td><td>任务单数量<\/td><td>已完成任务单数量<\/td><td class="text-info">已完成<\/td><td class="text-green">已交货<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getTaskLine(n){myPromise(5090,{qId:n},!0,0).then(n=>{n=n.datas;const t=n[0],i=`<tr><td>${t.TaskOrder}</td><td>${t.Product}</td><td>${t.Target}</td><td>${t.DeliveryTime.split(" ")[0]}</td><td>${t.IssueCount}</td><td>${t.DoneCount}</td><td>${t.Done}</td><td>${t.Delivery}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>任务单<\/td><td>计划号<\/td><td class="text-blue">交货数量<\/td><td class="text-red">交货日期<\/td><td>已发流程卡<\/td><td>以完成流程卡<\/td><td class="text-info">已完成<\/td><td class="text-green">已交货<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getFlowCardLine(n){myPromise(5110,{qId:n},!0,0).then(n=>{n=n.datas;const t=n[0],i=`<tr><td>${t.FlowCard}</td><td>${t.TaskOrder}</td><td>${t.Product}</td><td>${t.ProcessCode}</td><td>${t.Done}</td><td>${t.Left}</td><td>${codeTime(t.Consume)}</td><td>${t.OnTimeRate}%</td><td>${t.RiskLevelStr}</td></tr>`;$("#productionLineHead").html(`${'<tr class="text-bold"><td>流程卡号<\/td><td>任务单<\/td><td>计划号<\/td><td>流程编号<\/td><td class="text-info">已完成<\/td><td class="text-orange">未完成<\/td><td>已耗时<\/td><td>按时率<\/td><td>风险等级<\/td><\/tr>'}${i}`)})}function getPersonList(){myPromise(5e3).then(n=>{_personTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Account",title:"用户名",render:i.input.bind(null,"account")},{data:"Number",title:"编号",render:i.input.bind(null,"number")},{data:"Name",title:"姓名",render:i.input.bind(null,"name")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_personTrs,(n,t)=>{n.find(".account").val(t.Account),n.find(".number").val(t.Number),n.find(".name").val(t.Name),n.find(".remark").val(t.Remark)})};$("#personList").DataTable(t)})}function getPersonTrInfo(n,t){const i=n.find(".account").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("用户名不能为空");const r=n.find(".number").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("编号不能为空");const u=n.find(".name").val().trim();if(isStrEmptyOrUndefined(u))return void layer.msg("姓名不能为空");const f={Account:i,Number:r,Name:u,Remark:n.find(".remark").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updatePerson(){updateTableRow(_personTrs,getPersonTrInfo,5001,getPersonList)}function addPersonModel(){const i={Account:"",Number:"",Name:"",Remark:""},t=_tablesConfig(!1,[i]),n=_tableSet();t.columns=t.columns.concat([{data:"Account",title:"用户名",render:n.addInput.bind(null,"account","auto")},{data:"Number",title:"编号",render:n.addInput.bind(null,"number","auto")},{data:"Name",title:"姓名",render:n.addInput.bind(null,"name","auto")},{data:"Remark",title:"备注",render:n.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:n.delBtn}]);$("#addPersonList").DataTable(t);$("#addPersonListBtn").off("click").on("click",()=>addDataTableTr("#addPersonList",i));$("#addPersonModel").modal("show")}function addPerson(){addTableRow("#addPersonList",getPersonTrInfo,5002,()=>{$("#addPersonModel").modal("hide"),getPersonList()})}function delPerson(){delTableRow(_personTrs,5003,getPersonList)}function getDeviceList(){const n=myPromise(5020),t=myPromise(5010);Promise.all([n,t]).then(n=>{_deviceTrs=[];const i=_tablesConfig(!0,n[1].datas),t=_tableSet();i.columns=i.columns.concat([{data:"StateStr",title:"状态",render:t.select.bind(null,t.DevStateOps,"state")},{data:"Code",title:"机台号",render:t.input.bind(null,"code")},{data:"Category",title:"类型",render:t.select.bind(null,setOptions(n[0].datas,"Category"),"category")},{data:"Model",title:"型号",render:t.select.bind(null,"","model")},{data:"Priority",title:"优先级",render:t.input.bind(null,"priority")},{data:"Remark",title:"备注",render:t.input.bind(null,"remark")}]);i.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceTrs,(n,t)=>{n.find(".state").val(t.State),n.find(".code").val(t.Code),n.find(".category").val(t.CategoryId),myPromise(5024,{categoryId:t.CategoryId,menu:!0},!0,0).then(i=>n.find(".model").html(setOptions(i.datas,"Model")).val(t.ModelId)),n.find(".priority").val(t.Priority),n.find(".remark").val(t.Remark)})};$("#deviceList").DataTable(i)})}function getDeviceTrInfo(n,t){const i=n.find(".code").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("机台号不能为空");const r=n.find(".category").val();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择设备类型");const u=n.find(".model").val();if(isStrEmptyOrUndefined(u))return void layer.msg("请选择设备型号");const f={Code:i,CategoryId:r,ModelId:u,Priority:n.find(".priority").val()>>0,Remark:n.find(".remark").val(),State:t?1:n.find(".state").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updateDevice(){updateTableRow(_deviceTrs,getDeviceTrInfo,5011,getDeviceList)}function showAddDeviceModel(){let n;myPromise(5020).then(t=>(n=t.datas,myPromise(5024,{categoryId:n.Id,menu:!0},!0,0))).then(t=>{const u={Code:"",Category:"",Model:"",Priority:0,Remark:""},r=_tablesConfig(!1,[u]),i=_tableSet();r.columns=r.columns.concat([{data:"Code",title:"机台号",render:i.addInput.bind(null,"code","auto")},{data:"Category",title:"设备类型",render:i.addSelect.bind(null,setOptions(n,"Category"),"category")},{data:"Model",title:"设备型号",render:i.addSelect.bind(null,setOptions(t.datas,"Model"),"model")},{data:"Priority",title:"优先级",render:i.addInput.bind(null,"priority","auto")},{data:"Remark",title:"备注",render:i.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:i.delBtn}]);$("#addDeviceList").DataTable(r);$("#addDeviceListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceList",u));$("#addDeviceModel").modal("show")})}function addDevice(){addTableRow("#addDeviceList",getDeviceTrInfo,5012,()=>{$("#addDeviceModel").modal("hide"),getDeviceList()})}function delDevice(){delTableRow(_deviceTrs,5013,getDeviceList)}function showDeviceCategoryModal(){getDeviceCategoryList();$("#deviceCategoryModal").modal("show")}function getDeviceCategoryList(){myPromise(5020).then(n=>{_deviceCategoryTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Category",title:"类型",render:i.input.bind(null,"category")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceCategoryTrs,(n,t)=>{n.find(".category").val(t.Category),n.find(".remark").val(t.Remark)})};$("#deviceCategoryList").DataTable(t)})}function getDeviceCategoryTrInfo(n,t){const i=n.find(".category").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("设备类型不能为空");const r={Category:i,Remark:n.find(".remark").val()};return t||(r.Id=n.find(".isEnable").val()>>0),r}function updateDeviceCategory(){updateTableRow(_deviceCategoryTrs,getDeviceCategoryTrInfo,5021,()=>{getDeviceCategoryList(),getDeviceList()})}function addDeviceCategoryModel(){const i={Category:"",Remark:""},n=_tablesConfig(!1,[i]),t=_tableSet();n.columns=n.columns.concat([{data:"Category",title:"类型",render:t.addInput.bind(null,"category","auto")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);$("#addDeviceCategoryList").DataTable(n);$("#addDeviceCategoryListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceCategoryList",i));$("#addDeviceCategoryModel").modal("show")}function addDeviceCategory(){addTableRow("#addDeviceCategoryList",getDeviceCategoryTrInfo,5022,()=>{$("#addDeviceCategoryModel").modal("hide"),getDeviceCategoryList(),getDeviceList()})}function delDeviceCategory(){delTableRow(_deviceCategoryTrs,5023,()=>{getDeviceCategoryList(),getDeviceList()})}function showDeviceModelModal(){getDeviceModelList();$("#showDeviceModelModal").modal("show")}function getDeviceModelList(){const n=myPromise(5020,{menu:!0},!0),t=myPromise(5024);Promise.all([n,t]).then(n=>{_deviceModelTrs=[];const t=_tablesConfig(!0,n[1].datas),i=_tableSet();t.columns=t.columns.concat([{data:"Category",title:"类型",render:i.select.bind(null,setOptions(n[0].datas,"Category"),"category")},{data:"Model",title:"型号",render:i.input.bind(null,"model")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_deviceModelTrs,(n,t)=>{n.find(".category").val(t.CategoryId),n.find(".model").val(t.Model),n.find(".remark").val(t.Remark)})};$("#deviceModelList").DataTable(t)})}function getDeviceModelTrInfo(n,t){const i=n.find(".category").val();if(isStrEmptyOrUndefined(i))return void layer.msg("请选择设备类型");const r=n.find(".model").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("设备型号不能为空");const u={CategoryId:i,Model:r,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateDeviceModel(){updateTableRow(_deviceModelTrs,getDeviceModelTrInfo,5025,()=>{getDeviceModelList(),getDeviceList()})}function addDeviceModelModel(){myPromise(5020).then(n=>{const r={Category:"",Model:"",Remark:""},i=_tablesConfig(!1,[r]),t=_tableSet();i.columns=i.columns.concat([{data:"Category",title:"类型",render:t.addSelect.bind(null,setOptions(n.datas,"Category"),"category")},{data:"Model",title:"型号",render:t.addInput.bind(null,"model","auto")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);$("#addDeviceModelList").DataTable(i);$("#addDeviceModelListBtn").off("click").on("click",()=>addDataTableTr("#addDeviceModelList",r));$("#addDeviceModelModel").modal("show")})}function addDeviceModel(){addTableRow("#addDeviceModelList",getDeviceModelTrInfo,5026,()=>{$("#addDeviceModelModel").modal("hide"),getDeviceModelList(),getDeviceList()})}function delDeviceModel(){delTableRow(_deviceModelTrs,5027,()=>{getDeviceModelList(),getDeviceList()})}function getProcessCodeList(){myPromise(5040).then(n=>{_processCodeTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Code",title:"编号"},{data:"Category",title:"类型"},{data:"Processes",title:"流程详情",render:i.processDetail},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:i.updateBtn.bind(null,"showUpdateProcessCodeModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processCodeTrs)};$("#processCodeList").DataTable(t)})}function addEditProcessCodeModel(n){myPromise(5050).then(t=>(t=t.datas,$("#addProcessCodeCategoryName").html(setOptions(t,"Category")),n(),$("#addProcessCodeModel").modal("show"),myPromise(5056,{CategoryId:t[0].Id},!0)))}function addUpProcessCode(n){const i=$("#addProcessCodeName").val().trim();if(isStrEmptyOrUndefined(i))return layer.msg("编号不能为空");const r=$("#addProcessCodeCategoryName").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择类型");const t=[];if($("#addProcessCodeBody tr").each((n,i)=>t.push($(i).attr("list"))),!t.length)return layer.msg("请设置流程");const u=t.join(),f=n?5042:5041,e=[{Code:i,CategoryId:r,List:u,Remark:$("#addProcessCodeRemark").val().trim(),Id:n?0:$("#addEditBtn").val()}];myPromise(f,e).then(()=>{$("#addProcessCodeModel").modal("hide"),getProcessCodeList()})}function addProcessOpTo(n,t){const r=$(this).parents("tr")[0],i=$(n).DataTable().row(r).data(),u=`<tr list="${i.Id}">
                             <td class="num"></td>
                             <td>${i.Process}</td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`;$(t).append(u);setAddProcessOpList(t)}function addProcessOpToCode(){addProcessOpTo.call(this,"#addProcessCodeOpList","#addProcessCodeBody")}function setAddProcessOpList(n){const t=$(`${n} tr`);for(let n=0,i=t.length;n<i;n++){const i=t.eq(n);i.find(".num").text(n+1)}}function addProcessCodeModel(){addEditProcessCodeModel(()=>{$("#addProcessCodeName,#addProcessCodeRemark").val("");$("#addProcessCodeCategoryName").trigger("change");$("#addEditTitle").text("添加流程编号");$("#addEditBtn").text("添加").val(0).off("click").on("click",addUpProcessCode.bind(null,!0))})}function showUpdateProcessCodeModel(){const t=$(this).parents("tr")[0],n=$("#processCodeList").DataTable().row(t).data();addEditProcessCodeModel(()=>{$("#addProcessCodeName").val(n.Code);$("#addProcessCodeCategoryName ").val(n.CategoryId).trigger("change");$("#addProcessCodeRemark").val(n.Remark);const t=n.List?n.List.split(","):[],i=n.Processes?n.Processes.split(","):[],r=t.reduce((n,t,r)=>`${n}<tr list="${t}">
                             <td class="num"></td>
                             <td>${i[r]}</td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`,"");$("#addProcessCodeBody").html(r);$("#addEditTitle").text("修改流程编号");$("#addEditBtn").text("修改").val(n.Id).off("click").on("click",addUpProcessCode.bind(null,!1));setAddProcessOpList("#addProcessCodeBody")})}function delProcessCode(){delTableRow(_processCodeTrs,5043,getProcessCodeList)}function showProcessCodeCategoryModal(){getProcessCodeCategoryList();$("#processCodeCategoryModal").modal("show")}function getProcessCodeCategoryList(){myPromise(5050).then(n=>{_processCodeCategoryTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Category",title:"类型"},{data:"List",title:"标准流程",render:i.processDetail},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:i.updateBtn.bind(null,"showUpdateProcessCodeCategoryModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processCodeCategoryTrs)};$("#processCodeCategoryList").DataTable(t)})}function addEditProcessCodeCategoryModel(n){myPromise(5030).then(t=>{const i=_tablesConfig(!1,t.datas),r=_tableSet();i.columns.unshift({data:null,title:"",render:r.addBtn.bind(null,"addProcessOpToCodeCategory"),orderable:!1,sWidth:"80px"});i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:"Remark",title:"备注"}]);$("#addProcessCodeCategoryOpList").DataTable(i);$("#addProcessCodeCategoryBody").empty();n();$("#addProcessCodeCategoryModel").modal("show")})}function addUpProcessCodeCategory(n){const i=$("#addProcessCodeCategory").val().trim();if(isStrEmptyOrUndefined(i))return layer.msg("类型不能为空");const t={Category:i,Remark:$("#addProcessCodeCategoryRemark").val().trim()};n||(t.Id=$("#addEditProcessCategoryBtn").val());const r=Array.from($("#addProcessCodeCategoryBody tr")).map((n,t)=>{const i={Order:t+1,ProcessId:$(n).attr("list")},r=$(n).attr("processid");return r&&(i.Id=r),i});if(!r.length)return layer.msg("请设置流程");t.Processes=r;const u=n?5052:5051;myPromise(u,[t]).then(()=>{$("#addProcessCodeCategoryModel").modal("hide"),getProcessCodeCategoryList()})}function addProcessOpToCodeCategory(){addProcessOpTo.call(this,"#addProcessCodeCategoryOpList","#addProcessCodeCategoryBody")}function addProcessCodeCategoryModel(){addEditProcessCodeCategoryModel(()=>{$("#addProcessCodeCategory").val("");$("#addProcessCodeCategoryRemark").val("");$("#addEditProcessCategoryTitle").text("添加流程编号类型");$("#addEditProcessCategoryBtn").text("添加").val(0).off("click").on("click",addUpProcessCodeCategory.bind(null,!0))})}function showUpdateProcessCodeCategoryModel(){const n=$(this).val();myPromise(5056,{categoryId:n},!0).then(t=>{addEditProcessCodeCategoryModel(()=>{const r=$(this).parents("tr")[0],i=$("#processCodeCategoryList").DataTable().row(r).data();$("#addProcessCodeCategory").val(i.Category);$("#addProcessCodeCategoryRemark").val(i.Remark);const u=t.datas.reduce((n,t)=>`${n}<tr list="${t.ProcessId}" processid="${t.Id}">
                             <td class="num"></td>
                             <td>${t.Process}</td>
                             <td><button class="btn btn-danger btn-xs delBtn"><i class="fa fa-minus"></i></button></td>
                           </tr>`,"");$("#addProcessCodeCategoryBody").append(u);$("#addEditProcessCategoryTitle").text("修改流程编号类型");$("#addEditProcessCategoryBtn").text("修改").val(n).off("click").on("click",addUpProcessCodeCategory.bind(null,!1));setAddProcessOpList("#addProcessCodeCategoryBody")})})}function delProcessCodeCategory(){delTableRow(_processCodeCategoryTrs,5053,getProcessCodeCategoryList)}function getProcessOpList(){const n=myPromise(5020),t=myPromise(5030);Promise.all([n,t]).then(n=>{_processOpTrs=[];const t=_tablesConfig(!0,n[1].datas),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"流程",render:i.input.bind(null,"process")},{data:"DeviceCategory",title:"设备类型",render:i.select.bind(null,setOptions(n[0].datas,"Category"),"category")},{data:"Order",title:"顺序",render:i.input.bind(null,"order")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_processOpTrs,(n,t)=>{n.find(".process").val(t.Process),n.find(".category").val(t.DeviceCategoryId),n.find(".remark").val(t.Remark)})};$("#processOpList").DataTable(t)})}function getProcessOpTrInfo(n,t){const i=n.find(".process").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("流程名称不能为空");const r=n.find(".category").val();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择设备类型");const u={DeviceCategoryId:r,Process:i,Order:n.find(".order").val()>>0,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateProcessOp(){updateTableRow(_processOpTrs,getProcessOpTrInfo,5031,getProcessOpList)}function addProcessOpModel(){myPromise(5020).then(n=>{const r={DeviceCategory:"",Process:"",Order:"",Remark:""};n.datas.unshift({Category:"无",Id:0});const i=_tablesConfig(!1,[r]),t=_tableSet();i.columns=i.columns.concat([{data:"Process",title:"流程",render:t.addInput.bind(null,"process","auto")},{data:"DeviceCategory",title:"设备类型",render:t.addSelect.bind(null,setOptions(n.datas,"Category"),"category")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:"Order",title:"顺序",render:t.addInput.bind(null,"order","auto")},{data:null,title:"删除",render:t.delBtn}]);$("#addProcessOpList").DataTable(i);$("#addProcessOpListBtn").off("click").on("click",()=>addDataTableTr("#addProcessOpList",r));$("#addProcessOpModel").modal("show")})}function addProcessOp(){addTableRow("#addProcessOpList",getProcessOpTrInfo,5032,()=>{$("#addProcessOpModel").modal("hide"),getProcessOpList()})}function delProcessOp(){delTableRow(_processOpTrs,5033,getProcessOpList)}function getPlanList(){myPromise(5060).then(n=>{_planTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Product",title:"计划号"},{data:"Number",title:"日产能"},{data:"Category",title:"流程编号类型"},{data:"Capacity",title:"产能类型"},{data:"ProcessCodes",title:"流程编号清单"},{data:"Remark",title:"备注"},{data:"Id",title:"修改",render:i.updateBtn.bind(null,"showUpdatePlanModel"),sWidth:"80px"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_planTrs)};$("#planList").DataTable(t)})}function disabledProcessCode(){const n=$("#planProcessCodeList .process-code-select");disabledProcessCodeCommon(n)}function disabledProcessCodeCommon(n){const t=[];(n.find("option").prop("disabled",!1),n.each((n,i)=>{const r=$(i).val();r&&t.push(r)}),t.length)&&n.find("option").each((n,i)=>{const r=$(i);~t.indexOf(r.val())&&r.prop("disabled",!0)})}function addEditPlanModel(n,t){_planProcessCodeInfo={};myPromise(5050,{menu:!0},!0).then(i=>$("#addPlanProcess").html(setOptions(i.datas,"Category")).val(t||i.datas[0].Id).trigger("change",n))}function addUpPlan(n){const u=$("#addPlanProcess").val()>>0;if(isStrEmptyOrUndefined(u))return layer.msg("请选择流程编号类型");const f=$("#addPlanCapacity").val()>>0;if(isStrEmptyOrUndefined(f))return layer.msg("请选择产能类型");const e=$("#addPlanName").val().trim();if(isStrEmptyOrUndefined(e))return layer.msg("计划号不能为空");const s=$("#addPlanRemark").val().trim(),i={CategoryId:u,CapacityId:f,Product:e,Remark:s};let r;n?r=5062:(r=5061,i.Id=$("#addEditPlanBtn").val());const o=[];let t=getDataTableRow("#addPlanCapacityList");for(let i=0,r=t.length;i<r;i++){const r=$(t[i]),e=r.find(".rate").val().trim()>>0;if(isStrEmptyOrUndefined(e))return layer.msg("请输入合格率");const s=r.find(".hour").val().trim()>>0,h=r.find(".minute").val().trim()>>0,c=r.find(".second").val().trim()>>0;if(isStrEmptyOrUndefined(s)&&isStrEmptyOrUndefined(h)&&isStrEmptyOrUndefined(c))return layer.msg("请输入工时");const u={Rate:e,Day:0,Hour:s,Min:h,Sec:c},f=r.find(".capacity-btn"),l=f.val(),a=f.attr("list")>>0;if(isStrEmptyOrUndefined(a))return layer.msg("请先配置工序产能");!n&&l!=0?u.Id=l:u.ProcessId=f.attr("process");o[i]=u}i.ProductCapacities=o;t=[];$("#planProcessCodeList .process-table").each((n,i)=>{Array.from(getDataTableRow(i)).forEach(n=>t.push(n))});i.ProductProcesses=t.map(n=>{const t=$(n),i=t.closest("table").DataTable().row(t[0]).data(),u=t.find(".set-btn")[0].ProcessData||[],r={ProcessRepeat:t.find(".isRework").val()>>0,ProcessNumber:t.find(".processNumber").val(),ProcessData:JSON.stringify(u)};return i.Id?r.Id=i.Id:(r.ProcessCodeId=i.ProcessCodeId,r.ProcessId=i.ProcessId),r});myPromise(r,[i]).then(()=>{$("#addPlanModel").modal("hide"),getPlanList()})}function addPlanModel(){addEditPlanModel(n=>{$("#addPlanCapacity").html(setOptions(n,"Capacity")).trigger("change");$("#addEditPlanTitle").text("添加计划号");$("#addPlanName,#addPlanRemark").val("");$("#addEditPlanBtn").text("添加").val(0).off("click").on("click",addUpPlan.bind(null,!0))})}function showUpdatePlanModel(){const n=$(this).val();myPromise(5060,{qId:n},!0).then(n=>{const t=n.datas[0];addEditPlanModel(n=>{$("#addPlanCapacity").html(setOptions(n,"Capacity")).val(t.CapacityId);$("#addEditPlanTitle").text("修改计划号");$("#addPlanName").val(t.Product);$("#addPlanRemark").val(t.Remark);const f=t.ProductCapacities,r=_tablesConfig(!1,f),u=_tableSet();r.columns=r.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-info btn-sm capacity-btn" value="${n.Id}" list="${n.ListId}" process="${n.ProcessId}" pid="${n.PId}" p="${n.Process}">查看</button>`},{data:"Rate",title:"合格率",render:u.addInput.bind(null,"rate","auto")},{data:null,title:"工时",render:u.hms}]);$("#addPlanCapacityList").DataTable(r);const e=t.ProductProcesses,i={};e.forEach(n=>{const t=n.ProcessCodeId;i[t]?i[t].push(n):i[t]=[n]});for(let n in i){$("#addPlanProcessList").click();$("#planProcessCodeList .process-code-select:last").val(n);$("#planProcessCodeList .process-code-category:last").text(`类型：${_planProcessCodeInfo[n].Category}`);const t=_tablesConfig(!1,i[n]),r=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:null,title:"可否返工",render:r.isRework},{data:"ProcessNumber",title:"单台加工数量",bVisible:!1,render:r.addInput.bind(null,"processNumber","auto")},{data:null,title:"工艺数据",render:r.setBtn}]);t.createdRow=(n,t)=>{n=$(n),n.find(".isRework").val(t.ProcessRepeat>>0),n.find(".set-btn")[0].ProcessData=JSON.parse(t.ProcessData)};$("#planProcessCodeList .process-table:last").DataTable(t)}disabledProcessCode();$("#addEditPlanBtn").text("修改").val(t.Id).off("click").on("click",addUpPlan.bind(null,!1))},t.CategoryId)})}function delPlan(){delTableRow(_planTrs,5063,getPlanList)}function showCapacityModel(){getCapacityList();$("#showCapacityModel").modal("show")}function getCapacityList(){myPromise(5530).then(n=>{_capacityTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Capacity",title:"类型",render:i.input.bind(null,"capacity")},{data:"Category",title:"流程编号类型"},{data:null,title:"产能清单",render:n=>`<button class="btn btn-info btn-sm look-btn look-update-btn" value="${n.Id}" categoryid="${n.CategoryId}" category="${n.Category}">查看</button>`},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_capacityTrs,(n,t)=>{n.find(".capacity").val(t.Capacity),n.find(".look-update-btn").addClass("update-btn btn-success").removeClass("btn-info look-btn").text("修改"),n.find(".remark").val(t.Remark)},n=>{n.find(".look-update-btn").removeClass("update-btn btn-success").addClass("btn-info look-btn").text("查看")})};$("#capacityList").DataTable(t)})}function updateCapacity(){const n=n=>{const t=n.find(".capacity").val().trim();return isStrEmptyOrUndefined(t)?void layer.msg("产能类型不能为空"):{Capacity:t,Remark:n.find(".remark").val(),Id:n.find(".isEnable").val()>>0}};updateTableRow(_capacityTrs,n,5531,getCapacityList)}function showAddCapacityCategoryModel(){$("#addCapacityCategory,#addCapacityRemark").val("");myPromise(5050).then(n=>{$("#addCapacityProcess").html(setOptions(n.datas,"Category")).trigger("change"),$("#showAddCapacityCategoryModel").modal("show")})}function devicesOperatorsTable(n,t=false){const e=n.Process;var o=`产能${t?"查看":"设置"}-${e}`;$("#showCapacitySetModal").find(".modal-title").text(o);const f=n.Devices,i=_tableSet(),r=_tablesConfig(!1,f);r.columns=r.columns.concat([{data:"Category",title:"设备类型"},{data:"Model",title:"设备型号"},{data:"Count",title:"设备数量",sClass:"count"},{data:"Single",title:"单次数量",render:t?n=>n:i.addInput.bind(null,"single","auto")},{data:"SingleCount",title:"日加工次数",render:t?n=>n:i.addInput.bind(null,"sCount","auto")},{data:"Number",title:"单台日产能",sClass:"number"},{data:"Total",title:"日总产能",sClass:"total"}]);$("#devCapacitySetList").DataTable(r);f.length?$("#devCapacitySetBox").removeClass("hidden"):$("#devCapacitySetBox").addClass("hidden");const s=n.Operators,u=_tablesConfig(!1,s);u.columns=u.columns.concat([{data:"Level",title:"等级"},{data:"Count",title:"员工数量",sClass:"count"},{data:"Single",title:"单次数量",render:t?n=>n:i.addInput.bind(null,"single","auto")},{data:"SingleCount",title:"日加工次数",render:t?n=>n:i.addInput.bind(null,"sCount","auto")},{data:"Number",title:"单台日产能",sClass:"number"},{data:"Total",title:"日总产能",sClass:"total"}]);$("#personCapacitySetList").DataTable(u);$("#showCapacitySetModal").modal("show")}function showCapacitySetModal(){let n="processId",t=$(this).val();this.exist&&(n="qId",t==0&&(n="processId",t=$(this).attr("process")));var r=$(this).attr("p");const i={};i[n]=t;this.Devices?devicesOperatorsTable(this):myPromise(5564,i,!0).then(n=>{n.Process=r,devicesOperatorsTable(n)});$("#addCapacitySetBtn").off("click").on("click",()=>{const n=(n,t)=>{const i=Array.from($(n).DataTable().data()),r=Array.from(getDataTableRow(n));this[t]=i.map((n,t)=>{const i=$(r[t]);return n.Single=i.find(".single").val()>>0,n.SingleCount=i.find(".sCount").val()>>0,n.Number=i.find(".number").text()>>0,n.Total=i.find(".total").text()>>0,n})};n("#devCapacitySetList","Devices");n("#personCapacitySetList","Operators");layer.msg("产能设置成功");$(this).closest("tr").find(".glyphicon").addClass("glyphicon-ok text-green").removeClass("glyphicon-remove text-red");$("#showCapacitySetModal").modal("hide")})}function addCapacity(){const n=$("#addCapacityCategory").val().trim();if(isStrEmptyOrUndefined(n))return void layer.msg("产能类型不能为空");const u=$("#addCapacityRemark").val().trim(),t=$("#addCapacityProcess").val();if(isStrEmptyOrUndefined(t))return void layer.msg("请选择流程编号");const i=$(getDataTableRow("#addCapacityList")).find(".set-btn"),r=[];for(let n=0,t=i.length;n<t;n++){const t=i[n];if(!t.Devices)return void layer.msg("请设置产能");let u=[],f=[],e=[],o=[],s=[],h=[],c=[],l=[];t.Devices&&t.Devices.forEach(n=>{u.push(n.ModelId),o.push(n.Number),f.push(n.Single),e.push(n.SingleCount)});t.Operators&&t.Operators.forEach(n=>{s.push(n.LevelId),l.push(n.Number),h.push(n.Single),c.push(n.SingleCount)});r[n]={ProcessId:$(t).val(),DeviceModel:u.join(),DeviceNumber:o.join(),DeviceSingle:f.join(),DeviceSingleCount:e.join(),OperatorLevel:s.join(),OperatorNumber:l.join(),OperatorSingle:h.join(),OperatorSingleCount:c.join()}}const f=[{Capacity:n,CategoryId:t,Remark:u,List:r}];myPromise(5532,f).then(()=>{$("#showAddCapacityCategoryModel").modal("hide"),getCapacityList()})}function updateCapacityCategory(){const n=$(this).val(),t=$("#updateCapacityProcess").val();if(isStrEmptyOrUndefined(t))return void layer.msg("请选择流程编号");const i=$(getDataTableRow("#updateCapacityList")).find(".set-btn"),r=[];for(let t=0,u=i.length;t<u;t++){const u=i[t];if(!u.Devices&&!u.exist)return void layer.msg("请设置产能");let f,e,o,s,h,c,l,a;if(u.Devices){const n=[],t=[],i=[],r=[],v=[],y=[],p=[],w=[];u.Devices.forEach(i=>{n.push(i.ModelId),t.push(i.Number),v.push(i.Single),p.push(i.SingleCount)});u.Operators.forEach(n=>{i.push(n.LevelId),r.push(n.Number),y.push(n.Single),w.push(n.SingleCount)});f=n.join();s=t.join();h=i.join();a=r.join();e=v.join();c=y.join();o=p.join();l=w.join()}else f=u.DeviceModel,s=u.DeviceNumber,h=u.OperatorLevel,a=u.OperatorNumber,e=u.DeviceSingle,c=u.OperatorSingle,o=u.DeviceSingleCount,l=u.OperatorSingleCount;r[t]={CapacityId:n,ProcessId:u.exist?$(u).attr("process"):$(u).val(),DeviceModel:f,DeviceNumber:s,DeviceSingle:e,DeviceSingleCount:o,OperatorLevel:h,OperatorNumber:a,OperatorSingle:c,OperatorSingleCount:l,Id:u.exist?$(u).val():0}}const u={Id:n,CategoryId:t,List:r};myPromise(5561,u).then(()=>{$("#showUpdateCapacityCategoryModel").modal("hide"),getCapacityList()})}function delCapacity(){delTableRow(_capacityTrs,5533,getCapacityList)}function showCapacityDetailModal(){myPromise(5560,{capacityId:$(this).val()},!0).then(n=>{$("#capacityDetailCode").text($(this).attr("category"));const t=_tablesConfig(!1,n.datas);t.columns=t.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-info btn-sm capacity-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">查看</button>`}]);$("#capacityDetailList").DataTable(t);$("#showCapacityDetailModal").modal("show")})}function showUpdateCapacityModal(){const n=$(this).attr("categoryid"),t=$(this).val(),i=myPromise(5050),r=myPromise(5560,{capacityId:t,categoryId:n},!0);$("#updateCapacityCategoryBtn").val(t);Promise.all([i,r]).then(t=>{$("#updateCapacityProcess").html(setOptions(t[0].datas,"Category")).val(n);const i=_tablesConfig(!1,t[1].datas),r=_tableSet();i.columns=i.columns.concat([{data:"Process",title:"流程"},{data:"Category",title:"设备类型"},{data:null,title:"产能",render:n=>`<button class="btn btn-info btn-sm set-btn" value="${n.Id}" process="${n.ProcessId}" p="${n.Process}">查看</button>`},{data:null,title:"是否设置",render:r.isFinish}]);i.createdRow=(n,t)=>{const i=$(n).find(".set-btn")[0];i.Process=t.Process;i.DeviceModel=t.DeviceModel;i.DeviceNumber=t.DeviceNumber;i.DeviceSingle=t.DeviceSingle;i.DeviceSingleCount=t.DeviceSingleCount;i.OperatorLevel=t.OperatorLevel;i.OperatorNumber=t.OperatorNumber;i.OperatorSingle=t.OperatorSingle;i.OperatorSingleCount=t.OperatorSingleCount;i.exist=!0};$("#updateCapacityList").DataTable(i);$("#showUpdateCapacityCategoryModel").modal("show")})}function getWorkOrderList(){myPromise(5070).then(n=>{_workOrderTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"WorkOrder",title:"工单",render:i.input.bind(null,"workOrder")},{data:"StateStr",title:"状态"},{data:"DeliveryTime",title:"交货日期",render:i.day.bind(null,"deliveryTime")},{data:"Target",title:"目标产量",render:i.input.bind(null,"target")},{data:"DoneTarget",title:"已完成",sClass:"text-green"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.createdRow=n=>initDayTime(n);t.drawCallback=function(){initCheckboxAddEvent.call(this,_workOrderTrs,(n,t)=>{n.find(".workOrder").val(t.WorkOrder),n.find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update"),n.find(".target").val(t.Target),n.find(".remark").val(t.Remark)})};$("#workOrderList").DataTable(t)})}function getWorkOrderTrInfo(n,t){const i=n.find(".workOrder").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("工单不能为空");const r=n.find(".deliveryTime").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择交货日期");const u=n.find(".target").val().trim();if(isStrEmptyOrUndefined(u))return void layer.msg("目标产量不能为0");const f={WorkOrder:i,DeliveryTime:r,Target:u,Remark:n.find(".remark").val()};return t||(f.Id=n.find(".isEnable").val()>>0),f}function updateWorkOrder(){updateTableRow(_workOrderTrs,getWorkOrderTrInfo,5071,getWorkOrderList)}function addWorkOrderModel(){const i={WorkOrder:"",DeliveryTime:getDate(),Target:0,Remark:""},t=_tablesConfig(!1,[i]),n=_tableSet();t.columns=t.columns.concat([{data:"WorkOrder",title:"工单",render:n.addInput.bind(null,"workOrder","auto")},{data:"DeliveryTime",title:"交货日期",render:n.addDay.bind(null,"deliveryTime")},{data:"Target",title:"目标产量",render:n.addInput.bind(null,"target","auto")},{data:"Remark",title:"备注",render:n.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:n.delBtn}]);t.createdRow=n=>initDayTime(n);$("#addWorkOrderList").DataTable(t);$("#addWorkOrderListBtn").off("click").on("click",()=>addDataTableTr("#addWorkOrderList",i));$("#addWorkOrderModel").modal("show")}function addWorkOrder(){addTableRow("#addWorkOrderList",getWorkOrderTrInfo,5072,()=>{$("#addWorkOrderModel").modal("hide"),getWorkOrderList()})}function delWorkOrder(){delTableRow(_workOrderTrs,5073,getWorkOrderList)}function getTaskOrderList(){const n=myPromise(5060),t=myPromise(5070),i=myPromise(5090);Promise.all([n,t,i]).then(n=>{_taskOrderTrs=[];const i=_tablesConfig(!0,n[2].datas),t=_tableSet();i.columns=i.columns.concat([{data:"TaskOrder",title:"任务单",render:t.input.bind(null,"taskOrder")},{data:"StateStr",title:"状态"},{data:"Target",title:"目标产量",render:t.input.bind(null,"target")},{data:"Done",title:"已完成",sClass:"text-green"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"WorkOrder",title:"工单",render:t.select.bind(null,setOptions(n[1].datas,"WorkOrder"),"workOrder")},{data:"Product",title:"计划号",render:t.select.bind(null,setOptions(n[0].datas,"Product"),"product")},{data:"DeliveryTime",title:"交货日期",render:t.day.bind(null,"deliveryTime")},{data:"Id",title:"详情",render:t.detailBtn.bind(null,"showTaskOrderDetailModal")},{data:"Remark",title:"备注",render:t.input.bind(null,"remark")}]);i.createdRow=n=>initDayTime(n);i.drawCallback=function(){initCheckboxAddEvent.call(this,_taskOrderTrs,(n,t)=>{n.find(".taskOrder").val(t.TaskOrder),n.find(".target").val(t.Target),n.find(".workOrder").val(t.WorkOrderId),n.find(".product").val(t.ProductId),n.find(".deliveryTime").val(t.DeliveryTime.split(" ")[0]).datepicker("update"),n.find(".remark").val(t.Remark)})};$("#taskOrderList").DataTable(i)})}function showTaskOrderDetailModal(){myPromise(5090).then(n=>{const t=$(this).val();$("#taskOrderSelect").html(setOptions(n.datas,"TaskOrder")).val(t).trigger("change");$("#taskOrderDetailModel").modal("show")})}function getTaskOrderTrInfo(n,t){const i=n.find(".taskOrder").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("任务单不能为空");const r=n.find(".target").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("目标产量不能为0");const u=n.find(".workOrder").val();if(isStrEmptyOrUndefined(u))return void layer.msg("请选择工单");const f=n.find(".product").val();if(isStrEmptyOrUndefined(f))return void layer.msg("请选择计划号");const e=n.find(".deliveryTime").val().trim();if(isStrEmptyOrUndefined(e))return void layer.msg("请选择交货日期");const o={TaskOrder:i,Target:r,WorkOrderId:u,ProductId:f,DeliveryTime:e,Remark:n.find(".remark").val()};return t||(o.Id=n.find(".isEnable").val()>>0),o}function updateTaskOrder(){updateTableRow(_taskOrderTrs,getTaskOrderTrInfo,5091,getTaskOrderList)}function addTaskOrderModel(){const n=myPromise(5060),t=myPromise(5070);Promise.all([n,t]).then(n=>{const i=n[1].datas[0],u={TaskOrder:"",WorkOrderId:"",TargetWork:i.Target,Left:i.Left,Doing:i.Doing,ProductId:"",Target:0,DeliveryTime:i.DeliveryTime.split(" ")[0],Remark:""},r=_tablesConfig(!1,[u]),t=_tableSet();r.columns=r.columns.concat([{data:"TaskOrder",title:"任务单",render:t.addInput.bind(null,"taskOrder","auto")},{data:"WorkOrderId",title:"工单",render:t.addSelect.bind(null,setOptions(n[1].datas,"WorkOrder"),"workOrder")},{data:"TargetWork",title:"目标产量"},{data:"Left",title:"未完成",sClass:"text-red"},{data:"Doing",title:"加工中",sClass:"text-orange"},{data:"ProductId",title:"计划号",render:t.addSelect.bind(null,setOptions(n[0].datas,"Product"),"product")},{data:"Target",title:"目标产量",render:t.addInput.bind(null,"target","auto")},{data:"DeliveryTime",title:"交货日期",render:t.addDay.bind(null,"deliveryTime")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);r.createdRow=n=>initDayTime(n);$("#addTaskOrderList").DataTable(r);$("#addTaskOrderListBtn").off("click").on("click",()=>addDataTableTr("#addTaskOrderList",u));$("#addTaskOrderModel").modal("show")})}function addTaskOrder(){addTableRow("#addTaskOrderList",getTaskOrderTrInfo,5092,()=>{$("#addTaskOrderModel").modal("hide"),getTaskOrderList()})}function delTaskOrder(){delTableRow(_taskOrderTrs,5093,getTaskOrderList)}function pmcChildInStoreCreate(n,t,i,r,u){const f=n.reduce((n,r)=>{const o=r.Data[0].Data,s=o.reduce((n,t)=>{const i=n=>(n=n.split(" ")[0].split("-"),`${n[1]}月${n[2]}日`);return`${n}<th colspan="2">${i(t.ProcessTime)}</th>`},""),e=[],f=[],h=r.Data.reduce((n,o,s)=>{const h=o.Data.reduce((n,s,h)=>{const c=s[t],l=s[i];return e[h]=(e[h]>>0)+c,f[h]=f[h]>>0+l,`${n}<td class="bg-green"><a href="javascript:showPmcChildPlanModal('${s.ProcessTime}',${o.ProductId},${r.PId},'${o.Product}','${r.Process}',${u})" style="color:black">${c}</a></td>
                            <td ${l>c?'class="text-red"':""}>${l}</td>`},"");return`${n}<tr>
                            <td>${s+1}</td>
                            <td>${o.Product}</td>${h}
                        </tr>`},""),c=e.reduce((n,t,i)=>`${n}<td class="bg-green">${t}</td><td ${f[i]>t?'class="text-red"':""}>${f[i]}</td>`,"");return`${n}<div class="form-group">
                        <label class="control-label">${r.Process}：</label>
                        <div class="table-responsive">
                            <table class="table table-hover table-striped table-bordered">
                                <thead class="flat-thead">
                                    <tr>
                                        <th rowspan="2">序号</th>
                                        <th rowspan="2">计划号</th>${s}
                                    </tr>
                                    <tr>${'<th class="bg-green">计划<\/th><th>实际<\/th>'.repeat(o.length)}</tr>
                                </thead>
                                <tbody>
                                    ${h}
                                    <tr>
                                        <td>总计</td><td></td>${c}
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                     </div>`},"");$(r).html(f)}function getPmcChildList(){const n=$("#pmcChildSTime").val();if(isStrEmptyOrUndefined(n))return layer.msg("请选择开始时间");const t=$("#pmcChildETime").val();if(isStrEmptyOrUndefined(t))return layer.msg("请选择结束时间");comTimeDay(n,t)||myPromise(5606,{startTime:n,endTime:t},!0).then(n=>pmcChildInStoreCreate(n.datas,"Put","HavePut","#pmcChildList",5607))}function getPmcInStoreList(){const n=$("#pmcInStoreSTime").val();if(isStrEmptyOrUndefined(n))return layer.msg("请选择开始时间");const t=$("#pmcInStoreETime").val();if(isStrEmptyOrUndefined(t))return layer.msg("请选择结束时间");comTimeDay(n,t)||myPromise(5608,{startTime:n,endTime:t},!0).then(n=>pmcChildInStoreCreate(n.datas,"Target","DoneTarget","#pmcInStoreList",5609))}function showPmcChildPlanModal(n,t,i,r,u,f){const s=n=>(n=n.split(" ")[0].split("-"),`${n[1]}月${n[2]}日`);$("#pmcChildPlanTime").text(s(n));$("#pmcChildPlanCode").text(r);$("#pmcChildPlanProcess").text(u);let e="Put",o="HavePut";f===5609&&(e="Target",o="DoneTarget");myPromise(f,{time:n,productId:t,pId:i},!0).then(n=>{const i=n.datas,t=_tablesConfig(!1,i);t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单"},{data:e,title:"计划",sClass:"bg-green"},{data:o,title:"实际"}]);t.initComplete=function(){if(this.find("tfoot").remove(),i.length){let n=0,t=0;i.forEach(i=>{n+=i[e],t+=i[o]});const r=`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th>${n}</th>
                                <th>${t}</th>
                              </tr>
                           </tfoot>`;this.append(r).find("tfoot tr:last th").css("borderTop",0)}};$("#pmcChildPlanList").DataTable(t);$("#showPmcChildPlanModal").modal("show")})}function getNotArrangeTaskListReset(){getNotArrangeTaskList();$("#notArrangeTaskProcessBox,#pmcPreviewBox,#pmcPreviewProcessSelect,#pmcPreviewProcessNew,#pmcPreviewProcessLater,#pmcPreviewProcessBtn").html("");_pmcPreviewParams={}}function getNotArrangeTaskList(){myPromise(5601).then(n=>{n=n.datas;const r={};n.forEach(n=>r[n.Id]=n);const u={Product:"",Target:"",DeliveryTime:"",StartTime:"",EndTime:"",EstimatedTime:""},t=_tablesConfig(!1,[]),i=_tableSet();t.columns=t.columns.concat([{data:null,title:"任务单",render:i.addSelect.bind(null,setOptions(n,"TaskOrder"),"taskOrder")},{data:"Product",title:"计划号"},{data:"Target",title:"数量"},{data:"DeliveryTime",title:"交货时间",render:n=>n.split(" ")[0]},{data:"StartTime",title:"开始时间",render:i.addDay.bind(null,"startTime")},{data:"EndTime",title:"截止时间",render:i.addDay.bind(null,"endTime")},{data:null,title:"工期",render:()=>"",sClass:"workDay"},{data:null,title:"删除",render:()=>`<button class="btn btn-danger btn-xs del-btn"><i class="fa fa-minus"></i></button>`}]);t.createdRow=n=>{$(n).find(".taskOrder").val(0),initDayTime(n)};$("#notArrangeTaskList").DataTable(t);$("#addNotArrangeTaskListBtn").off("click").on("click",function(){addDataTableTr("#notArrangeTaskList",u);disabledPmcTask();n.length===$("#notArrangeTaskList").DataTable().column(1).nodes().length&&$(this).prop("disabled",!0)}).prop("disabled",!n.length);$("#notArrangeTaskList").off("change").on("change",".taskOrder",function(){const f=$(this).val(),i=$($("#notArrangeTaskList").DataTable().columns(1).nodes()[0]).find(".taskOrder"),u={};for(let n=0,t=i.length;n<t;n++){const r=i.eq(n),f=r.find("option[disabled]");f.prop("disabled",!1);const t=r.val();f.prop("disabled",!0);isStrEmptyOrUndefined(t)||(u[t]=_pmcPreviewParams[t]||{Id:+t})}_pmcPreviewParams=u;const n=r[f],t=$(this).closest("tr");t.find("td").eq(2).text(n.Product);t.find("td").eq(3).text(n.Target);t.find("td").eq(4).text(n.DeliveryTime.split(" ")[0]);t.find(".startTime").val(n.StartTime&&n.StartTime!="0001-01-01 00:00:00"?n.StartTime.split(" ")[0]:"").datepicker("update");t.find(".endTime").val(n.EndTime&&n.EndTime!="0001-01-01 00:00:00"?n.EndTime.split(" ")[0]:"").datepicker("update");disabledPmcTask();setNotArrangeTaskWork($(this).closest("tr"))});$("#notArrangeTaskList").off("changeDate").on("changeDate",".form_date",function(){setNotArrangeTaskWork($(this).closest("tr"))})})}function setNotArrangeTaskWork(n){const t=n.find(".startTime").val().trim(),i=n.find(".endTime").val().trim();if(t&&i){const r=(new Date(i)-new Date(t))/864e5;n.find(".workDay").text(r+1)}}function disabledPmcTask(){const n=$($("#notArrangeTaskList").DataTable().columns(1).nodes()[0]).find(".taskOrder");disabledProcessCodeCommon(n)}function getNotArrangeTaskProcessList(){const n=getDataTableRow("#notArrangeTaskList");for(let t=0,i=n.length;t<i;t++){const f=$(n[t]),e=f.find(".taskOrder"),o=e.find("option[disabled]");o.prop("disabled",!1);const i=e.val();if(o.prop("disabled",!0),isStrEmptyOrUndefined(i))return layer.msg("请选择任务单");const r=f.find(".startTime").val().trim(),u=f.find(".endTime").val().trim();if(r?_pmcPreviewParams[i].StartTime=r:delete _pmcPreviewParams[i].StartTime,u?_pmcPreviewParams[i].EndTime=u:delete _pmcPreviewParams[i].EndTime,r&&u&&compareDate(r,u))return layer.msg("截止时间不能小于开始时间")}const t=Object.values(_pmcPreviewParams);if(!t.length)return layer.msg("请选择任务单");const i=n=>{const u=(n,t,i)=>`<div class="form-group">
                        <label class="control-label">待排程任务单各工序数量：</label>
                        <div class="table-responsive">
                            <table class="table table-hover table-striped table-bordered">
                                <thead class="flat-thead">
                                    <tr>
                                        <th rowspan="2">序号</th>
                                        <th rowspan="2">任务单</th>
                                        <th rowspan="2">计划号</th>${n}
                                    </tr>
                                    <tr>${'<th class="bg-blue">总计<\/th><th class="bg-green">已有<\/th><th class="bg-yellow">剩余<\/th><th>投料<\/th>'.repeat(t)}</tr>
                                </thead>
                                <tbody>${i}</tbody>
                            </table>
                        </div>
                        <div class="text-center">
                            <button class="btn btn-primary btn-sm" id="setNotArrangeTaskProcessBtn">确定</button>
                        </div>
                      </div>`,t=n.Orders.sort((n,t)=>n.Order-t.Order),f=t.reduce((n,t,i)=>`${n}<th colspan="4" ${i%2?"":'class="bg-gray"'}>${t.Process}</th>`,""),r=n.datas;_pmcPreviewParams={};const e=r.reduce((n,i,r)=>{const u=i.Id;_pmcPreviewParams[u]={Id:u,Needs:[]};const e=i.Needs.sort((n,t)=>n.Order-t.Order),f={},o=_pmcPreviewParams[u].Needs;e.forEach(n=>{f[n.Order]=n,o.push({Order:n.Order,TaskOrderId:n.TaskOrderId,ProcessId:n.ProcessId,PId:n.PId,ProductId:n.ProductId,Target:n.Target,Put:n.Put,Stock:n.Stock})});const s=t.reduce((n,t)=>{const i=f[t.Order];return i?`${n}
                          <td style="padding:4px" class="bg-blue">${i.Target+i.Stock}</td>
                          <td style="padding:4px" class="bg-green">
                             <input type="text" class="form-control text-center stock" value="${i.Stock}" style="width:50px;margin:auto;padding:inherit">
                          </td>
                          <td class="bg-yellow">${i.Target}</td>
                          <td style="padding:4px"><strong class="text-red">${i.Put}</strong> (${i.Rate}%)</td>`:`${n}<td style="padding:4px" class="short-slab"><i></td><td style="padding:4px" class="short-slab"><i></td><td style="padding:4px" class="short-slab"><i></td><td style="padding:4px" class="short-slab"><i></td>`},"");return`${n}<tr>
                        <td>${r+1}</td>
                        <td>${i.TaskOrder}</td>
                        <td>${i.Product}</td>${s}
                    </tr>`},""),o=u(f,t.length,e);$("#notArrangeTaskProcessBox").html(o).find("th,td").css("border","1px solid black").end().find("tbody .bg-green").css("padding",0);$("#setNotArrangeTaskProcessBtn").off("click").on("click",()=>{const n=$("#notArrangeTaskProcessBox .stock");let t=0;const u=r.map(i=>({Id:i.Id,Needs:i.Needs.map(i=>({Order:i.Order,TaskOrderId:i.TaskOrderId,ProcessId:i.ProcessId,PId:i.PId,ProductId:i.ProductId,Target:i.Target,Put:i.Put,Stock:n.eq(t++).val()>>0}))}));myPromise(5602,_taskOrders).then(n=>{i(n),n.datas.forEach(n=>{const t={Id:n.Id,Needs:n.Needs.map(n=>({Order:n.Order,TaskOrderId:n.TaskOrderId,ProcessId:n.ProcessId,PId:n.PId,ProductId:n.ProductId,Target:n.Target,Put:n.Put,Stock:n.Stock}))};n.StartTime!="0001-01-01 00:00:00"&&(t.StartTime=n.StartTime);n.EndTime!="0001-01-01 00:00:00"&&(t.EndTime=n.EndTime);_pmcPreviewParams[n.Id]=t}),_taskOrders=Object.values(_pmcPreviewParams)})});_taskOrders=[];r.forEach(n=>{const t={Id:n.Id,Needs:n.Needs.map(n=>({Order:n.Order,TaskOrderId:n.TaskOrderId,ProcessId:n.ProcessId,PId:n.PId,ProductId:n.ProductId,Target:n.Target,Put:n.Put,Stock:n.Stock}))};n.StartTime!="0001-01-01 00:00:00"&&(t.StartTime=n.StartTime);n.EndTime!="0001-01-01 00:00:00"&&(t.EndTime=n.EndTime);_pmcPreviewParams[n.Id]=t});_taskOrders=Object.values(_pmcPreviewParams)};myPromise(5602,t,!0).then(i)}function getArrangeTaskList(){const n=myPromise(5590),t=myPromise(5600);Promise.all([n,t]).then(n=>{_arrangeTask=[];const t=_tablesConfig(!1,n[1].datas),i=_tableSet();t.columns=t.columns.concat([{data:null,title:"等级",render:i.addSelect.bind(null,setOptions(n[0].datas,"Level"),"level")},{data:"StateStr",title:"状态"},{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:"Target",title:"数量"},{data:"DoneTarget",title:"已完成"},{data:"DeliveryTime",title:"交货时间",render:i.showTime},{data:"StartTime",title:"开始时间",render:i.addDay.bind(null,"startTime")},{data:"EndTime",title:"截止时间",render:i.addDay.bind(null,"endTime")},{data:"CostDay",title:"工期",render:n=>n||"",sClass:"workDay"},]);t.createdRow=(n,t)=>{$(n).find(".level").val(t.LevelId),initDayTime(n)};$("#arrangeTaskList").DataTable(t);$("#arrangeTaskList").off("changeDate").on("changeDate",".form_date",function(){setNotArrangeTaskWork($(this).closest("tr"))})})}function setArrangeTaskList(){const t=Array.from(getDataTableRow("#arrangeTaskList")),i=$("#arrangeTaskList").DataTable(),n=[];for(let r=0,u=t.length;r<u;r++){const u=t[r],s=i.row(u).data(),f=$(u).find(".level").val();if(isStrEmptyOrUndefined(f))return void layer.msg("请选择等级");const e=$(u).find(".startTime").val();if(isStrEmptyOrUndefined(e))return layer.msg("请选择开始时间");const o=$(u).find(".endTime").val();if(isStrEmptyOrUndefined(o))return layer.msg("请选择结束时间");n[r]={StartTime:e,EndTime:o,LevelId:f,Id:s.Id}}if(!n.length)return layer.msg("请设置任务单");myPromise(5603,n)}function getPmcPreviewList(){myPromise(5604,!$("#notArrangeTaskProcessBox").html()?[]:Object.values(_pmcPreviewParams),!0).then(n=>{const i=(t,i)=>`<div class="form-group">
                        <label class="control-label">开始时间：${n.StartTime.split(" ")[0]}</label><br />
                        <label class="control-label">产能指数：</label>
                        <div class="table-responsive">
                            <table class="table table-hover table-striped table-bordered">
                                <thead class="flat-thead">
                                    <tr>
                                        <th rowspan="2" style="width: 40px">序号</th>
                                        <th rowspan="2" style="width: 82px">任务单</th>
                                        <th rowspan="2" style="width: 82px">计划号</th>
                                        <th rowspan="2" style="width: 82px">开始时间</th>
                                        <th rowspan="2" style="width: 82px">结束时间</th>
                                        <th rowspan="2" style="width: 50px">耗时</th>
                                        <th rowspan="2" style="width: 50px">逾期</th>
                                        <th rowspan="2" style="width: 50px">当前最优</th>${t}
                                    </tr>
                                    <tr>${'<th class="bg-yellow">设备<\/th><th>人员<\/th>'.repeat(n.Orders.length)}</tr>
                                </thead>
                                <tbody>${i}</tbody>
                            </table>
                        </div>
                      </div>`,t=n.Orders.sort((n,t)=>n.Order-t.Order),r=t.reduce((n,t)=>`${n}<th colspan="2">${t.Process}</th>`,""),u=n.Cost.reduce((n,i,r)=>{const o=i.Id,h=i.CostDays.sort((n,t)=>n.Order-t.Order),s={};h.forEach(n=>{s[n.Order]=n});const c=t.reduce((n,t)=>{const i=s[t.Order];return i?`${n}<td class="bg-yellow">${i.DeviceDay}</td><td>${i.OperatorDay}</td>`:`${n}<td style="padding:4px" class="short-slab"><i></td><td style="padding:4px" class="short-slab"><i></td>`},""),u=i.EstimatedStartTime.split(" ")[0],f=i.EstimatedCompleteTime.split(" ")[0],l=Array.from(getDataTableRow("#notArrangeTaskList")),e=i.Id;return l.forEach(n=>{n=$(n);const t=n.find(".taskOrder option[disabled]");t.prop("disabled",!1);const i=n.find(".taskOrder").val();t.prop("disabled",!0);i==e&&(isStrEmptyOrUndefined(n.find(".startTime").val())&&(n.find(".startTime").val(u).datepicker("update"),_pmcPreviewParams[o]&&(_pmcPreviewParams[e].StartTime=u)),isStrEmptyOrUndefined(n.find(".endTime").val())&&(n.find(".endTime").val(f).datepicker("update"),_pmcPreviewParams[o]&&(_pmcPreviewParams[e].EndTime=f)))}),`${n}<tr>
                        <td>${r+1}</td>
                        <td>${i.TaskOrder}</td>
                        <td>${i.Product}</td>
                        <td>${u}</td>
                        <td>${f}</td>
                        <td>${i.CostDay}</td>
                        <td>${i.OverdueDay}</td>
                        <td>${i.Best?"人员":"设备"}</td>${c}
                    </tr>`},""),f=i(r,u);$("#pmcPreviewBox").html(f);getPresentSchedule(n)})}function getPresentSchedule(n){const r=`<div class="form-group flexStyle">
                        <label class="control-label no-margin">工序：</label>
                        <select class="form-control" id="pmcScheduleSelect" style="width:120px;margin-right:3px">${setOptions(n.Orders,"Process")}</select>
                        <button class="btn btn-primary btn-sm" id="pmcScheduleBtn">查看</button>
                    </div>`;$("#pmcPreviewProcessSelect").html(r);const t={};n.Put.forEach(n=>t[n.PId]=n);var i=function(){const i=$("#pmcScheduleSelect").val();if(!isStrEmptyOrUndefined(i)){const o={startTime:n.StartTime,endTime:n.CompleteTime,pid:i},u=(n,t,i,r)=>`<div class="form-group">
                    <label class="control-label">${n}：</label>
                    <div class="table-responsive">
                        <table class="table table-hover table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>序号</th>
                                    <th>计划号</th>${t}
                                </tr>
                            </thead>
                            <tbody>
                            ${i}
                            <tr><td>总计</td><td></td>${r}</tr>
                            </tbody>
                        </table>
                    </div>
                  </div>`,f=n=>(n=n.split(" ")[0].split("-"),`${n[1]}月${n[2]}日`),s=(n,t)=>{const r=t.Data[0].Data.reduce((n,t)=>`${n}<th>${f(t.ProcessTime)}</th>`,""),i=[],e=t.Data.reduce((n,r,u)=>{const f=r.Data.reduce((n,u,f)=>{const e=u.Put;return i[f]=(i[f]>>0)+e,`${n}<td><a href="javascript:showPmcProcessPlanModal('${u.ProcessTime}',${r.ProductId},${t.PId},'${r.Product}','${t.Process}')">${e}</a></td>`},"");return`${n}<tr>
                            <td>${u+1}</td>
                            <td>${r.Product}</td>${f}
                        </tr>`},""),o=i.reduce((n,t)=>`${n}<td>${t}</td>`,"");return u(n,r,e,o)};myPromise(5606,o,!0).then(n=>{const t=n.datas[0];if(!t)return $("#pmcPreviewProcessNew").html('<label class="control-label">当前排程：<\/label>');$("#pmcPreviewProcessNew").html(s("当前排程",t))});const h=t[i].Data[0].Data.reduce((n,t)=>`${n}<th>${f(t.ProcessTime)}</th>`,""),r=[],e=[];let c=0;const l=t[i].Data.reduce((n,u,f)=>{const o=u.Data.reduce((n,f,o)=>{const s=f.Put;return r[o]=(r[o]>>0)+s,e.push(f.Data),`${n}<td><a href="javascript:;" class="old-data" index="${c++}" product="${u.Product}" process="${t[i].Process}">${s}</a></td>`},"");return`${n}<tr>
                            <td>${f+1}</td>
                            <td>${u.Product}</td>${o}
                        </tr>`},""),a=r.reduce((n,t)=>`${n}<td>${t}</td>`,"");$("#pmcPreviewProcessLater").html(u("安排后",h,l,a)).find(".old-data").on("click",function(){const i=$(this).attr("index");$("#pmcProcessPlanCode").text($(this).attr("product"));$("#pmcProcessPlanProcess").text($(this).attr("process"));const t=_tablesConfig(!1,e[i]);t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单"},{data:"Put",title:"数量"},{data:null,title:"安排",render:n=>Object.values(n.Arranges).map(n=>"{0}:{1}次".format(n.Item1,n.Item2)).join()}]);t.initComplete=function(){if(this.find("tfoot").remove(),n.length){const t=`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th>${n.reduce((n,t)=>n+t.Put,0)}</th>
                              </tr>
                           </tfoot>`;this.append(t).find("tfoot tr:last th").css("borderTop",0)}};$("#pmcProcessPlanList").DataTable(t);$("#showPmcProcessPlanModal").modal("show")});$("#pmcPreviewProcessBtn").html('<button class="btn btn-primary btn-sm">排产<\/button>').find("button").on("click",()=>{if(!_taskOrders.length)return layer.msg("请先设置待排程任务单各工序数量");const t={TaskOrders:_taskOrders,Schedule:n.Schedule};myPromise(5605,t,!1,1,getArrangeTaskList)})}};$("#pmcScheduleBtn").off("click").on("click",i);$("#pmcScheduleBtn").click();$("#pmcScheduleSelect").off("change").on("change",i)}function showPmcProcessPlanModal(n,t,i,r,u){$("#pmcProcessPlanCode").text(r);$("#pmcProcessPlanProcess").text(u);myPromise(5607,{time:n,productId:t,pId:i},!0).then(n=>{const i=n.datas,t=_tablesConfig(!1,i);t.columns=t.columns.concat([{data:"TaskOrder",title:"任务单"},{data:"Put",title:"数量"},{data:null,title:"安排",render:n=>Object.values(n.Arranges).map(n=>"{0}:{1}次".format(n.Item1,n.Item2)).join()}]);t.initComplete=function(){if(this.find("tfoot").remove(),i.length){const n=`<tfoot>
                              <tr>
                                <th>总计</th>
                                <th></th>
                                <th>${i.reduce((n,t)=>n+t.Put,0)}</th>
                              </tr>
                           </tfoot>`;this.append(n).find("tfoot tr:last th").css("borderTop",0)}};$("#pmcProcessPlanList").DataTable(t);$("#showPmcProcessPlanModal").modal("show")})}function showTaskLevelModel(){getTaskLevelList();$("#showTaskLevelModel").modal("show")}function getTaskLevelList(){_pmcTaskLevelTrs=[];myPromise(5590).then(n=>{const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Level",title:"等级",render:i.input.bind(null,"level")},{data:"Order",title:"顺序",render:i.input.bind(null,"order")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_pmcTaskLevelTrs,(n,t)=>{n.find(".level").val(t.Level),n.find(".order").val(t.Order),n.find(".remark").val(t.Remark)})};$("#pmcTaskLevelList").DataTable(t)})}function getTaskLevelTrInfo(n,t){const i=n.find(".level").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("等级不能为空");const r=n.find(".order").val().trim().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("顺序不能为空");const u={Level:i,Order:r,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updateTaskLevel(){updateTableRow(_pmcTaskLevelTrs,getTaskLevelTrInfo,5591,getTaskLevelList)}function showAddTaskLevelModel(){const i={Level:"",Order:"",Remark:""},n=_tablesConfig(!1,[i]),t=_tableSet();n.columns=n.columns.concat([{data:"Level",title:"等级",render:t.addInput.bind(null,"level","auto")},{data:"Order",title:"顺序",render:t.addInput.bind(null,"order","auto")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:t.delBtn}]);n.createdRow=n=>initDayTime(n);$("#addTaskLevelList").DataTable(n);$("#addTaskLevelListBtn").off("click").on("click",()=>addDataTableTr("#addTaskLevelList",i));$("#showAddTaskLevelModel").modal("show")}function addTaskLevel(){addTableRow("#addTaskLevelList",getTaskLevelTrInfo,5592,()=>{$("#showAddTaskLevelModel").modal("hide"),getTaskLevelList()})}function delTaskLevel(){delTableRow(_pmcTaskLevelTrs,5593,getTaskLevelList)}function getPmcPersonList(){const n={condition:$("#pmcPersonQueryTF").val()},t=$("#pmcPersonQueryMode").val();n[t]=["number","name"].includes(t)?$("#pmcPersonQueryInput").val().trim():$("#pmcPersonQuerySelect").val();const i=myPromise(5500,n,!0),r=myPromise(5510,{menu:!0},!0),u=myPromise(5030,{menu:!0},!0);Promise.all([i,r,u]).then(n=>{_pmcPersonTrs=[];const i=_tablesConfig(!0,n[0].datas),t=_tableSet();i.columns=i.columns.concat([{data:"StateStr",title:"状态",render:t.select.bind(null,t.stateOps,"state")},{data:"Number",title:"编号"},{data:"Name",title:"姓名"},{data:"Level",title:"等级",render:t.select.bind(null,setOptions(n[1].datas,"Level"),"level")},{data:"Process",title:"工序",render:t.select.bind(null,setOptions(n[2].datas,"Process"),"process")},{data:"Priority",title:"优先级",render:t.input.bind(null,"priority")},{data:"Remark",title:"备注",render:t.input.bind(null,"remark")}]);i.drawCallback=function(){initCheckboxAddEvent.call(this,_pmcPersonTrs,(n,t)=>{n.find(".state").val(t.State),n.find(".level").val(t.LevelId),n.find(".process").val(t.ProcessId),n.find(".priority").val(t.Priority),n.find(".remark").val(t.Remark)})};$("#pmcPersonList").DataTable(i)})}function getPmcPersonTrInfo(n,t){let i;if(t){const t=n.find(".name"),r=t.find("option[disabled]");r.prop("disabled",!1);const u=t.val();if(r.prop("disabled",!0),isStrEmptyOrUndefined(u))return void layer.msg("请选择员工");i={UserId:u,State:1}}else{const t=n.find(".state").val();if(isStrEmptyOrUndefined(t))return void layer.msg("请选择状态");i={State:t,Id:n.find(".isEnable").val()>>0}}const r=n.find(".level").val();if(isStrEmptyOrUndefined(r))return void layer.msg("请选择等级");i.LevelId=r;const u=n.find(".process").val();return isStrEmptyOrUndefined(u)?void layer.msg("请选择工序"):(i.ProcessId=u,i.Priority=n.find(".priority").val()>>0,i.Remark=n.find(".remark").val(),i)}function updatePmcPerson(){updateTableRow(_pmcPersonTrs,getPmcPersonTrInfo,5501,getPmcPersonList)}function showAddPmcPersonModel(){const n=myPromise(5500,{menu:!0,add:!0},!0),t=myPromise(5510,{menu:!0},!0),i=myPromise(5030,{menu:!0},!0);Promise.all([n,t,i]).then(n=>{const r={Name:"",Level:"",Process:"",Priority:0,Remark:""},i=_tablesConfig(!1,[r]),t=_tableSet();i.columns=i.columns.concat([{data:"Name",title:"员工姓名",render:t.addSelect.bind(null,setOptions(n[0].datas,"Name"),"name")},{data:"Level",title:"等级",render:t.addSelect.bind(null,setOptions(n[1].datas,"Level"),"level")},{data:"Process",title:"工序",render:t.addSelect.bind(null,setOptions(n[2].datas,"Process"),"process")},{data:"Priority",title:"优先级",render:t.addInput.bind(null,"priority","auto")},{data:"Remark",title:"备注",render:t.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:()=>'<button class="btn btn-danger btn-xs del-btn"><i class="fa fa-minus"><\/i><\/button>'}]);i.createdRow=n=>$(n).find(".name").val(0);$("#addPmcPersonList").DataTable(i);$("#addPmcPersonListBtn").prop("disabled",n[0].datas.length<=$("#addPmcPersonList").DataTable().column(1).nodes().length);$("#addPmcPersonListBtn").off("click").on("click",function(){addDataTableTr("#addPmcPersonList",r);disabledPmcPerson();n[0].datas.length===$("#addPmcPersonList").DataTable().column(1).nodes().length&&$(this).prop("disabled",!0)});$("#showAddPmcPersonModel").modal("show")})}function disabledPmcPerson(){const n=$($("#addPmcPersonList").DataTable().columns(1).nodes()[0]).find(".name");disabledProcessCodeCommon(n)}function addPmcPerson(){addTableRow("#addPmcPersonList",getPmcPersonTrInfo,5502,()=>{$("#showAddPmcPersonModel").modal("hide"),getPmcPersonList()})}function delPmcPerson(){delTableRow(_pmcPersonTrs,5503,getPmcPersonList)}function showPmcGradeModal(){getPmcGradeList();$("#showPmcGradeModal").modal("show")}function getPmcGradeList(){myPromise(5510).then(n=>{_pmcGradeTrs=[];const t=_tablesConfig(!0,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Level",title:"等级",render:i.input.bind(null,"level")},{data:"Order",title:"顺序",render:i.input.bind(null,"order")},{data:"Remark",title:"备注",render:i.input.bind(null,"remark")}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_pmcGradeTrs,(n,t)=>{n.find(".level").val(t.Level),n.find(".remark").val(t.Remark)})};$("#pmcGradeList").DataTable(t)})}function getPmcGradeTrInfo(n,t){const i=n.find(".level").val().trim();if(isStrEmptyOrUndefined(i))return void layer.msg("等级不能为空");const r=n.find(".order").val().trim();if(isStrEmptyOrUndefined(r))return void layer.msg("顺序不能为空");const u={Level:i,Order:r>>0,Remark:n.find(".remark").val()};return t||(u.Id=n.find(".isEnable").val()>>0),u}function updatePmcGrade(){updateTableRow(_pmcGradeTrs,getPmcGradeTrInfo,5511,getPmcGradeList)}function addPmcGradeModel(){const i={Level:"",Order:"",Remark:""},t=_tablesConfig(!1,[i]),n=_tableSet();t.columns=t.columns.concat([{data:"Level",title:"等级",render:n.addInput.bind(null,"level","auto")},{data:"Order",title:"顺序",render:n.addInput.bind(null,"order","auto")},{data:"Remark",title:"备注",render:n.addInput.bind(null,"remark","100%")},{data:null,title:"删除",render:n.delBtn}]);$("#addPmcGradeList").DataTable(t);$("#addPmcGradeListBtn").off("click").on("click",()=>addDataTableTr("#addPmcGradeList",i));$("#addPmcGradeModel").modal("show")}function addPmcGrade(){addTableRow("#addPmcGradeList",getPmcGradeTrInfo,5512,()=>{$("#addPmcGradeModel").modal("hide"),getPmcGradeList(),getPmcPersonList()})}function delPmcGrade(){delTableRow(_pmcGradeTrs,5513,()=>{getPmcGradeList(),getPmcPersonList()})}function getFlowCardList(){let n=$("#sendCardSTime").val().trim();if(isStrEmptyOrUndefined(n))return layer.msg("请选择发卡开始时间");let t=$("#sendCardETime").val().trim();if(isStrEmptyOrUndefined(t))return layer.msg("请选择发卡结束时间");if(compareDate(n,t))return layer.msg("结束时间不能小于开始时间");n+=" 00:00:00";t+=" 23:59:59";const i=$("#flowCardTaskOrderSelect").val();if(isStrEmptyOrUndefined(i))return layer.msg("请选择任务单");const r=$("#flowCardPlanSelect").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择计划号");myPromise(5110,{startTime:n,endTime:t,taskOrderId:i,productId:r},!0).then(n=>{_flowCardTrs=[];const t=_tablesConfig(!0,n.datas);t.columns=t.columns.concat([{data:"CreateTime",title:"发卡时间"},{data:"FlowCard",title:"流程卡"},{data:"ProcessCode",title:"流程编号"},{data:"TaskOrder",title:"任务单"},{data:"Product",title:"计划号"},{data:"Batch",title:"预计工时"},{data:"Id",title:"流程详情",render:n=>`<button class="btn btn-info btn-sm" onclick="showProcessFlowCardIdModal(${n})">查看</button>`},{data:"Remark",title:"备注"}]);t.drawCallback=function(){initCheckboxAddEvent.call(this,_flowCardTrs)};$("#flowCardList").DataTable(t)})}function showProcessFlowCardIdModal(n){myPromise(5150,{flowCardId:n},!0).then(n=>{const t=_tablesConfig(!1,n.datas),i=_tableSet();t.columns=t.columns.concat([{data:"Process",title:"工序"},{data:"Processor",title:"加工人"},{data:"DeviceCode",title:"加工设备"},{data:null,title:"最后完成时间",render:i.endFinishTime},{data:"Progress",title:"进度",render:i.progress},{data:"Count",title:"加工次数"},{data:"Before",title:"加工前数量"},{data:"Left",title:"剩余数量"},{data:"Qualified",title:"合格数"},{data:"Unqualified",title:"不合格数"},{data:"Before",title:"产量"}]);$("#processFlowCardIdList").DataTable(t);$("#showProcessFlowCardIdModal").modal("show")})}function showProcessDetail(n){myPromise(5060,{qId:n},!0).then(n=>{const i=n.datas[0],r=i.ProductProcesses,t={};r.forEach(n=>{const i=n.ProcessCodeId;t[i]?t[i].push(n):t[i]=[n]});$("#processDetailCodeSelect").off("change").on("change",function(){const i=$(this).val(),n=_tablesConfig(!1,t[i]),r=_tableSet();n.columns=n.columns.concat([{data:"Process",title:"流程"},{data:"ProcessRepeat",title:"可否返工",render:r.isReworkText},{data:"ProcessNumber",title:"单台加工数量"},{data:null,title:"工艺数据",render:()=>'<button class="btn btn-info btn-sm look-btn">查看<\/button>'}]);n.createdRow=(n,t)=>$(n).find(".look-btn")[0].ProcessData=JSON.parse(t.ProcessData);$("#processDetailList").DataTable(n)});$("#processDetailCodeSelect").html(getPlanToProcessCodeOps(i)).trigger("change");$("#showProcessDetailModal").modal("show")})}function getPlanToProcessCodeOps(n){const t=n.ProcessCodes?n.ProcessCodes.split(","):[],i=n.ProcessCodeIds?n.ProcessCodeIds.split(","):[],r=i.map((n,i)=>({Id:n,ProcessCode:t[i]}));return setOptions(r,"ProcessCode")}function selectTaskOrder(n){const t=$("#addFlowCardProcessList");t.html()&&(t.DataTable().destroy().clear(),t.empty());$("#addFlowCardWorkNum").val("");$("#addFlowCardCardNum").val("");$("#addFlowCardTarget").text(n.Target);$("#addFlowCardLeft").text(n.Left);$("#addFlowCardDoing").text(n.Doing);$("#addFlowCardIssue").text(n.Issue);$("#addFlowCardPlan").text(n.Product);$("#addFlowCardTime").text(n.DeliveryTime.split(" ")[0]);$("#processCodeLookBtn").val(n.ProductId);const i=n.ProductId;myPromise(5060,{qId:i},!0).then(n=>$("#addFlowCardProcessCodeSelect").html(getPlanToProcessCodeOps(n.datas[0])).trigger("change"))}function addFlowCardModel(){const n=myPromise(5090),t=myPromise(5e3);Promise.all([n,t]).then(n=>{const t=n[0].datas;$("#addFlowCardTaskOrderSelect").html(setOptions(t,"TaskOrder"));$("#addFlowCardPersonSelect").html(setOptions(n[1].datas,"Account"));selectTaskOrder(t[0])});$("#addFlowCardModel").modal("show")}function addFlowCardProcessCodeLook(){const n=$(this).val();showProcessDetail(n)}function addFlowCardPreview(){let n=$("#addFlowCardWorkNum").val()>>0;if(isStrEmptyOrUndefined(n))return layer.msg("请输入加工数量");const t=$("#addFlowCardCardNum").val()>>0;if(isStrEmptyOrUndefined(t))return layer.msg("请输入单卡数量");const u=$("#addFlowCardProcessCodeSelect").val();if(isStrEmptyOrUndefined(u))return layer.msg("请选择流程编号");const o=$("#addFlowCardProcessCodeSelect :selected").text(),r=$("#addFlowCardPersonSelect").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择加个人");const s=$("#addFlowCardPersonSelect").html(),f=[];do f.push({FlowCard:"",Number:n>=t?t:n,ProcessCode:o,PersonId:r});while((n-=t)>0);const i=_tablesConfig(!1,f),e=_tableSet();i.columns=i.columns.concat([{data:"FlowCard",title:"流程卡号"},{data:"Number",title:"加工数量",render:e.addInput.bind(null,"number","auto")},{data:"ProcessCode",title:"流程编号",render:n=>`<span codeid="${u}">${n}</span>`},{data:"PersonId",title:"加工人",render:e.addSelect.bind(null,s,"person")}]);i.createdRow=n=>$(n).find(".person").val(r);$("#addFlowCardProcessList").DataTable(i)}function addFlowCard(){if(!$("#addFlowCardProcessList").html())return layer.msg("请预览之后再生成");const n=$("#addFlowCardTaskOrderSelect").val();if(isStrEmptyOrUndefined(n))return layer.msg("请选择任务单");const t=[],i=i=>{const r=i.find(".person").val();if(isStrEmptyOrUndefined(r))return layer.msg("请选择加工人");t.push(i.find(".person :selected").text());const u=i.find(".number").val().trim()>>0;if(isStrEmptyOrUndefined(u))return layer.msg("请输入加工数量");return{TaskOrderId:n,ProcessCodeId:i.find("[codeid]").attr("codeid"),ProcessorId:r,Number:u,Remark:"string"}},r=$("#addFlowCardProcessList [codeid]:first").text();addTableRow("#addFlowCardProcessList",i,5112,n=>{const u=n.FlowCards.map((n,i)=>({FlowCard:n.FlowCard,Number:n.Number,ProcessCode:r,PersonId:t[i]})),i=_tablesConfig(!1,u);i.columns=i.columns.concat([{data:"FlowCard",title:"流程卡号"},{data:"Number",title:"加工数量"},{data:"ProcessCode",title:"流程编号"},{data:"PersonId",title:"加工人"}]);$("#addFlowCardProcessList").DataTable(i)})}function flowCardPrint(){const n=$("#addFlowCardProcessList");if(!(n.html()&&!n.find("input").length))return layer.msg("生成成功后才能打印");const t=Array.from(getDataTableRow("#addFlowCardProcessList")).reduce((n,t)=>`${n}${$(t).prop("outerHTML")}`,""),i=`<table border="1" style="width:100%;text-align:center;border-collapse:collapse">${"<thead><tr><th>序号<\/th><th>流程卡号<\/th><th>加工数量<\/th><th>流程编号<\/th><th>加工人<\/th><\/tr><\/thead>"}<tbody>${t}</tbody></table>`;printCode(i)}function delFlowCard(){delTableRow(_flowCardTrs,5113,getFlowCardList)}let _personTrs=null;let _deviceTrs=null;let _deviceCategoryTrs=null;let _deviceModelTrs=null;let _processCodeTrs=null;let _processCodeCategoryTrs=null;let _processOpTrs=null;let _planTrs=null;let _planProcessCodeInfo=null;let _capacityTrs=null;let _workOrderTrs=null;let _taskOrderTrs=null;let _taskOrders=[];let _arrangeTask=null;let _pmcPreviewParams={};let _pmcTaskLevelTrs=null;let _pmcPersonTrs=null;let _pmcGradeTrs=null;let _flowCardTrs=null;